{
  "version": 3,
  "sources": ["../../../../src/utils/transactions/batch/generateBatchTransactionsGrouping.test.ts"],
  "sourcesContent": ["import { generateBatchTransactionsGrouping } from './generateBatchTransactionsGrouping'; // Replace 'your-module' with the actual module path\n\ndescribe('generateBatchTransactionsGrouping', () => {\n  it('should generate batch transactions grouping correctly', () => {\n    const address =\n      'erd1axhx4kenjlae6sknq7zjg2g4fvzavv979r2fg425p62wkl84avtqsf7vvv';\n    const transactions = [\n      [\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '1'\n        },\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '2'\n        }\n      ],\n      [\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '3'\n        }\n      ],\n      [\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '4'\n        },\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '5'\n        },\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '6'\n        }\n      ]\n    ];\n\n    const expectedGrouping = [[0, 1], [2], [3, 4, 5]];\n\n    const result = generateBatchTransactionsGrouping(transactions);\n\n    expect(result).toEqual(expectedGrouping);\n  });\n\n  it('should handle empty input', () => {\n    const transactions: any[][] = [];\n\n    const result = generateBatchTransactionsGrouping(transactions);\n\n    expect(result).toEqual([]);\n  });\n\n  it('should handle nested empty arrays', () => {\n    const transactions = [[], [], []];\n\n    const result = generateBatchTransactionsGrouping(transactions);\n\n    expect(result).toEqual([[], [], []]);\n  });\n});\n"],
  "mappings": "mIAAA,QAEA,SAAS,oCAAqC,IAAM,CAClD,GAAG,wDAAyD,IAAM,CAChE,GAAM,GACJ,iEACI,EAAe,CACnB,CACE,CACE,SAAU,EACV,OAAQ,EACR,MAAO,IACP,KAAM,GACR,EACA,CACE,SAAU,EACV,OAAQ,EACR,MAAO,IACP,KAAM,GACR,CACF,EACA,CACE,CACE,SAAU,EACV,OAAQ,EACR,MAAO,IACP,KAAM,GACR,CACF,EACA,CACE,CACE,SAAU,EACV,OAAQ,EACR,MAAO,IACP,KAAM,GACR,EACA,CACE,SAAU,EACV,OAAQ,EACR,MAAO,IACP,KAAM,GACR,EACA,CACE,SAAU,EACV,OAAQ,EACR,MAAO,IACP,KAAM,GACR,CACF,CACF,EAEM,EAAmB,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,EAAG,CAAC,EAAG,EAAG,CAAC,CAAC,EAE1C,EAAS,EAAkC,CAAY,EAE7D,OAAO,CAAM,EAAE,QAAQ,CAAgB,CACzC,CAAC,EAED,GAAG,4BAA6B,IAAM,CAGpC,GAAM,GAAS,EAFe,CAAC,CAE8B,EAE7D,OAAO,CAAM,EAAE,QAAQ,CAAC,CAAC,CAC3B,CAAC,EAED,GAAG,oCAAqC,IAAM,CAG5C,GAAM,GAAS,EAFM,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,CAE6B,EAE7D,OAAO,CAAM,EAAE,QAAQ,CAAC,CAAC,EAAG,CAAC,EAAG,CAAC,CAAC,CAAC,CACrC,CAAC,CACH,CAAC",
  "names": []
}
