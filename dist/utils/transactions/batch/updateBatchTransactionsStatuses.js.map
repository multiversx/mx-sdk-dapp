{
  "version": 3,
  "sources": ["../../../../src/utils/transactions/batch/updateBatchTransactionsStatuses.ts"],
  "sourcesContent": ["import { updateSignedTransactionStatus } from 'reduxStore/slices';\nimport { store } from 'reduxStore/store';\nimport { removeBatchTransactions } from 'services/transactions';\nimport { SignedTransactionType, TransactionServerStatusesEnum } from 'types';\nimport { sequentialToFlatArray } from './sequentialToFlatArray';\n\nexport function updateBatchTransactionsStatuses({\n  batchId,\n  sessionId,\n  transactions\n}: {\n  batchId: string;\n  sessionId: string;\n  transactions: SignedTransactionType[] | SignedTransactionType[][];\n}) {\n  const transactionsArray = sequentialToFlatArray({ transactions });\n\n  const batchIsSuccessful = transactionsArray.every(\n    (transaction) =>\n      transaction.status === TransactionServerStatusesEnum.success\n  );\n\n  if (transactionsArray.length === 0) {\n    return;\n  }\n\n  for (const transaction of transactionsArray) {\n    const { hash, status } = transaction;\n\n    store.dispatch(\n      updateSignedTransactionStatus({\n        sessionId,\n        status,\n        transactionHash: hash\n      })\n    );\n  }\n\n  if (batchIsSuccessful) {\n    removeBatchTransactions(batchId);\n  }\n}\n"],
  "mappings": "0iSAAA,QACA,IAEA,IAGO,WAAyC,CAC9C,UACA,YACA,gBAKC,CACD,GAAM,GAAoB,EAAsB,CAAE,cAAa,CAAC,EAE1D,EAAoB,EAAkB,MAC1C,AAAC,GACC,EAAY,SAAW,SAC3B,EAEA,GAAI,EAAkB,SAAW,EAIjC,QAAW,KAAe,GAAmB,CAC3C,GAAM,CAAE,OAAM,UAAW,EAEzB,EAAM,SACJ,EAA8B,CAC5B,YACA,SACA,gBAAiB,CACnB,CAAC,CACH,CACF,CAEA,AAAI,GACF,EAAwB,CAAO,EAEnC",
  "names": []
}
