{
  "version": 3,
  "sources": ["../../../src/services/transactions/sendBatchTransactions.test.ts"],
  "sourcesContent": ["import { addressSelector } from 'reduxStore/selectors';\nimport { store } from 'reduxStore/store';\nimport { getWindowLocation } from 'utils/window/getWindowLocation';\nimport { sendBatchTransactions } from './sendBatchTransactions';\nimport { signTransactions } from './signTransactions';\nimport { transformTransactionsToSign } from './utils/transformTransactionsToSign';\n\njest.mock('reduxStore/selectors', () => ({\n  addressSelector: jest.fn()\n}));\n\njest.mock('reduxStore/store', () => ({\n  store: {\n    getState: jest.fn()\n  }\n}));\n\njest.mock('utils/window/getWindowLocation', () => ({\n  getWindowLocation: jest.fn()\n}));\n\njest.mock('./signTransactions', () => ({\n  signTransactions: jest.fn()\n}));\n\njest.mock('./utils/transformTransactionsToSign', () => ({\n  transformTransactionsToSign: jest.fn()\n}));\n\ndescribe('sendBatchTransactions', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should call all the dependencies and return the expected result', async () => {\n    const address =\n      'erd1axhx4kenjlae6sknq7zjg2g4fvzavv979r2fg425p62wkl84avtqsf7vvv';\n    const sessionId = '12345';\n    const transactions = [\n      [\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '1'\n        },\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '2'\n        }\n      ],\n      [\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '3'\n        }\n      ],\n      [\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '4'\n        },\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '5'\n        },\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '6'\n        }\n      ]\n    ];\n    const transactionsDisplayInfo = {};\n    const callbackRoute = '/callback';\n    const minGasLimit = 21000;\n\n    // Mock the dependencies\n    (addressSelector as unknown as jest.Mock).mockReturnValue(address);\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    (store.getState as unknown as jest.Mock).mockReturnValue(() => {});\n    (getWindowLocation as unknown as jest.Mock).mockReturnValue({\n      pathname: callbackRoute\n    });\n    (signTransactions as unknown as jest.Mock).mockResolvedValue({ sessionId });\n    (transformTransactionsToSign as unknown as jest.Mock).mockResolvedValue([]);\n\n    const result = await sendBatchTransactions({\n      transactions,\n      transactionsDisplayInfo,\n      minGasLimit\n    });\n\n    expect(addressSelector).toHaveBeenCalled();\n    expect(store.getState).toHaveBeenCalled();\n    expect(getWindowLocation).toHaveBeenCalled();\n    expect(transformTransactionsToSign).toHaveBeenCalledWith({\n      transactions: expect.any(Array),\n      minGasLimit\n    });\n    expect(signTransactions).toHaveBeenCalledWith({\n      transactions: expect.any(Array),\n      minGasLimit,\n      callbackRoute,\n      transactionsDisplayInfo,\n      customTransactionInformation: {\n        grouping: expect.any(Array),\n        redirectAfterSign: true,\n        completedTransactionsDelay: undefined,\n        sessionInformation: undefined,\n        skipGuardian: undefined,\n        signWithoutSending: false\n      }\n    });\n\n    expect(result).toEqual({\n      error: undefined,\n      batchId: `${sessionId}-${address}`\n    });\n  });\n\n  it('should prepare the grouping field with the indexes from the flat transactions array', async () => {\n    const address =\n      'erd1axhx4kenjlae6sknq7zjg2g4fvzavv979r2fg425p62wkl84avtqsf7vvv';\n    const sessionId = '12345';\n    const transactions = [\n      [\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '1'\n        },\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '2'\n        }\n      ],\n      [\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '3'\n        }\n      ],\n      [\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '4'\n        },\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '5'\n        },\n        {\n          receiver: address,\n          sender: address,\n          value: '0',\n          data: '6'\n        }\n      ]\n    ];\n    const transactionsDisplayInfo = {}; // Your test display info\n    const callbackRoute = '/callback';\n    const minGasLimit = 21000;\n\n    // Mock the dependencies\n    (addressSelector as unknown as jest.Mock).mockReturnValue(address);\n    (store.getState as unknown as jest.Mock).mockReturnValue({});\n    (getWindowLocation as unknown as jest.Mock).mockReturnValue({\n      pathname: callbackRoute\n    });\n    (signTransactions as unknown as jest.Mock).mockResolvedValue({ sessionId });\n    (transformTransactionsToSign as unknown as jest.Mock).mockResolvedValue(\n      transactions\n    );\n\n    await sendBatchTransactions({\n      transactions,\n      transactionsDisplayInfo,\n      minGasLimit\n    });\n\n    expect(signTransactions).toHaveBeenCalledWith({\n      transactions,\n      minGasLimit,\n      callbackRoute,\n      transactionsDisplayInfo,\n      customTransactionInformation: {\n        grouping: [[0, 1], [2], [3, 4, 5]],\n        redirectAfterSign: true,\n        completedTransactionsDelay: undefined,\n        sessionInformation: undefined,\n        skipGuardian: undefined,\n        signWithoutSending: false\n      }\n    });\n  });\n});\n"],
  "mappings": "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",
  "names": []
}
