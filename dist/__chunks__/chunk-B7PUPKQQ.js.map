{
  "version": 3,
  "sources": ["../../src/UI/ledger/LedgerLoginContainer/AddressTable/AddressTable.tsx"],
  "sourcesContent": ["import React, { ReactNode, useEffect, useState } from 'react';\nimport classNames from 'classnames';\n\nimport { DataTestIdsEnum } from 'constants/index';\nimport { withStyles, WithStylesImportType } from 'hocs/withStyles';\nimport { Pagination } from 'UI/Pagination';\nimport { getAccountBalance } from 'utils/account/getAccountBalance';\n\nimport { WithClassnameType } from '../../../types';\nimport { AddressRow } from '../AddressRow';\nimport { LedgerColumnsEnum } from '../enums';\nimport { LedgerLoading } from '../LedgerLoading';\n\nconst ADDRESSES_PER_PAGE = 10;\nconst TOTAL_ADDRESSES_PAGES = 500;\n\nexport interface AddressTablePropsType extends WithClassnameType {\n  accounts: string[];\n  disabledIndexes?: number[];\n  addressTableClassNames?: {\n    ledgerModalTitleClassName?: string;\n    ledgerModalSubtitleClassName?: string;\n    ledgerModalTableHeadClassName?: string;\n    ledgerModalTableItemClassName?: string;\n    ledgerModalButtonClassName?: string;\n    ledgerModalTableNavigationButtonClassName?: string;\n    ledgerModalTableSelectedItemClassName?: string;\n    ledgerModalTableNavigationButtonDisabledClassName?: string;\n  };\n  customContentComponent?: ReactNode;\n  dataTestId?: string;\n  loading: boolean;\n  onConfirmSelectedAddress: () => void;\n  onGoToSpecificPage: (page: number) => void;\n  onGoToNextPage: () => void;\n  onGoToPrevPage: () => void;\n  onSelectAddress: (address: { address: string; index: number } | null) => void;\n  selectedAddress?: string;\n  startIndex: number;\n}\n\nconst AddressTableComponent = ({\n  accounts,\n  addressTableClassNames,\n  className = 'dapp-ledger-address-table',\n  customContentComponent,\n  dataTestId = DataTestIdsEnum.addressTableContainer,\n  loading,\n  onConfirmSelectedAddress,\n  onGoToSpecificPage,\n  onGoToNextPage,\n  onGoToPrevPage,\n  onSelectAddress,\n  selectedAddress,\n  startIndex,\n  disabledIndexes = [],\n  globalStyles,\n  styles\n}: AddressTablePropsType & WithStylesImportType) => {\n  const {\n    ledgerModalTitleClassName,\n    ledgerModalSubtitleClassName,\n    ledgerModalTableHeadClassName,\n    ledgerModalTableItemClassName,\n    ledgerModalButtonClassName,\n    ledgerModalTableNavigationButtonClassName,\n    ledgerModalTableSelectedItemClassName,\n    ledgerModalTableNavigationButtonDisabledClassName\n  } = addressTableClassNames || {};\n  const [accountsWithBalance, setAccountsWithBalance] = useState<\n    Array<{ address: string; balance: string }>\n  >([]);\n\n  const getFirstUnusedIndex = () => {\n    let indexToCheck = 0;\n    while (disabledIndexes.includes(indexToCheck)) {\n      indexToCheck++;\n    }\n    return indexToCheck;\n  };\n\n  useEffect(() => {\n    const isAccountsLoaded = accounts.length > 0 && !loading;\n\n    const isFirstPageAndNoAddressSelected =\n      !selectedAddress && startIndex === 0;\n\n    const shouldSelectFirstAddress =\n      isAccountsLoaded && isFirstPageAndNoAddressSelected;\n    if (shouldSelectFirstAddress) {\n      const index = getFirstUnusedIndex();\n      const address = accounts[index];\n      onSelectAddress({ address, index });\n    }\n  }, [accounts, selectedAddress, loading, startIndex]);\n\n  const fetchBalance = async (address: string) => {\n    try {\n      const balance = await getAccountBalance(address);\n      return { address, balance };\n    } catch (err) {\n      console.error('error fetching balance', err);\n      throw accountsWithBalance;\n    }\n  };\n\n  useEffect(() => {\n    const balancePromises = accounts.map((account) => fetchBalance(account));\n    setAccountsWithBalance(\n      accounts.map((account) => ({ address: account, balance: '...' }))\n    );\n    Promise.all(balancePromises).then((balances) => {\n      setAccountsWithBalance(balances);\n    });\n  }, [accounts]);\n\n  if (loading) {\n    return <LedgerLoading />;\n  }\n\n  const onConfirm = () => {\n    if (!selectedAddress) {\n      return;\n    }\n\n    onConfirmSelectedAddress();\n  };\n\n  const handlePageChange = (newPage: number) => {\n    if (newPage - 1 === startIndex + 1) {\n      onGoToNextPage();\n      return;\n    }\n\n    if (newPage - 1 === startIndex - 1) {\n      onGoToPrevPage();\n      return;\n    }\n\n    onGoToSpecificPage(newPage - 1);\n  };\n\n  const columns = [\n    LedgerColumnsEnum.Address,\n    LedgerColumnsEnum.Balance,\n    LedgerColumnsEnum.Hash\n  ];\n\n  return (\n    <div\n      className={classNames(styles?.ledgerAddressTableWrapper, className)}\n      data-testid={dataTestId}\n    >\n      <div className={styles?.ledgerAddressTableTop}>\n        <div\n          className={classNames(\n            styles?.ledgerAddressTableHeading,\n            ledgerModalTitleClassName\n          )}\n          data-testid={`${dataTestId}Title`}\n        >\n          Access your wallet\n        </div>\n\n        <p\n          className={classNames(\n            styles?.ledgerAddressTableDescription,\n            ledgerModalSubtitleClassName\n          )}\n          data-testid={`${dataTestId}SubTitle`}\n        >\n          Choose the wallet you want to access\n        </p>\n      </div>\n\n      {customContentComponent}\n\n      <div className={styles?.ledgerAddressTable}>\n        <div\n          className={classNames(\n            styles?.ledgerAddressTableHeader,\n            ledgerModalTableHeadClassName\n          )}\n        >\n          {columns.map((column) => (\n            <div key={column} className={styles?.ledgerAddressTableHeaderItem}>\n              {column}\n            </div>\n          ))}\n        </div>\n\n        <div className={styles?.ledgerAddressTableBody}>\n          {accountsWithBalance &&\n            accountsWithBalance.map(({ address, balance }, index) => (\n              <AddressRow\n                address={address}\n                balance={balance}\n                disabled={disabledIndexes.includes(index)}\n                key={index + startIndex * ADDRESSES_PER_PAGE}\n                index={index + startIndex * ADDRESSES_PER_PAGE}\n                selectedAddress={selectedAddress}\n                onSelectAddress={onSelectAddress}\n                className={ledgerModalTableItemClassName}\n                ledgerModalTableSelectedItemClassName={\n                  ledgerModalTableSelectedItemClassName\n                }\n              />\n            ))}\n        </div>\n      </div>\n\n      <div className={styles?.ledgerAddressTableBottom}>\n        <Pagination\n          className={styles?.ledgerAddressTablePagination}\n          currentPage={startIndex + 1}\n          totalPages={TOTAL_ADDRESSES_PAGES}\n          onPageChange={handlePageChange}\n          disabledClassName={ledgerModalTableNavigationButtonDisabledClassName}\n          buttonsClassNames={ledgerModalTableNavigationButtonClassName}\n        />\n\n        <button\n          disabled={!selectedAddress}\n          onClick={onConfirm}\n          data-testid={DataTestIdsEnum.confirmBtn}\n          className={classNames(\n            globalStyles?.btn,\n            globalStyles?.btnPrimary,\n            styles?.ledgerAddressTableButton,\n            ledgerModalButtonClassName\n          )}\n        >\n          Access Wallet\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport const AddressTable = withStyles(AddressTableComponent, {\n  ssrStyles: () =>\n    import(\n      'UI/ledger/LedgerLoginContainer/AddressTable/addressTableStyles.scss'\n    ),\n  clientStyles: () =>\n    require('UI/ledger/LedgerLoginContainer/AddressTable/addressTableStyles.scss')\n      .default\n});\n"],
  "mappings": "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",
  "names": []
}
