{
  "version": 3,
  "sources": ["../../src/types/transactions.types.ts"],
  "sourcesContent": ["import { ReactNode, Dispatch, SetStateAction } from 'react';\nimport { Address, Transaction } from '@multiversx/sdk-core';\nimport { IPlainTransactionObject } from '@multiversx/sdk-core/out/interface';\n\nimport { SignStepInnerClassesType } from '../UI/SignTransactionsModals/SignWithDeviceModal/SignStep';\nimport { WithClassnameType } from '../UI/types';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum,\n  TransactionTypesEnum\n} from './enums.types';\n\nexport interface TransactionsToSignType {\n  transactions: IPlainTransactionObject[];\n  callbackRoute?: string;\n  sessionId: string;\n  customTransactionInformation: CustomTransactionInformation;\n}\n\nexport interface SignedTransactionsBodyType {\n  transactions?: SignedTransactionType[];\n  status?: TransactionBatchStatusesEnum;\n  errorMessage?: string;\n  redirectRoute?: string;\n  customTransactionInformation?: CustomTransactionInformation;\n}\n\nexport interface SignedTransactionsType {\n  [sessionId: string]: SignedTransactionsBodyType;\n}\n\nexport interface TransactionParameter {\n  sender: Address;\n  receiver: Address;\n  functionName: string;\n  inputParameters: string[];\n  outputParameters: string[];\n}\n\nexport type RawTransactionType = IPlainTransactionObject;\n\nexport interface SignedTransactionType extends RawTransactionType {\n  hash: string;\n  status: TransactionServerStatusesEnum;\n  inTransit?: boolean;\n  errorMessage?: string;\n  customTransactionInformation?: CustomTransactionInformation;\n}\n\nexport interface TransactionDataTokenType {\n  tokenId: string;\n  amount: string;\n  receiver: string;\n  type?: MultiEsdtTransactionType['type'] | '';\n  nonce?: string;\n  multiTxData?: string;\n}\n\nexport type TransactionsDataTokensType =\n  | Record<string, TransactionDataTokenType>\n  | undefined;\n\ninterface MultiEsdtType {\n  type:\n    | TransactionTypesEnum.esdtTransaction\n    | TransactionTypesEnum.nftTransaction;\n  receiver: string;\n  token?: string;\n  nonce?: string;\n  amount?: string;\n  data: string;\n}\n\ninterface MultiEsdtScCallType {\n  type: TransactionTypesEnum.scCall;\n  receiver: string;\n  token?: string;\n  nonce?: string;\n  amount?: string;\n  data: string;\n}\n\nexport type MultiEsdtTransactionType = MultiEsdtType | MultiEsdtScCallType;\n\nexport interface MultiSignTransactionType {\n  multiTxData?: string;\n  transactionIndex: number;\n  transaction: Transaction;\n}\n\nexport interface TokenOptionType {\n  name: string;\n  identifier: string;\n  balance: string;\n  decimals: number;\n  collection?: string;\n  avatar?: string;\n}\n\nexport interface SimpleTransactionType {\n  value: string;\n  receiver: string;\n  data?: string;\n  gasPrice?: number;\n  gasLimit?: number;\n  chainID?: string;\n  version?: number;\n  options?: number;\n  guardian?: string;\n  guardianSignature?: string;\n  nonce?: number;\n}\n\nexport interface TransactionsDisplayInfoType {\n  errorMessage?: string;\n  successMessage?: string;\n  processingMessage?: string;\n  submittedMessage?: string;\n  transactionDuration?: number;\n  timedOutMessage?: string;\n  invalidMessage?: string;\n}\n\nexport interface SendSimpleTransactionPropsType {\n  transactions: SimpleTransactionType[];\n  minGasLimit?: number;\n}\n\nexport interface SendTransactionsPropsType {\n  transactions:\n    | Transaction\n    | SimpleTransactionType\n    | (Transaction | SimpleTransactionType)[];\n  redirectAfterSign?: boolean;\n  signWithoutSending: boolean;\n  skipGuardian?: boolean;\n  completedTransactionsDelay?: number;\n  callbackRoute?: string;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n  minGasLimit?: number;\n  sessionInformation?: any;\n  hasConsentPopup?: boolean;\n}\n\nexport interface SendBatchTransactionsPropsType {\n  transactions: (Transaction | SimpleTransactionType)[][];\n  redirectAfterSign?: boolean;\n  signWithoutSending?: boolean;\n  skipGuardian?: boolean;\n  /**\n   * For Cross-Window provider in Safari browser, performing async calls before signing transactions needs a consent popup in order to open a new tab.\n   */\n  hasConsentPopup?: boolean;\n  completedTransactionsDelay?: number;\n  callbackRoute?: string;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n  minGasLimit?: number;\n  sessionInformation?: any;\n}\n\nexport interface SignTransactionsPropsType {\n  transactions: Transaction[] | Transaction;\n  minGasLimit?: number; // unused, will be removed in v3.0.0\n  callbackRoute?: string;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n  customTransactionInformation: CustomTransactionInformation;\n}\n\nexport interface ActiveLedgerTransactionType {\n  dataField: string;\n  isTokenTransaction: boolean;\n  receiverScamInfo: string | null;\n  transaction: Transaction;\n  transactionIndex: number;\n  transactionTokenInfo: TransactionDataTokenType;\n}\n\nexport interface SmartContractResult {\n  hash: string;\n  timestamp: number;\n  nonce: number;\n  gasLimit: number;\n  gasPrice: number;\n  value: string;\n  sender: string;\n  receiver: string;\n  data: string;\n  prevTxHash: string;\n  originalTxHash: string;\n  callType: string;\n  miniBlockHash: string;\n  returnMessage: string;\n}\n\nexport type DeviceSignedTransactions = Record<number, Transaction>;\n\nexport interface GuardianScreenType extends WithClassnameType {\n  address: string;\n  onSignTransaction: () => Promise<void>;\n  onPrev: () => void;\n  title?: ReactNode;\n  signStepInnerClasses?: SignStepInnerClassesType;\n  signedTransactions?: DeviceSignedTransactions;\n  guardianFormDescription?: ReactNode;\n  setSignedTransactions?: Dispatch<\n    SetStateAction<DeviceSignedTransactions | undefined>\n  >;\n}\n\nexport interface SignModalPropsType extends WithClassnameType {\n  callbackRoute?: string;\n  error: string | null;\n  GuardianScreen?: (signProps: GuardianScreenType) => JSX.Element;\n  handleClose: () => void;\n  handleSubmit?: () => void;\n  modalContentClassName?: string;\n  sessionId?: string;\n  signStepInnerClasses?: SignStepInnerClassesType;\n  title?: ReactNode;\n  transactions: Transaction[];\n  verifyReceiverScam?: boolean;\n}\n\nexport interface CustomTransactionInformation {\n  redirectAfterSign: boolean;\n  sessionInformation: any;\n  completedTransactionsDelay?: number;\n  signWithoutSending: boolean;\n  /**\n   * If true, transactions with lower nonces than the account nonce will not be updated with the correct nonce\n   */\n  skipUpdateNonces?: boolean;\n  /**\n   * If true, the change guardian action will not trigger transaction version update\n   */\n  skipGuardian?: boolean;\n  /**\n   * Keeps indexes of transactions that should be grouped together. If not provided, all transactions will be grouped together. Used only for batch transactions.\n   */\n  grouping?: number[][];\n  /**\n   * For Cross-Window provider in Safari browser, performing async calls before signing transactions needs a consent popup in order to open a new tab.\n   */\n  hasConsentPopup?: boolean;\n}\n\nexport interface SendTransactionReturnType {\n  error?: string;\n  sessionId: string | null;\n}\n\nexport interface SendBatchTransactionReturnType {\n  error?: string;\n  batchId: string | null;\n}\n\nexport type GetTransactionsByHashesType = (\n  pendingTransactions: PendingTransactionsType\n) => Promise<GetTransactionsByHashesReturnType>;\n\nexport type GetTransactionsByHashesReturnType = {\n  hash: string;\n  invalidTransaction: boolean;\n  status: TransactionServerStatusesEnum;\n  inTransit?: boolean;\n  results: SmartContractResult[];\n  sender: string;\n  receiver: string;\n  data: string;\n  previousStatus: string;\n  hasStatusChanged: boolean;\n}[];\n\nexport type PendingTransactionsType = {\n  hash: string;\n  previousStatus: string;\n}[];\n\nexport interface TransactionLinkType {\n  link: string;\n  label: string;\n  address: string;\n}\n\nexport type Nullable<T> = T | null;\n"],
  "mappings": "0CAAA",
  "names": []
}
