{
  "version": 3,
  "sources": ["../../src/hooks/login/useGetModalLoginMethods.ts"],
  "sourcesContent": ["import { useState } from 'react';\nimport { SECOND_LOGIN_ATTEMPT_ERROR } from 'constants/index';\nimport { getIsNativeAuthSingingForbidden } from 'services/nativeAuth/helpers';\nimport { useDappModal } from 'UI/DappModal';\nimport { useGetIsLoggedIn } from '../account';\n\nexport interface UseGetModalLoginMethodsPropsType {\n  hideButtonWhenModalOpens?: boolean;\n  onContentHide?: (props?: any) => void;\n  onContentShow?: (props?: any) => void;\n  onModalCloses?: (props?: any) => void;\n  onModalOpens?: (props?: any) => void;\n  token: string | undefined;\n  wrapContentInsideModal: boolean;\n}\n\nexport const useGetModalLoginMethods = ({\n  hideButtonWhenModalOpens,\n  onContentHide,\n  onContentShow,\n  onModalCloses,\n  onModalOpens,\n  token,\n  wrapContentInsideModal\n}: UseGetModalLoginMethodsPropsType) => {\n  const isLoggedIn = useGetIsLoggedIn();\n  const [showContent, setShowContent] = useState(false);\n  const { handleShowModal, handleHideModal, showModal } = useDappModal();\n  const disabledConnectButton = getIsNativeAuthSingingForbidden(token);\n  const shouldRenderButton = !hideButtonWhenModalOpens || !showContent;\n\n  const handleCloseModal = () => {\n    setShowContent(false);\n    onContentHide?.();\n\n    if (wrapContentInsideModal) {\n      handleHideModal();\n      onModalCloses?.();\n    } else if (onModalCloses) {\n      console.warn(\n        'Deprecated: \"onModalCloses\" must be used only when \"wrapContentInsideModal\" is set to \"true\". Use \"onContentHide\" instead.'\n      );\n\n      onModalCloses();\n    }\n  };\n\n  const handleOpenModal = () => {\n    if (isLoggedIn) {\n      throw new Error(SECOND_LOGIN_ATTEMPT_ERROR);\n    }\n\n    // Hide the content if already open\n    if (showContent) {\n      return handleCloseModal();\n    }\n\n    setShowContent(true);\n    onContentShow?.();\n\n    if (wrapContentInsideModal) {\n      handleShowModal();\n      onModalOpens?.();\n    } else if (onModalOpens) {\n      console.warn(\n        'Deprecated: \"onModalOpens\" must be used only when \"wrapContentInsideModal\" is set to \"true\". Use \"onContentShow\" instead.'\n      );\n\n      onModalOpens();\n    }\n  };\n\n  return {\n    disabledConnectButton,\n    handleCloseModal,\n    handleOpenModal,\n    shouldRenderButton,\n    showContent,\n    showModal\n  };\n};\n"],
  "mappings": "gPAAA,IACA,IADA,iCAgBO,GAAM,GAA0B,CAAC,CACtC,2BACA,gBACA,gBACA,gBACA,eACA,QACA,4BACsC,CACtC,GAAM,GAAa,EAAiB,EAC9B,CAAC,EAAa,GAAkB,EAAS,EAAK,EAC9C,CAAE,kBAAiB,kBAAiB,aAAc,EAAa,EAC/D,EAAwB,EAAgC,CAAK,EAC7D,EAAqB,CAAC,GAA4B,CAAC,EAEnD,EAAmB,IAAM,CAC7B,EAAe,EAAK,EACpB,aAEA,AAAI,EACF,GAAgB,EAChB,cACS,GACT,SAAQ,KACN,4HACF,EAEA,EAAc,EAElB,EA2BA,MAAO,CACL,wBACA,mBACA,gBA5BsB,IAAM,CAC5B,GAAI,EACF,KAAM,IAAI,OAAM,CAA0B,EAI5C,GAAI,EACF,MAAO,GAAiB,EAG1B,EAAe,EAAI,EACnB,aAEA,AAAI,EACF,GAAgB,EAChB,cACS,GACT,SAAQ,KACN,2HACF,EAEA,EAAa,EAEjB,EAME,qBACA,cACA,WACF,CACF",
  "names": []
}
