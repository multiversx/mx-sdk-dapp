{
  "version": 3,
  "sources": ["../../src/utils/transactions/transactionStateByStatus.ts"],
  "sourcesContent": ["import {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums.types';\n\nexport const pendingBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.sent\n];\n\nexport const successBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.success\n];\n\nexport const failBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.fail,\n  TransactionBatchStatusesEnum.cancelled,\n  TransactionBatchStatusesEnum.timedOut\n];\n\nexport const invalidBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.invalid\n];\n\nexport const timedOutBatchTransactionsStates = [\n  TransactionBatchStatusesEnum.timedOut\n];\n\nexport const pendingServerTransactionsStatuses = [\n  TransactionServerStatusesEnum.pending\n];\n\nexport const successServerTransactionsStates = [\n  TransactionServerStatusesEnum.success\n];\n\nexport const failServerTransactionsStates = [\n  TransactionServerStatusesEnum.fail,\n  TransactionServerStatusesEnum.invalid\n];\n\nexport const notExecutedServerTransactionsStates = [\n  TransactionServerStatusesEnum.notExecuted\n];\n\nexport function getIsTransactionPending(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    (isBatchTransactionPending(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionPending(status as TransactionServerStatusesEnum))\n  );\n}\n\nexport function getIsTransactionSuccessful(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    (isBatchTransactionSuccessful(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionSuccessful(status as TransactionServerStatusesEnum))\n  );\n}\n\nexport function getIsTransactionFailed(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    (isBatchTransactionFailed(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionFailed(status as TransactionServerStatusesEnum))\n  );\n}\n\nexport function getIsTransactionNotExecuted(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    (isBatchTransactionInvalid(status as TransactionBatchStatusesEnum) ||\n      isServerTransactionNotExecuted(status as TransactionServerStatusesEnum))\n  );\n}\n\nexport function getIsTransactionTimedOut(\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum\n) {\n  return (\n    status != null &&\n    isBatchTransactionTimedOut(status as TransactionBatchStatusesEnum)\n  );\n}\n\nexport function isBatchTransactionPending(\n  status?: TransactionBatchStatusesEnum\n) {\n  return status != null && pendingBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionSuccessful(\n  status: TransactionBatchStatusesEnum\n) {\n  return status != null && successBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionFailed(status: TransactionBatchStatusesEnum) {\n  return status != null && failBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionInvalid(\n  status: TransactionBatchStatusesEnum\n) {\n  return status != null && invalidBatchTransactionsStates.includes(status);\n}\n\nexport function isBatchTransactionTimedOut(\n  status?: TransactionBatchStatusesEnum\n) {\n  return status != null && timedOutBatchTransactionsStates.includes(status);\n}\n\nexport function isServerTransactionPending(\n  status?: TransactionServerStatusesEnum\n) {\n  return status != null && pendingServerTransactionsStatuses.includes(status);\n}\nexport function isServerTransactionSuccessful(\n  status: TransactionServerStatusesEnum\n) {\n  return status != null && successServerTransactionsStates.includes(status);\n}\n\nexport function isServerTransactionFailed(\n  status: TransactionServerStatusesEnum\n) {\n  return status != null && failServerTransactionsStates.includes(status);\n}\n\nexport function isServerTransactionNotExecuted(\n  status: TransactionServerStatusesEnum\n) {\n  return status != null && notExecutedServerTransactionsStates.includes(status);\n}\n"],
  "mappings": "uFA4CO,WACL,EACA,CACA,MACE,IAAU,MACT,GAA0B,CAAsC,GAC/D,EAA2B,CAAuC,EAExE,CAEO,WACL,EACA,CACA,MACE,IAAU,MACT,GAA6B,CAAsC,GAClE,EAA8B,CAAuC,EAE3E,CAEO,WACL,EACA,CACA,MACE,IAAU,MACT,GAAyB,CAAsC,GAC9D,EAA0B,CAAuC,EAEvE,CAEO,WACL,EACA,CACA,MACE,IAAU,MACT,GAA0B,CAAsC,GAC/D,EAA+B,CAAuC,EAE5E,CAEO,WACL,EACA,CACA,MACE,IAAU,MACV,EAA2B,CAAsC,CAErE,CAEO,WACL,EACA,CACA,MAAO,IAAU,MAAQ,EAA+B,SAAS,CAAM,CACzE,CAEO,WACL,EACA,CACA,MAAO,IAAU,MAAQ,EAA+B,SAAS,CAAM,CACzE,CAEO,WAAkC,EAAsC,CAC7E,MAAO,IAAU,MAAQ,EAA4B,SAAS,CAAM,CACtE,CAEO,WACL,EACA,CACA,MAAO,IAAU,MAAQ,EAA+B,SAAS,CAAM,CACzE,CAEO,WACL,EACA,CACA,MAAO,IAAU,MAAQ,EAAgC,SAAS,CAAM,CAC1E,CAEO,WACL,EACA,CACA,MAAO,IAAU,MAAQ,EAAkC,SAAS,CAAM,CAC5E,CACO,WACL,EACA,CACA,MAAO,IAAU,MAAQ,EAAgC,SAAS,CAAM,CAC1E,CAEO,WACL,EACA,CACA,MAAO,IAAU,MAAQ,EAA6B,SAAS,CAAM,CACvE,CAEO,WACL,EACA,CACA,MAAO,IAAU,MAAQ,EAAoC,SAAS,CAAM,CAC9E,CA9IA,GAKa,GAIA,EAIA,EAMA,EAIA,EAIA,EAIA,EAIA,EAKA,EAxCb,iBAKO,AAAM,EAAiC,CAC5C,MACF,EAEa,EAAiC,CAC5C,SACF,EAEa,EAA8B,CACzC,OACA,YACA,UACF,EAEa,EAAiC,CAC5C,SACF,EAEa,EAAkC,CAC7C,UACF,EAEa,EAAoC,CAC/C,SACF,EAEa,EAAkC,CAC7C,SACF,EAEa,EAA+B,CAC1C,OACA,SACF,EAEa,EAAsC,CACjD,cACF",
  "names": []
}
