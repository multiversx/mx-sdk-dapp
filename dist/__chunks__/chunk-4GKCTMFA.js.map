{
  "version": 3,
  "sources": ["../../src/reduxStore/slices/networkConfigSlice.ts"],
  "sourcesContent": ["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport omit from 'lodash.omit';\nimport { REHYDRATE } from 'redux-persist';\nimport { AVERAGE_TX_DURATION_MS } from 'constants/transactionStatus';\nimport { logoutAction } from 'reduxStore/commonActions';\nimport {\n  AccountInfoSliceNetworkType,\n  BaseNetworkType,\n  NetworkType\n} from 'types';\nimport { getRandomAddressFromNetwork } from 'utils/internal';\n\nexport interface NetworkConfigStateType {\n  network: AccountInfoSliceNetworkType;\n}\n\nexport const defaultNetwork: AccountInfoSliceNetworkType = {\n  id: 'not-configured',\n  chainId: '',\n  name: 'NOT CONFIGURED',\n  egldLabel: '',\n  decimals: '18',\n  digits: '4',\n  gasPerDataByte: '1500',\n  walletConnectDeepLink: '',\n  walletConnectBridgeAddress: '',\n  walletConnectV2RelayAddress: '',\n  walletConnectV2ProjectId: '',\n  walletConnectV2Options: {},\n  walletAddress: '',\n  apiAddress: '',\n  explorerAddress: '',\n  apiTimeout: '4000',\n  roundDuration: AVERAGE_TX_DURATION_MS\n};\n\nconst initialState: NetworkConfigStateType = {\n  network: defaultNetwork\n};\n\nexport const networkConfigSlice = createSlice({\n  name: 'appConfig',\n  initialState,\n  reducers: {\n    initializeNetworkConfig: (\n      state: NetworkConfigStateType,\n      action: PayloadAction<NetworkType>\n    ) => {\n      const walletConnectV2RelayAddress = getRandomAddressFromNetwork(\n        action.payload.walletConnectV2RelayAddresses\n      );\n\n      const network: BaseNetworkType = omit(\n        action.payload,\n        'walletConnectV2RelayAddresses'\n      );\n\n      state.network = {\n        ...state.network,\n        ...network,\n        walletConnectV2RelayAddress\n      };\n    },\n    updateNetworkConfig: (\n      state: NetworkConfigStateType,\n      action: PayloadAction<Partial<AccountInfoSliceNetworkType>>\n    ) => {\n      state.network = {\n        ...state.network,\n        ...action.payload\n      };\n    },\n    setCustomWalletAddress: (\n      state: NetworkConfigStateType,\n      action: PayloadAction<AccountInfoSliceNetworkType['customWalletAddress']>\n    ) => {\n      state.network.customWalletAddress = action.payload;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, (state: NetworkConfigStateType) => {\n      state.network.customWalletAddress = undefined;\n    }),\n      builder.addCase(REHYDRATE, (state, action: any) => {\n        if (!action.payload?.network?.customWalletAddress) {\n          return;\n        }\n\n        const {\n          network: { customWalletAddress }\n        } = action.payload;\n        state.network.customWalletAddress = customWalletAddress;\n      });\n  }\n});\n\nexport const {\n  initializeNetworkConfig,\n  updateNetworkConfig,\n  setCustomWalletAddress\n} = networkConfigSlice.actions;\n\nexport default networkConfigSlice.reducer;\n"],
  "mappings": "2OAAA,+CACA,2BACA,0CAFA,GAgBa,GAoBP,EAIO,EAyDX,EACA,EACA,EAGK,EAtGP,aAGA,IACA,IAMA,IAMO,AAAM,EAA8C,CACzD,GAAI,iBACJ,QAAS,GACT,KAAM,iBACN,UAAW,GACX,SAAU,KACV,OAAQ,IACR,eAAgB,OAChB,sBAAuB,GACvB,2BAA4B,GAC5B,4BAA6B,GAC7B,yBAA0B,GAC1B,uBAAwB,CAAC,EACzB,cAAe,GACf,WAAY,GACZ,gBAAiB,GACjB,WAAY,OACZ,cAAe,GACjB,EAEM,EAAuC,CAC3C,QAAS,CACX,EAEa,EAAqB,EAAY,CAC5C,KAAM,YACN,eACA,SAAU,CACR,wBAAyB,CACvB,EACA,IACG,CACH,GAAM,GAA8B,EAClC,EAAO,QAAQ,6BACjB,EAEM,EAA2B,EAC/B,EAAO,QACP,+BACF,EAEA,EAAM,QAAU,SACX,EAAM,SACN,GAFW,CAGd,6BACF,EACF,EACA,oBAAqB,CACnB,EACA,IACG,CACH,EAAM,QAAU,OACX,EAAM,SACN,EAAO,QAEd,EACA,uBAAwB,CACtB,EACA,IACG,CACH,EAAM,QAAQ,oBAAsB,EAAO,OAC7C,CACF,EACA,cAAe,AAAC,GAAY,CAC1B,EAAQ,QAAQ,EAAc,AAAC,GAAkC,CAC/D,EAAM,QAAQ,oBAAsB,MACtC,CAAC,EACC,EAAQ,QAAQ,EAAW,CAAC,EAAO,IAAgB,CAnFzD,QAoFQ,GAAI,CAAC,SAAO,UAAP,cAAgB,UAAhB,QAAyB,qBAC5B,OAGF,GAAM,CACJ,QAAS,CAAE,wBACT,EAAO,QACX,EAAM,QAAQ,oBAAsB,CACtC,CAAC,CACL,CACF,CAAC,EAEY,CAhGb,AAiGE,0BAjGF,AAkGE,sBAlGF,AAmGE,0BACE,EAAmB,QAEhB,EAAQ,EAAmB",
  "names": []
}
