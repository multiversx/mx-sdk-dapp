{
  "version": 3,
  "sources": ["../../src/utils/operations/calculateFeeLimit.ts"],
  "sourcesContent": ["import {\n  Transaction,\n  TransactionPayload,\n  TransactionVersion,\n  Address,\n  TokenPayment\n} from '@multiversx/sdk-core';\nimport BigNumber from 'bignumber.js';\nimport {\n  EXTRA_GAS_LIMIT_GUARDED_TX,\n  GAS_LIMIT,\n  GAS_PRICE,\n  ZERO\n} from 'constants/index';\nimport { isGuardianTx } from 'utils/transactions/isGuardianTx';\nimport { stringIsFloat, stringIsInteger } from 'utils/validation';\n\nexport interface CalculateFeeLimitType {\n  gasLimit: string;\n  gasPrice: string;\n  data: string;\n  gasPerDataByte: string;\n  gasPriceModifier: string;\n  chainId: string;\n  minGasLimit?: string;\n  defaultGasPrice?: string;\n}\nconst placeholderData = {\n  from: 'erd12dnfhej64s6c56ka369gkyj3hwv5ms0y5rxgsk2k7hkd2vuk7rvqxkalsa',\n  to: 'erd12dnfhej64s6c56ka369gkyj3hwv5ms0y5rxgsk2k7hkd2vuk7rvqxkalsa'\n};\nexport function calculateFeeLimit({\n  minGasLimit = String(GAS_LIMIT),\n  gasLimit,\n  gasPrice,\n  data: inputData,\n  gasPerDataByte,\n  gasPriceModifier,\n  defaultGasPrice = String(GAS_PRICE),\n  chainId\n}: CalculateFeeLimitType) {\n  const data = inputData || '';\n  const validGasLimit = stringIsInteger(gasLimit) ? gasLimit : minGasLimit;\n\n  // We need to add extra gas fee for guardian transactions\n  const extraGasLimit = isGuardianTx({ data }) ? EXTRA_GAS_LIMIT_GUARDED_TX : 0;\n  const usedGasLimit = new BigNumber(validGasLimit)\n    .plus(extraGasLimit)\n    .toNumber();\n\n  const validGasPrice = stringIsFloat(gasPrice) ? gasPrice : defaultGasPrice;\n  const transaction = new Transaction({\n    nonce: 0,\n    value: TokenPayment.egldFromAmount('0'),\n    receiver: new Address(placeholderData.to),\n    sender: new Address(placeholderData.to),\n    gasPrice: parseInt(validGasPrice),\n    gasLimit: usedGasLimit,\n    data: new TransactionPayload(data.trim()),\n    chainID: chainId,\n    version: new TransactionVersion(1)\n  });\n\n  try {\n    const bNfee = transaction.computeFee({\n      GasPerDataByte: parseInt(gasPerDataByte),\n      MinGasLimit: parseInt(minGasLimit),\n      GasPriceModifier: parseFloat(gasPriceModifier),\n      ChainID: chainId\n    });\n    return bNfee.toString(10);\n  } catch (err) {\n    console.error(err);\n    return ZERO;\n  }\n}\n"],
  "mappings": "qRAAA,kIAOA,4BAwBO,WAA2B,CAChC,cAAc,OAAO,CAAS,EAC9B,WACA,WACA,KAAM,EACN,iBACA,mBACA,kBAAkB,OAAO,CAAS,EAClC,WACwB,CACxB,GAAM,GAAO,GAAa,GACpB,EAAgB,EAAgB,CAAQ,EAAI,EAAW,EAGvD,EAAgB,EAAa,CAAE,MAAK,CAAC,EAAI,EAA6B,EACtE,EAAe,GAAI,GAAU,CAAa,EAC7C,KAAK,CAAa,EAClB,SAAS,EAEN,EAAgB,EAAc,CAAQ,EAAI,EAAW,EACrD,EAAc,GAAI,GAAY,CAClC,MAAO,EACP,MAAO,EAAa,eAAe,GAAG,EACtC,SAAU,GAAI,GAAQ,EAAgB,EAAE,EACxC,OAAQ,GAAI,GAAQ,EAAgB,EAAE,EACtC,SAAU,SAAS,CAAa,EAChC,SAAU,EACV,KAAM,GAAI,GAAmB,EAAK,KAAK,CAAC,EACxC,QAAS,EACT,QAAS,GAAI,GAAmB,CAAC,CACnC,CAAC,EAED,GAAI,CAOF,MAAO,AANO,GAAY,WAAW,CACnC,eAAgB,SAAS,CAAc,EACvC,YAAa,SAAS,CAAW,EACjC,iBAAkB,WAAW,CAAgB,EAC7C,QAAS,CACX,CAAC,EACY,SAAS,EAAE,CAC1B,OAAS,EAAP,CACA,eAAQ,MAAM,CAAG,EACV,CACT,CACF,CA3EA,GA2BM,GA3BN,aAQA,IAMA,IACA,IAYA,AAAM,EAAkB,CACtB,KAAM,iEACN,GAAI,gEACN",
  "names": []
}
