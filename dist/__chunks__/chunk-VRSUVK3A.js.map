{
  "version": 3,
  "sources": ["../../src/UI/TransactionInfo/components/ScResultsList/ScResultsList.tsx"],
  "sourcesContent": ["import React, { useEffect, useState, useRef } from 'react';\nimport { faExchange } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { N_A } from 'constants/index';\nimport { withStyles, WithStylesImportType } from 'hocs/withStyles';\nimport { ResultType } from 'types/serverTransactions.types';\nimport { FormatAmount } from 'UI/FormatAmount';\nimport { explorerUrlBuilder } from 'utils/transactions/getInterpretedTransaction/helpers/index';\nimport { getInitialScResultsDecodeMethod } from 'utils/transactions/transactionInfoHelpers/getScResultsInitialDecodeMethod';\nimport {\n  getScResultsDecodedData,\n  getScResultsHighlight\n} from 'utils/transactions/transactionInfoHelpers/index';\nimport ResultData from './components/ResultData/ResultData';\nimport ResultHash from './components/ResultHash/ResultHash';\nimport ResultReceiver from './components/ResultReceiver/ResultReceiver';\nimport ResultSender from './components/ResultSender/ResultSender';\nimport ResultWrapper from './components/ResultWrapper/ResultWrapper';\n\nexport interface ScResultsListPropsType {\n  results: ResultType[];\n}\n\nconst ScResultsListComponent = ({\n  results,\n  styles\n}: ScResultsListPropsType & WithStylesImportType) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const initialDecodeMethod = getInitialScResultsDecodeMethod();\n\n  const [decodeMethod, setDecodeMethod] = useState(initialDecodeMethod);\n\n  useEffect(() => {\n    if (ref.current && ref.current !== null) {\n      window?.scrollTo({\n        top: ref.current.getBoundingClientRect().top - 70,\n        behavior: 'smooth'\n      });\n    }\n  }, []);\n\n  return (\n    <div className={styles?.results}>\n      {results.map((result: ResultType) => {\n        const highlightTx = getScResultsHighlight(result.hash);\n\n        return (\n          <div\n            key={result.hash}\n            id={result.hash}\n            className={styles?.result}\n            {...(highlightTx ? { ref } : {})}\n          >\n            <div className={styles?.icon}>\n              <FontAwesomeIcon icon={faExchange} />\n            </div>\n\n            <div className={styles?.content}>\n              {result.hash && (\n                <ResultHash\n                  hash={result.hash}\n                  page={explorerUrlBuilder.transactionDetails(\n                    `${result.originalTxHash}#${result.hash}/${decodeMethod}`\n                  )}\n                />\n              )}\n\n              {result.sender && (\n                <ResultSender\n                  sender={result.sender}\n                  assets={result.senderAssets}\n                />\n              )}\n\n              {result.receiver && (\n                <ResultReceiver\n                  receiver={result.receiver}\n                  assets={result.receiverAssets}\n                />\n              )}\n\n              {result.value != null && (\n                <ResultWrapper label='Value'>\n                  <FormatAmount value={result.value} showLastNonZeroDecimal />\n                </ResultWrapper>\n              )}\n\n              {result.data && (\n                <ResultData\n                  value={\n                    result.data ? getScResultsDecodedData(result.data) : N_A\n                  }\n                  {...(highlightTx\n                    ? { initialDecodeMethod, setDecodeMethod }\n                    : {})}\n                />\n              )}\n\n              {result.returnMessage && (\n                <ResultWrapper label='Response'>\n                  {result.returnMessage}\n                </ResultWrapper>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport const ScResultsList = withStyles(ScResultsListComponent, {\n  ssrStyles: () =>\n    import('UI/TransactionInfo/components/ScResultsList/styles.scss'),\n  clientStyles: () =>\n    require('UI/TransactionInfo/components/ScResultsList/styles.scss').default\n});\n"],
  "mappings": "kpBAAA,IAGA,IAHA,+DACA,+DACA,iEAKA,IAEA,IAcA,GAAM,GAAyB,CAAC,CAC9B,UACA,YACmD,CACnD,GAAM,GAAM,EAAuB,IAAI,EACjC,EAAsB,EAAgC,EAEtD,CAAC,EAAc,GAAmB,EAAS,CAAmB,EAEpE,SAAU,IAAM,CACd,AAAI,EAAI,SAAW,EAAI,UAAY,MACjC,sBAAQ,SAAS,CACf,IAAK,EAAI,QAAQ,sBAAsB,EAAE,IAAM,GAC/C,SAAU,QACZ,GAEJ,EAAG,CAAC,CAAC,EAGH,gBAAC,OAAI,UAAW,iBAAQ,SACrB,EAAQ,IAAI,AAAC,GAAuB,CACnC,GAAM,GAAc,EAAsB,EAAO,IAAI,EAErD,MACE,iBAAC,SACC,IAAK,EAAO,KACZ,GAAI,EAAO,KACX,UAAW,iBAAQ,QACd,EAAc,CAAE,KAAI,EAAI,CAAC,GAE9B,gBAAC,OAAI,UAAW,iBAAQ,MACtB,gBAAC,GAAgB,KAAM,EAAY,CACrC,EAEA,gBAAC,OAAI,UAAW,iBAAQ,SACrB,EAAO,MACN,gBAAC,GACC,KAAM,EAAO,KACb,KAAM,EAAmB,mBACvB,GAAG,EAAO,kBAAkB,EAAO,QAAQ,GAC7C,EACF,EAGD,EAAO,QACN,gBAAC,GACC,OAAQ,EAAO,OACf,OAAQ,EAAO,aACjB,EAGD,EAAO,UACN,gBAAC,GACC,SAAU,EAAO,SACjB,OAAQ,EAAO,eACjB,EAGD,EAAO,OAAS,MACf,gBAAC,GAAc,MAAM,SACnB,gBAAC,GAAa,MAAO,EAAO,MAAO,uBAAsB,GAAC,CAC5D,EAGD,EAAO,MACN,gBAAC,KACC,MACE,EAAO,KAAO,EAAwB,EAAO,IAAI,EAAI,GAElD,EACD,CAAE,sBAAqB,iBAAgB,EACvC,CAAC,EACP,EAGD,EAAO,eACN,gBAAC,GAAc,MAAM,YAClB,EAAO,aACV,CAEJ,CACF,CAEJ,CAAC,CACH,CAEJ,EAEa,EAAgB,EAAW,EAAwB,CAC9D,UAAW,IACT,OAAO,4DACT,aAAc,IACZ,WAAmE,OACvE,CAAC",
  "names": []
}
