{
  "version": 3,
  "sources": ["../../src/hooks/login/useLoginService.ts"],
  "sourcesContent": ["import { useRef } from 'react';\nimport { Address, Message } from '@multiversx/sdk-core';\nimport { useGetAccount } from 'hooks/account';\nimport { useDispatch, useSelector } from 'reduxStore/DappProviderContext';\nimport { networkSelector, tokenLoginSelector } from 'reduxStore/selectors';\nimport { setTokenLogin } from 'reduxStore/slices';\nimport { nativeAuth } from 'services/nativeAuth';\nimport { getNativeAuthConfig } from 'services/nativeAuth/methods';\nimport { NativeAuthConfigType, OnProviderLoginType } from 'types';\n\nconst getApiAddress = (\n  apiAddress: string,\n  config?: OnProviderLoginType['nativeAuth']\n) => {\n  if (!config) {\n    return null;\n  }\n  if (config === true) {\n    return apiAddress;\n  }\n  return config.apiAddress ?? apiAddress;\n};\n\nexport const useLoginService = (config?: OnProviderLoginType['nativeAuth']) => {\n  const network = useSelector(networkSelector);\n  const tokenLogin = useSelector(tokenLoginSelector);\n  const tokenRef = useRef(tokenLogin?.loginToken);\n\n  const apiAddress = getApiAddress(network.apiAddress, config);\n\n  const configuration = getNativeAuthConfig({\n    ...(config === true ? {} : config),\n    ...(apiAddress ? { apiAddress } : {})\n  });\n\n  const hasNativeAuth = Boolean(config);\n\n  const client = nativeAuth(configuration);\n  const { address } = useGetAccount();\n  const dispatch = useDispatch();\n\n  const setLoginToken = (loginToken: string) => {\n    tokenRef.current = loginToken;\n    dispatch(\n      setTokenLogin({\n        ...tokenLogin,\n        loginToken,\n        ...(apiAddress ? { nativeAuthConfig: configuration } : {})\n      })\n    );\n  };\n\n  const getNativeAuthLoginToken = () => {\n    try {\n      return client.initialize();\n    } catch (error) {\n      console.error('Unable to get block. Login failed.', error);\n      return;\n    }\n  };\n\n  const setTokenLoginInfo = ({\n    address,\n    signature\n  }: {\n    address: string;\n    signature: string;\n  }) => {\n    const loginToken = tokenRef.current;\n\n    if (!loginToken) {\n      throw 'Token not found. Call `setLoginToken` first.';\n    }\n\n    if (!hasNativeAuth) {\n      dispatch(\n        setTokenLogin({\n          loginToken,\n          signature\n        })\n      );\n      return;\n    }\n\n    const nativeAuthToken = client.getToken({\n      address,\n      token: loginToken,\n      signature\n    });\n\n    dispatch(\n      setTokenLogin({\n        loginToken,\n        signature,\n        nativeAuthToken,\n        ...(apiAddress ? { nativeAuthConfig: configuration } : {})\n      })\n    );\n\n    return nativeAuthToken;\n  };\n\n  // TODO: @StanislavSava verify and maybe refactor to separate function\n  const refreshNativeAuthTokenLogin = async ({\n    signMessageCallback,\n    nativeAuthClientConfig\n  }: {\n    signMessageCallback: (\n      messageToSign: Message,\n      options: Record<any, any>\n    ) => Promise<Message>;\n    nativeAuthClientConfig?: NativeAuthConfigType;\n  }) => {\n    const nativeAuthClient = nativeAuth(\n      nativeAuthClientConfig || configuration\n    );\n\n    const loginToken = await nativeAuthClient.initialize({\n      noCache: Boolean(nativeAuthClientConfig)\n    });\n\n    tokenRef.current = loginToken;\n\n    if (!loginToken) {\n      return;\n    }\n\n    const messageToSign = new Message({\n      address: new Address(address),\n      data: Buffer.from(`${address}${loginToken}`)\n    });\n\n    const signedMessage = await signMessageCallback(messageToSign, {});\n\n    if (!signedMessage?.signature) {\n      throw 'Message not signed';\n    }\n\n    const nativeAuthToken = setTokenLoginInfo({\n      address,\n      signature: Buffer.from(signedMessage.signature).toString('hex')\n    });\n\n    return nativeAuthToken;\n  };\n\n  return {\n    configuration,\n    setLoginToken,\n    getNativeAuthLoginToken,\n    setTokenLoginInfo,\n    refreshNativeAuthTokenLogin\n  };\n};\n"],
  "mappings": "mbAAA,mCACA,4DAGA,IACA,IAKA,GAAM,GAAgB,CACpB,EACA,IACG,CAbL,MAcE,MAAK,GAGD,IAAW,GACN,EAEF,KAAO,aAAP,OAAqB,EALnB,IAMX,EAEa,EAAkB,AAAC,GAA+C,CAC7E,GAAM,GAAU,EAAY,CAAe,EACrC,EAAa,EAAY,CAAkB,EAC3C,EAAW,EAAO,iBAAY,UAAU,EAExC,EAAa,EAAc,EAAQ,WAAY,CAAM,EAErD,EAAgB,EAAoB,OACpC,IAAW,GAAO,CAAC,EAAI,GACvB,EAAa,CAAE,YAAW,EAAI,CAAC,EACpC,EAEK,EAAgB,QAAQ,CAAM,EAE9B,EAAS,EAAW,CAAa,EACjC,CAAE,WAAY,EAAc,EAC5B,EAAW,EAAY,EAEvB,EAAgB,AAAC,GAAuB,CAC5C,EAAS,QAAU,EACnB,EACE,EAAc,SACT,GADS,CAEZ,eACI,EAAa,CAAE,iBAAkB,CAAc,EAAI,CAAC,EACzD,CACH,CACF,EAEM,EAA0B,IAAM,CACpC,GAAI,CACF,MAAO,GAAO,WAAW,CAC3B,OAAS,EAAP,CACA,QAAQ,MAAM,qCAAsC,CAAK,EACzD,MACF,CACF,EAEM,EAAoB,CAAC,CACzB,UACA,eAII,CACJ,GAAM,GAAa,EAAS,QAE5B,GAAI,CAAC,EACH,KAAM,+CAGR,GAAI,CAAC,EAAe,CAClB,EACE,EAAc,CACZ,aACA,WACF,CAAC,CACH,EACA,MACF,CAEA,GAAM,GAAkB,EAAO,SAAS,CACtC,UACA,MAAO,EACP,WACF,CAAC,EAED,SACE,EAAc,GACZ,aACA,YACA,mBACI,EAAa,CAAE,iBAAkB,CAAc,EAAI,CAAC,EACzD,CACH,EAEO,CACT,EA8CA,MAAO,CACL,gBACA,gBACA,0BACA,oBACA,4BAhDkC,AAAO,GASrC,UATqC,GASrC,UATqC,CACzC,sBACA,0BAOI,CAKJ,GAAM,GAAa,KAAM,AAJA,GACvB,GAA0B,CAC5B,EAE0C,WAAW,CACnD,QAAS,QAAQ,CAAsB,CACzC,CAAC,EAID,GAFA,EAAS,QAAU,EAEf,CAAC,EACH,OAGF,GAAM,GAAgB,GAAI,GAAQ,CAChC,QAAS,GAAI,GAAQ,CAAO,EAC5B,KAAM,SAAO,KAAK,GAAG,IAAU,GAAY,CAC7C,CAAC,EAEK,EAAgB,KAAM,GAAoB,EAAe,CAAC,CAAC,EAEjE,GAAI,CAAC,YAAe,WAClB,KAAM,qBAQR,MALwB,GAAkB,CACxC,UACA,UAAW,SAAO,KAAK,EAAc,SAAS,EAAE,SAAS,KAAK,CAChE,CAAC,CAGH,EAQA,CACF",
  "names": []
}
