{
  "version": 3,
  "sources": ["../../src/hooks/transactions/useGetTokenDetails.tsx"],
  "sourcesContent": ["import useSwr from 'swr';\n\nimport { NFTS_ENDPOINT, TOKENS_ENDPOINT } from 'apiCalls/endpoints';\nimport { getPersistedToken } from 'apiCalls/tokens/getPersistedToken';\nimport { useGetNetworkConfig } from 'hooks/useGetNetworkConfig';\nimport { NftEnumType } from 'types/tokens.types';\nimport { getIdentifierType } from 'utils/validation/getIdentifierType';\n\nexport interface TokenAssets {\n  description: string;\n  status: string;\n  svgUrl: string;\n  website?: string;\n  pngUrl?: string;\n  social?: any;\n  extraTokens?: string[];\n  lockedAccounts?: { [key: string]: string };\n}\n\nexport interface TokenMediaType {\n  url?: string;\n  originalUrl?: string;\n  thumbnailUrl?: string;\n  fileType?: string;\n  fileSize?: number;\n}\n\nexport interface TokenOptionType {\n  tokenLabel: string;\n  tokenDecimals: number;\n  tokenAvatar: string;\n  assets?: TokenAssets;\n  type?: NftEnumType;\n  error?: string;\n  esdtPrice?: number;\n  ticker?: string;\n  identifier?: string;\n  name?: string;\n  isLoading?: boolean;\n}\n\ninterface TokenInfoResponse {\n  identifier: string;\n  name: string;\n  ticker: string;\n  decimals: number;\n  type?: NftEnumType;\n  assets: TokenAssets;\n  media?: TokenMediaType[];\n  price: number;\n}\n\nexport function useGetTokenDetails({\n  tokenId\n}: {\n  tokenId: string;\n}): TokenOptionType {\n  const { network } = useGetNetworkConfig();\n  const { isNft } = getIdentifierType(tokenId);\n\n  const tokenIdentifier = tokenId;\n  const tokenEndpoint = isNft ? NFTS_ENDPOINT : TOKENS_ENDPOINT;\n\n  const {\n    data: selectedToken,\n    error,\n    isLoading\n  } = useSwr<TokenInfoResponse>(\n    Boolean(tokenIdentifier)\n      ? `${network.apiAddress}/${tokenEndpoint}/${tokenIdentifier}`\n      : null,\n    getPersistedToken\n  );\n\n  if (!tokenIdentifier) {\n    return {\n      tokenDecimals: Number(network.decimals),\n      tokenLabel: '',\n      tokenAvatar: ''\n    };\n  }\n\n  const tokenDecimals = selectedToken\n    ? selectedToken?.decimals\n    : Number(network.decimals);\n  const tokenLabel = selectedToken ? selectedToken?.name : '';\n  const tokenAvatar = selectedToken\n    ? selectedToken?.assets?.svgUrl ?? selectedToken?.media?.[0]?.thumbnailUrl\n    : '';\n\n  return {\n    isLoading,\n    tokenDecimals: tokenDecimals,\n    tokenLabel,\n    type: selectedToken?.type,\n    tokenAvatar,\n    identifier: selectedToken?.identifier,\n    assets: selectedToken?.assets,\n    esdtPrice: selectedToken?.price,\n    ticker: selectedToken?.ticker,\n    name: selectedToken?.name,\n    error\n  };\n}\n"],
  "mappings": "wNAAA,IAEA,IAFA,mBAMA,IA8CO,WAA4B,CACjC,WAGkB,CAxDpB,YAyDE,GAAM,CAAE,WAAY,EAAoB,EAClC,CAAE,SAAU,EAAkB,CAAO,EAErC,EAAkB,EAClB,EAAgB,EAAQ,EAAgB,EAExC,CACJ,KAAM,EACN,QACA,aACE,EACF,QAAQ,CAAe,EACnB,GAAG,EAAQ,cAAc,KAAiB,IAC1C,KACJ,CACF,EAEA,GAAI,CAAC,EACH,MAAO,CACL,cAAe,OAAO,EAAQ,QAAQ,EACtC,WAAY,GACZ,YAAa,EACf,EAGF,GAAM,GAAgB,EAClB,iBAAe,SACf,OAAO,EAAQ,QAAQ,EACrB,EAAa,EAAgB,iBAAe,KAAO,GACnD,EAAc,EAChB,uBAAe,SAAf,cAAuB,SAAvB,OAAiC,uBAAe,QAAf,cAAuB,KAAvB,cAA2B,aAC5D,GAEJ,MAAO,CACL,YACA,cAAe,EACf,aACA,KAAM,iBAAe,KACrB,cACA,WAAY,iBAAe,WAC3B,OAAQ,iBAAe,OACvB,UAAW,iBAAe,MAC1B,OAAQ,iBAAe,OACvB,KAAM,iBAAe,KACrB,OACF,CACF",
  "names": []
}
