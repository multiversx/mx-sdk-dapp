{
  "version": 3,
  "sources": ["../../src/UI/FormatAmount/FormatAmount.tsx"],
  "sourcesContent": ["import React from 'react';\nimport classNames from 'classnames';\nimport { DataTestIdsEnum, DECIMALS, DIGITS, ZERO } from 'constants/index';\nimport { withStyles, WithStylesImportType } from 'hocs/withStyles';\nimport { getEgldLabel } from 'utils/network/getEgldLabel';\nimport { formatAmount } from 'utils/operations/formatAmount';\nimport { stringIsInteger } from 'utils/validation/stringIsInteger';\nimport { FormatAmountPropsType } from './formatAmount.types';\n\nconst formatAmountInvalid = (\n  props: FormatAmountPropsType & WithStylesImportType\n) => {\n  const styles = props.styles ?? {};\n\n  return (\n    <span\n      data-testid={\n        props['data-testid'] || DataTestIdsEnum.formatAmountComponent\n      }\n      className={props.className}\n    >\n      <span\n        className={styles['int-amount']}\n        data-testid={DataTestIdsEnum.formatAmountInt}\n      >\n        ...\n      </span>\n    </span>\n  );\n};\n\nconst formatAmountValid = (\n  props: FormatAmountPropsType & WithStylesImportType,\n  erdLabel: string\n) => {\n  const { value, showLastNonZeroDecimal = false, showLabel = true } = props;\n  const digits = props.digits != null ? props.digits : DIGITS;\n  const decimals = props.decimals != null ? props.decimals : DECIMALS;\n  const styles = props.styles ?? {};\n  const globalStyles = props.globalStyles ?? {};\n\n  const formattedValue = formatAmount({\n    input: value,\n    decimals,\n    digits,\n    showLastNonZeroDecimal,\n    addCommas: true\n  });\n\n  const valueParts = formattedValue.split('.');\n  const hasNoDecimals = valueParts.length === 1;\n  const isNotZero = formattedValue !== ZERO;\n\n  // fill in zeros to match specific formatting\n  // example: if DIGITS are 2, `0.1` will be turned into `0.10`\n  // to take up the same amount of space in a right-aligned table cell\n  if (digits > 0 && hasNoDecimals && isNotZero) {\n    let zeros = '';\n\n    for (let i = 1; i <= digits; i++) {\n      zeros = zeros + ZERO;\n    }\n\n    valueParts.push(zeros);\n  }\n\n  return (\n    <span\n      data-testid={\n        props['data-testid'] || DataTestIdsEnum.formatAmountComponent\n      }\n      className={props.className}\n    >\n      <span\n        className={styles['int-amount']}\n        data-testid={DataTestIdsEnum.formatAmountInt}\n      >\n        {valueParts[0]}\n      </span>\n      {valueParts.length > 1 && (\n        <span\n          className={styles.decimals}\n          data-testid={DataTestIdsEnum.formatAmountDecimals}\n        >\n          .{valueParts[1]}\n        </span>\n      )}\n      {showLabel && (\n        <span\n          className={classNames(\n            styles.symbol,\n            props.token && globalStyles.textMuted\n          )}\n          data-testid={DataTestIdsEnum.formatAmountSymbol}\n        >\n          {` ${props.token ?? erdLabel}`}\n        </span>\n      )}\n    </span>\n  );\n};\n\nconst FormatAmountComponent = (\n  props: FormatAmountPropsType & WithStylesImportType\n) => {\n  const { value } = props;\n\n  return !stringIsInteger(value)\n    ? formatAmountInvalid(props)\n    : formatAmountValid(props, props.egldLabel || '');\n};\n\n/**\n * @param props.egldLabel  if not provided, will fallback on **EGLD**\n */\nconst FormatAmountWrapper = (\n  props: FormatAmountPropsType & WithStylesImportType\n) => {\n  const egldLabel = props.egldLabel || getEgldLabel();\n\n  const formatAmountProps = { ...props, egldLabel };\n\n  return <FormatAmountComponent {...formatAmountProps} />;\n};\n\nexport const FormatAmount = withStyles(FormatAmountWrapper, {\n  ssrStyles: () => import('UI/FormatAmount/formatAmountStyles.scss'),\n  clientStyles: () => require('UI/FormatAmount/formatAmountStyles.scss').default\n});\n"],
  "mappings": "uVAAA,IAEA,IAFA,qBACA,0BAIA,IACA,IAGA,GAAM,GAAsB,AAC1B,GACG,CAXL,MAYE,GAAM,GAAS,KAAM,SAAN,OAAgB,CAAC,EAEhC,MACE,iBAAC,QACC,cACE,EAAM,gBAAkB,wBAE1B,UAAW,EAAM,WAEjB,gBAAC,QACC,UAAW,EAAO,cAClB,cAAa,mBACd,KAED,CACF,CAEJ,EAEM,EAAoB,CACxB,EACA,IACG,CAlCL,UAmCE,GAAM,CAAE,QAAO,yBAAyB,GAAO,YAAY,IAAS,EAC9D,EAAS,EAAM,QAAU,KAAO,EAAM,OAAS,EAC/C,EAAW,EAAM,UAAY,KAAO,EAAM,SAAW,EACrD,EAAS,KAAM,SAAN,OAAgB,CAAC,EAC1B,EAAe,KAAM,eAAN,OAAsB,CAAC,EAEtC,EAAiB,EAAa,CAClC,MAAO,EACP,WACA,SACA,yBACA,UAAW,EACb,CAAC,EAEK,EAAa,EAAe,MAAM,GAAG,EACrC,EAAgB,EAAW,SAAW,EACtC,EAAY,IAAmB,EAKrC,GAAI,EAAS,GAAK,GAAiB,EAAW,CAC5C,GAAI,GAAQ,GAEZ,OAAS,GAAI,EAAG,GAAK,EAAQ,IAC3B,EAAQ,EAAQ,EAGlB,EAAW,KAAK,CAAK,CACvB,CAEA,MACE,iBAAC,QACC,cACE,EAAM,gBAAkB,wBAE1B,UAAW,EAAM,WAEjB,gBAAC,QACC,UAAW,EAAO,cAClB,cAAa,mBAEZ,EAAW,EACd,EACC,EAAW,OAAS,GACnB,gBAAC,QACC,UAAW,EAAO,SAClB,cAAa,wBACd,IACG,EAAW,EACf,EAED,GACC,gBAAC,QACC,UAAW,EACT,EAAO,OACP,EAAM,OAAS,EAAa,SAC9B,EACA,cAAa,sBAEZ,IAAI,KAAM,QAAN,OAAe,GACtB,CAEJ,CAEJ,EAEM,EAAwB,AAC5B,GACG,CACH,GAAM,CAAE,SAAU,EAElB,MAAO,AAAC,GAAgB,CAAK,EAEzB,EAAkB,EAAO,EAAM,WAAa,EAAE,EAD9C,EAAoB,CAAK,CAE/B,EAKM,EAAsB,AAC1B,GACG,CACH,GAAM,GAAY,EAAM,WAAa,EAAa,EAE5C,EAAoB,OAAK,GAAL,CAAY,WAAU,GAEhD,MAAO,iBAAC,OAA0B,EAAmB,CACvD,EAEa,EAAe,EAAW,EAAqB,CAC1D,UAAW,IAAM,OAAO,4CACxB,aAAc,IAAM,WAAmD,OACzE,CAAC",
  "names": []
}
