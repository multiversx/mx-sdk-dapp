{
  "version": 3,
  "sources": ["../../src/hooks/transactions/batch/tracker/useUpdateBatch.ts"],
  "sourcesContent": ["import { useCallback } from 'react';\nimport { useGetAccount } from 'hooks/account';\nimport { useDispatch } from 'reduxStore/DappProviderContext';\nimport { updateSignedTransactionStatus } from 'reduxStore/slices';\nimport { getTransactionsDetails } from 'services/transactions/getTransactionsDetails';\nimport {\n  ServerTransactionType,\n  SignedTransactionType,\n  TransactionServerStatusesEnum\n} from 'types';\nimport { refreshAccount } from 'utils/account/refreshAccount';\n\nexport function useUpdateBatch() {\n  const dispatch = useDispatch();\n  const { address } = useGetAccount();\n\n  const handleBatchSuccess = useCallback(\n    ({\n      sessionId,\n      dropUnprocessedTransactions,\n      serverTransactions,\n      batchTransactions\n    }: {\n      sessionId: string;\n      dropUnprocessedTransactions?: boolean;\n      serverTransactions: ServerTransactionType[];\n      batchTransactions: SignedTransactionType[];\n    }) => {\n      for (const transaction of batchTransactions) {\n        const apiTx = serverTransactions.find(\n          (tx) => tx.txHash === transaction.hash\n        );\n\n        if (!apiTx) {\n          if (dropUnprocessedTransactions) {\n            dispatch(\n              updateSignedTransactionStatus({\n                sessionId,\n                status: TransactionServerStatusesEnum.fail,\n                transactionHash: transaction.hash\n              })\n            );\n          }\n          continue;\n        }\n\n        dispatch(\n          updateSignedTransactionStatus({\n            sessionId,\n            status: apiTx.status as TransactionServerStatusesEnum,\n            transactionHash: transaction.hash,\n            serverTransaction: apiTx\n          })\n        );\n      }\n    },\n    [dispatch]\n  );\n\n  return useCallback(\n    async (props?: {\n      sessionId: string;\n      isBatchFailed?: boolean;\n      dropUnprocessedTransactions?: boolean;\n      shouldRefreshBalance?: boolean;\n      transactions?: SignedTransactionType[];\n    }) => {\n      if (!props) {\n        return;\n      }\n\n      const { transactions, isBatchFailed, sessionId } = props;\n\n      if (!transactions || transactions.length === 0) {\n        return;\n      }\n\n      if (isBatchFailed) {\n        for (const transaction of transactions) {\n          dispatch(\n            updateSignedTransactionStatus({\n              sessionId,\n              status: TransactionServerStatusesEnum.fail,\n              transactionHash: transaction.hash\n            })\n          );\n        }\n        return;\n      }\n\n      const { data, success } = await getTransactionsDetails(\n        transactions.map(({ hash }) => hash).filter((hash) => Boolean(hash))\n      );\n\n      if (success && data) {\n        handleBatchSuccess({\n          sessionId,\n          dropUnprocessedTransactions: props.dropUnprocessedTransactions,\n          serverTransactions: data,\n          batchTransactions: transactions\n        });\n      }\n\n      if (props.shouldRefreshBalance) {\n        await refreshAccount();\n      }\n    },\n    [dispatch, address, handleBatchSuccess]\n  );\n}\n"],
  "mappings": "uUAAA,wCAGA,IAEA,IAOO,YAA0B,CAC/B,GAAM,GAAW,EAAY,EACvB,CAAE,WAAY,EAAc,EAE5B,EAAqB,EACzB,CAAC,CACC,YACA,8BACA,qBACA,uBAMI,CACJ,OAAW,KAAe,GAAmB,CAC3C,GAAM,GAAQ,EAAmB,KAC/B,AAAC,GAAO,EAAG,SAAW,EAAY,IACpC,EAEA,GAAI,CAAC,EAAO,CACV,AAAI,GACF,EACE,EAA8B,CAC5B,YACA,OAAQ,OACR,gBAAiB,EAAY,IAC/B,CAAC,CACH,EAEF,QACF,CAEA,EACE,EAA8B,CAC5B,YACA,OAAQ,EAAM,OACd,gBAAiB,EAAY,KAC7B,kBAAmB,CACrB,CAAC,CACH,CACF,CACF,EACA,CAAC,CAAQ,CACX,EAEA,MAAO,GACL,AAAO,GAMD,wBACJ,GAAI,CAAC,EACH,OAGF,GAAM,CAAE,eAAc,gBAAe,aAAc,EAEnD,GAAI,CAAC,GAAgB,EAAa,SAAW,EAC3C,OAGF,GAAI,EAAe,CACjB,OAAW,KAAe,GACxB,EACE,EAA8B,CAC5B,YACA,OAAQ,OACR,gBAAiB,EAAY,IAC/B,CAAC,CACH,EAEF,MACF,CAEA,GAAM,CAAE,OAAM,WAAY,KAAM,GAC9B,EAAa,IAAI,CAAC,CAAE,UAAW,CAAI,EAAE,OAAO,AAAC,GAAS,QAAQ,CAAI,CAAC,CACrE,EAEA,AAAI,GAAW,GACb,EAAmB,CACjB,YACA,4BAA6B,EAAM,4BACnC,mBAAoB,EACpB,kBAAmB,CACrB,CAAC,EAGC,EAAM,sBACR,MAAM,GAAe,EAEzB,GACA,CAAC,EAAU,EAAS,CAAkB,CACxC,CACF",
  "names": []
}
