{
  "version": 3,
  "sources": ["../../src/reduxStore/persistedRootReducer.ts"],
  "sourcesContent": ["import { createMigrate, persistReducer } from 'redux-persist';\nimport reduxPersistLocalStorage from 'redux-persist/lib/storage';\nimport reduxPersistSessionStorage from 'redux-persist/lib/storage/session';\nimport { PersistConfig } from 'redux-persist/lib/types';\nimport getRootReducer from 'reduxStore/reducers';\nimport { defaultNetwork } from 'reduxStore/slices';\nimport account from 'reduxStore/slices/accountInfoSlice';\nimport batchTransactions from 'reduxStore/slices/batchTransactionsSlice';\nimport loginInfo from 'reduxStore/slices/loginInfoSlice';\nimport modals from 'reduxStore/slices/modalsSlice';\nimport networkConfig from 'reduxStore/slices/networkConfigSlice';\nimport { signedMessageInfoReducer } from 'reduxStore/slices/signedMessageInfoSlice';\nimport toasts from 'reduxStore/slices/toastsSlice';\nimport transactionsInfo from 'reduxStore/slices/transactionsInfoSlice';\nimport transactions from 'reduxStore/slices/transactionsSlice';\nimport { ReducersEnum } from 'types/reducers.types';\n\nconst config: {\n  persistReducersStorageType: 'localStorage' | 'sessionStorage';\n} = {\n  persistReducersStorageType: 'localStorage'\n};\n\nconst persistMapping = {\n  [ReducersEnum.account]: 'sdk-dapp-account',\n  [ReducersEnum.loginInfo]: 'sdk-dapp-login-info',\n  [ReducersEnum.modals]: 'sdk-dapp-modals',\n  [ReducersEnum.networkConfig]: 'sdk-dapp-network-config'\n};\n\nconst accountReducerPersistConfig = getSessionStoragePersistConfig(\n  persistMapping[ReducersEnum.account]\n);\nconst loginInfReducerPersistConfig = getSessionStoragePersistConfig(\n  persistMapping[ReducersEnum.loginInfo]\n);\nconst modalsReducerPersistConfig = getSessionStoragePersistConfig(\n  persistMapping[ReducersEnum.modals]\n);\nconst networkConfigReducerPersistConfig = getSessionStoragePersistConfig(\n  persistMapping[ReducersEnum.networkConfig]\n);\n\nconst migrations: any = {\n  2: (state: any) => {\n    return {\n      ...state,\n      networkConfig: defaultNetwork\n    };\n  }\n};\n\nfunction getSessionStoragePersistConfig(key: string, blacklist: string[] = []) {\n  return {\n    key,\n    version: 1,\n    storage: reduxPersistSessionStorage,\n    blacklist\n  };\n}\n\nconst transactionsInfoPersistConfig = getSessionStoragePersistConfig(\n  'sdk-dapp-transactionsInfo'\n);\nconst transactionsReducerPersistConfig = getSessionStoragePersistConfig(\n  'sdk-dapp-transactions',\n  [ReducersEnum.transactionsToSign]\n);\nconst batchTransactionsReducerPersistConfig = getSessionStoragePersistConfig(\n  'sdk-dapp-batchTransactions',\n  [ReducersEnum.batchTransactions]\n);\nconst toastsReducerPersistConfig =\n  getSessionStoragePersistConfig('sdk-dapp-toasts');\nconst signedMessageInfoersistConfig = getSessionStoragePersistConfig(\n  'sdk-dapp-signedMessageInfo'\n);\n\nconst localStoragePersistConfig: PersistConfig<any> = {\n  key: 'sdk-dapp-store',\n  version: 2,\n  storage: reduxPersistLocalStorage,\n  whitelist: Object.keys(persistMapping),\n  migrate: createMigrate(migrations, { debug: false })\n};\n\nconst emptyLocalStoragePersistConfig = {\n  ...localStoragePersistConfig,\n  whitelist: []\n};\n\nexport const sessionStorageReducers = {\n  [ReducersEnum.toasts]: persistReducer(toastsReducerPersistConfig, toasts),\n  [ReducersEnum.transactions]: persistReducer(\n    transactionsReducerPersistConfig,\n    transactions\n  ),\n  [ReducersEnum.transactionsInfo]: persistReducer(\n    transactionsInfoPersistConfig,\n    transactionsInfo\n  ),\n  [ReducersEnum.batchTransactions]: persistReducer(\n    batchTransactionsReducerPersistConfig,\n    batchTransactions\n  ),\n  [ReducersEnum.signedMessageInfo]: persistReducer(\n    signedMessageInfoersistConfig,\n    signedMessageInfoReducer\n  )\n};\n\nconst fullSessionReducers = {\n  ...sessionStorageReducers,\n  [ReducersEnum.account]: persistReducer(accountReducerPersistConfig, account),\n  [ReducersEnum.loginInfo]: persistReducer(\n    loginInfReducerPersistConfig,\n    loginInfo\n  ),\n  [ReducersEnum.modals]: persistReducer(modalsReducerPersistConfig, modals),\n  [ReducersEnum.networkConfig]: persistReducer(\n    networkConfigReducerPersistConfig,\n    networkConfig\n  )\n};\n\nconst isPersistToLocalStorage =\n  config.persistReducersStorageType === 'localStorage';\n\nconst persistedReducer = isPersistToLocalStorage\n  ? persistReducer(\n      localStoragePersistConfig,\n      getRootReducer(sessionStorageReducers)\n    )\n  : persistReducer(\n      emptyLocalStoragePersistConfig,\n      getRootReducer(fullSessionReducers)\n    );\n\nexport default persistedReducer;\n"],
  "mappings": "inBAAA,+HACA,yCACA,iDAkDA,WAAwC,EAAa,EAAsB,CAAC,EAAG,CAC7E,MAAO,CACL,MACA,QAAS,EACT,QAAS,EACT,WACF,CACF,CA3DA,GAiBM,GAMA,EAOA,EAGA,EAGA,EAGA,EAIA,EAkBA,EAGA,EAIA,EAIA,EAEA,EAIA,EAQA,EAKO,EAoBP,EAcA,EAGA,EAUC,EA1IP,cAIA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IAEA,AAAM,EAEF,CACF,2BAA4B,cAC9B,EAEM,EAAiB,CACrB,CAAC,WAAuB,mBACxB,CAAC,aAAyB,sBAC1B,CAAC,UAAsB,kBACvB,CAAC,iBAA6B,yBAChC,EAEM,EAA8B,EAClC,EAAe,UACjB,EACM,EAA+B,EACnC,EAAe,YACjB,EACM,EAA6B,EACjC,EAAe,SACjB,EACM,EAAoC,EACxC,EAAe,gBACjB,EAEM,EAAkB,CACtB,EAAG,AAAC,GACK,OACF,GADE,CAEL,cAAe,CACjB,EAEJ,EAWA,AAAM,EAAgC,EACpC,2BACF,EACM,EAAmC,EACvC,wBACA,CAAC,oBAA+B,CAClC,EACM,EAAwC,EAC5C,6BACA,CAAC,mBAA8B,CACjC,EACM,EACJ,EAA+B,iBAAiB,EAC5C,EAAgC,EACpC,4BACF,EAEM,EAAgD,CACpD,IAAK,iBACL,QAAS,EACT,QAAS,EACT,UAAW,OAAO,KAAK,CAAc,EACrC,QAAS,EAAc,EAAY,CAAE,MAAO,EAAM,CAAC,CACrD,EAEM,EAAiC,OAClC,GADkC,CAErC,UAAW,CAAC,CACd,GAEa,EAAyB,CACpC,CAAC,UAAsB,EAAe,EAA4B,CAAM,EACxE,CAAC,gBAA4B,EAC3B,EACA,CACF,EACA,CAAC,oBAAgC,EAC/B,EACA,CACF,EACA,CAAC,qBAAiC,EAChC,EACA,CACF,EACA,CAAC,qBAAiC,EAChC,EACA,CACF,CACF,EAEM,EAAsB,OACvB,GADuB,CAE1B,CAAC,WAAuB,EAAe,EAA6B,CAAO,EAC3E,CAAC,aAAyB,EACxB,EACA,CACF,EACA,CAAC,UAAsB,EAAe,EAA4B,CAAM,EACxE,CAAC,iBAA6B,EAC5B,EACA,CACF,CACF,GAEM,EACJ,EAAO,6BAA+B,eAElC,EAAmB,EACrB,EACE,EACA,EAAe,CAAsB,CACvC,EACA,EACE,EACA,EAAe,CAAmB,CACpC,EAEG,EAAQ",
  "names": []
}
