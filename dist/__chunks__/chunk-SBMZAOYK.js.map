{
  "version": 3,
  "sources": ["../../src/providers/experimentalWebViewProvider/ExperimentalWebviewProvider.ts"],
  "sourcesContent": ["import { Message, Transaction } from '@multiversx/sdk-core';\nimport { IDAppProviderAccount } from '@multiversx/sdk-dapp-utils/out';\nimport { providerNotInitializedError } from '@multiversx/sdk-dapp-utils/out/helpers/providerNotInitializedError';\nimport { WebviewProvider } from '@multiversx/sdk-webview-provider/out/WebviewProvider';\nimport { logoutAction } from 'reduxStore/commonActions';\nimport { store } from 'reduxStore/store';\nimport { loginWithNativeAuthToken } from 'services/nativeAuth/helpers/loginWithNativeAuthToken';\nimport { removeAllTransactionsToSign } from 'services/transactions';\nimport { IDappProvider } from 'types/dappProvider.types';\nimport { setExternalProviderAsAccountProvider } from '../accountProvider';\n\n/**\n * This is an experimental provider that uses @multiversx/webview-provider to handle the communication between .\n * Please do not use this provider or use it with caution.\n * It will be renamed to WebviewProvider once it is stable.\n * */\nexport class ExperimentalWebviewProvider implements IDappProvider {\n  private static _instance: ExperimentalWebviewProvider;\n  private readonly _provider: WebviewProvider;\n\n  static getInstance() {\n    if (!ExperimentalWebviewProvider._instance) {\n      ExperimentalWebviewProvider._instance = new ExperimentalWebviewProvider();\n    }\n    return ExperimentalWebviewProvider._instance;\n  }\n\n  getAccount(): IDAppProviderAccount | null {\n    const data = this._provider.getAccount();\n    return { address: data?.address ?? '' };\n  }\n\n  setAccount(account: IDAppProviderAccount): void {\n    this._provider.setAccount(account);\n  }\n\n  constructor() {\n    this._provider = WebviewProvider.getInstance({\n      resetStateCallback: () => store.dispatch(logoutAction())\n    });\n  }\n\n  init = async () => {\n    return await this._provider.init();\n  };\n\n  login = async () => {\n    const data = await this._provider.login();\n    return { address: data?.address ?? '' };\n  };\n\n  logout = async () => {\n    store.dispatch(logoutAction());\n    return await this._provider.logout();\n  };\n\n  relogin = async () => {\n    const accessToken = await this._provider.relogin();\n\n    if (!accessToken) {\n      console.error('Unable to re-login. Missing accessToken.');\n      return null;\n    }\n\n    loginWithNativeAuthToken(accessToken);\n    setExternalProviderAsAccountProvider();\n    return accessToken;\n  };\n\n  signTransactions = async (\n    transactionsToSign: Transaction[]\n  ): Promise<Transaction[] | null> => {\n    const response = await this._provider.signTransactions(transactionsToSign);\n\n    if (!response) {\n      removeAllTransactionsToSign();\n      this._provider.cancelAction();\n      return null;\n    }\n\n    return response;\n  };\n\n  signTransaction = async (transaction: Transaction) => {\n    return await this._provider.signTransaction(transaction);\n  };\n\n  signMessage = async (message: Message): Promise<Message | null> => {\n    return await this._provider.signMessage(message);\n  };\n\n  cancelAction = async () => {\n    return await this._provider.cancelAction();\n  };\n\n  isInitialized = () => {\n    return this._provider.isInitialized();\n  };\n\n  isConnected = () => {\n    return this._provider.isConnected();\n  };\n\n  sendCustomRequest = async (payload: {\n    request: { method: string; params: any };\n  }) => {\n    this._provider.sendPostMessage({\n      type: payload.request.method as any,\n      payload: payload.request.params\n    });\n  };\n\n  getAddress = providerNotInitializedError('getAddress');\n}\n"],
  "mappings": "qQAAA,IAIA,IACA,IAHA,iHACA,uFAaO,GAAM,GAAN,KAA2D,CAoBhE,aAAc,CAMd,UAAO,IAAY,wBACjB,MAAO,MAAM,MAAK,UAAU,KAAK,CACnC,GAEA,WAAQ,IAAY,wBA9CtB,MA+CI,GAAM,GAAO,KAAM,MAAK,UAAU,MAAM,EACxC,MAAO,CAAE,QAAS,oBAAM,UAAN,OAAiB,EAAG,CACxC,GAEA,YAAS,IAAY,wBACnB,SAAM,SAAS,EAAa,CAAC,EACtB,KAAM,MAAK,UAAU,OAAO,CACrC,GAEA,aAAU,IAAY,wBACpB,GAAM,GAAc,KAAM,MAAK,UAAU,QAAQ,EAEjD,MAAK,GAKL,GAAyB,CAAW,EACpC,EAAqC,EAC9B,GANL,SAAQ,MAAM,0CAA0C,EACjD,KAMX,GAEA,sBAAmB,AACjB,GACkC,wBAClC,GAAM,GAAW,KAAM,MAAK,UAAU,iBAAiB,CAAkB,EAEzE,MAAK,IACH,GAA4B,EAC5B,KAAK,UAAU,aAAa,EACrB,KAIX,GAEA,qBAAkB,AAAO,GAA6B,wBACpD,MAAO,MAAM,MAAK,UAAU,gBAAgB,CAAW,CACzD,GAEA,iBAAc,AAAO,GAA8C,wBACjE,MAAO,MAAM,MAAK,UAAU,YAAY,CAAO,CACjD,GAEA,kBAAe,IAAY,wBACzB,MAAO,MAAM,MAAK,UAAU,aAAa,CAC3C,GAEA,mBAAgB,IACP,KAAK,UAAU,cAAc,EAGtC,iBAAc,IACL,KAAK,UAAU,YAAY,EAGpC,uBAAoB,AAAO,GAErB,wBACJ,KAAK,UAAU,gBAAgB,CAC7B,KAAM,EAAQ,QAAQ,OACtB,QAAS,EAAQ,QAAQ,MAC3B,CAAC,CACH,GAEA,gBAAa,EAA4B,YAAY,EA3EnD,KAAK,UAAY,EAAgB,YAAY,CAC3C,mBAAoB,IAAM,EAAM,SAAS,EAAa,CAAC,CACzD,CAAC,CACH,CApBA,MAAO,cAAc,CACnB,MAAK,GAA4B,WAC/B,GAA4B,UAAY,GAAI,IAEvC,EAA4B,SACrC,CAEA,YAA0C,CA3B5C,MA4BI,GAAM,GAAO,KAAK,UAAU,WAAW,EACvC,MAAO,CAAE,QAAS,oBAAM,UAAN,OAAiB,EAAG,CACxC,CAEA,WAAW,EAAqC,CAC9C,KAAK,UAAU,WAAW,CAAO,CACnC,CA+EF",
  "names": []
}
