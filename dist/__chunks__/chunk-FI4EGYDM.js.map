{
  "version": 3,
  "sources": ["../../src/services/transactions/transformAndSignTransactions.ts"],
  "sourcesContent": ["import { Address, Transaction } from '@multiversx/sdk-core';\nimport BigNumber from 'bignumber.js';\n\nimport {\n  EXTRA_GAS_LIMIT_GUARDED_TX,\n  GAS_LIMIT,\n  GAS_PER_DATA_BYTE,\n  GAS_PRICE\n} from 'constants/index';\nimport { newTransaction } from 'models/newTransaction';\nimport { addressSelector, chainIDSelector } from 'reduxStore/selectors';\nimport { store } from 'reduxStore/store';\nimport { SendSimpleTransactionPropsType } from 'types';\n\nimport { getAccount } from 'utils/account/getAccount';\nimport { getLatestNonce } from 'utils/account/getLatestNonce';\nimport { computeTransactionNonce } from './computeTransactionNonce';\n\nenum ErrorCodesEnum {\n  'invalidReceiver' = 'Invalid Receiver address',\n  'unknownError' = 'Unknown Error. Please check the transactions and try again'\n}\n\nfunction calculateGasLimit({\n  data,\n  isGuarded\n}: {\n  data?: string;\n  isGuarded?: boolean;\n}) {\n  const guardedAccountGasLimit = isGuarded ? EXTRA_GAS_LIMIT_GUARDED_TX : 0;\n  const bNconfigGasLimit = new BigNumber(GAS_LIMIT).plus(\n    guardedAccountGasLimit\n  );\n  const bNgasPerDataByte = new BigNumber(GAS_PER_DATA_BYTE);\n  const bNgasValue = data\n    ? bNgasPerDataByte.times(Buffer.from(data).length)\n    : 0;\n  const bNgasLimit = bNconfigGasLimit.plus(bNgasValue);\n  const gasLimit = bNgasLimit.toString(10);\n  return gasLimit;\n}\n\nexport async function transformAndSignTransactions({\n  transactions\n}: SendSimpleTransactionPropsType): Promise<Transaction[]> {\n  const address = addressSelector(store.getState());\n  const account = await getAccount(address);\n  const accountNonce = getLatestNonce(account);\n  return transactions.map((tx) => {\n    const {\n      value,\n      receiver,\n      data = '',\n      chainID,\n      version = 1,\n      options,\n      gasPrice = GAS_PRICE,\n      gasLimit = calculateGasLimit({\n        data: tx.data,\n        isGuarded: account?.isGuarded\n      }),\n      guardian,\n      guardianSignature,\n      nonce: transactionNonce = 0\n    } = tx;\n    let validatedReceiver = receiver;\n\n    try {\n      const addr = new Address(receiver);\n      validatedReceiver = addr.hex();\n    } catch (err) {\n      throw ErrorCodesEnum.invalidReceiver;\n    }\n\n    const computedNonce = computeTransactionNonce({\n      accountNonce,\n      transactionNonce\n    });\n\n    const storeChainId = chainIDSelector(store.getState()).valueOf().toString();\n    const transactionsChainId = chainID || storeChainId;\n    return newTransaction({\n      value,\n      receiver: validatedReceiver,\n      data,\n      gasPrice,\n      gasLimit: Number(gasLimit),\n      nonce: Number(computedNonce.valueOf().toString()),\n      sender: new Address(address).hex(),\n      chainID: transactionsChainId,\n      version,\n      options,\n      guardian,\n      guardianSignature\n    });\n  });\n}\n"],
  "mappings": "oeAAA,+CACA,4BAsBA,WAA2B,CACzB,OACA,aAIC,CACD,GAAM,GAAyB,EAAY,EAA6B,EAClE,EAAmB,GAAI,GAAU,CAAS,EAAE,KAChD,CACF,EACM,EAAmB,GAAI,GAAU,CAAiB,EAClD,EAAa,EACf,EAAiB,MAAM,SAAO,KAAK,CAAI,EAAE,MAAM,EAC/C,EAGJ,MADiB,AADE,GAAiB,KAAK,CAAU,EACvB,SAAS,EAAE,CAEzC,CAEA,YAAmD,EAEQ,mCAFR,CACjD,gBACyD,CACzD,GAAM,GAAU,EAAgB,EAAM,SAAS,CAAC,EAC1C,EAAU,KAAM,GAAW,CAAO,EAClC,EAAe,EAAe,CAAO,EAC3C,MAAO,GAAa,IAAI,AAAC,GAAO,CAC9B,GAAM,CACJ,QACA,WACA,OAAO,GACP,UACA,UAAU,EACV,UACA,WAAW,EACX,WAAW,EAAkB,CAC3B,KAAM,EAAG,KACT,UAAW,iBAAS,SACtB,CAAC,EACD,WACA,oBACA,MAAO,EAAmB,GACxB,EACA,EAAoB,EAExB,GAAI,CAEF,EAAoB,AADP,GAAI,GAAQ,CAAQ,EACR,IAAI,CAC/B,OAAS,EAAP,CACA,KAAM,0BACR,CAEA,GAAM,GAAgB,EAAwB,CAC5C,eACA,kBACF,CAAC,EAEK,EAAe,EAAgB,EAAM,SAAS,CAAC,EAAE,QAAQ,EAAE,SAAS,EACpE,EAAsB,GAAW,EACvC,MAAO,GAAe,CACpB,QACA,SAAU,EACV,OACA,WACA,SAAU,OAAO,CAAQ,EACzB,MAAO,OAAO,EAAc,QAAQ,EAAE,SAAS,CAAC,EAChD,OAAQ,GAAI,GAAQ,CAAO,EAAE,IAAI,EACjC,QAAS,EACT,UACA,UACA,WACA,mBACF,CAAC,CACH,CAAC,CACH,GAjGA,iBAGA,IAMA,IACA,IACA,IAGA,IACA,IACA",
  "names": []
}
