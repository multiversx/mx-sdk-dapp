{
  "version": 3,
  "sources": ["../../src/UI/SignTransactionsModals/SignWithDeviceModal/components/components/ConfirmAmount/components/ConfirmAmountData/ConfirmAmountData.tsx"],
  "sourcesContent": ["import React from 'react';\nimport { faCoins } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classNames from 'classnames';\n\nimport { DataTestIdsEnum, MULTI_TRANSFER_EGLD_TOKEN } from 'constants/index';\nimport { withStyles } from 'hocs/withStyles';\nimport { TokenOptionType, useGetNetworkConfig } from 'hooks';\nimport { ActiveLedgerTransactionType } from 'types';\nimport { Balance } from 'UI/Balance';\nimport { UsdValue } from 'UI/UsdValue';\nimport { formatAmount } from 'utils';\n\nimport { WithStylesImportType } from '../../../../../../../../hocs/useStyles';\n\nexport interface ConfirmAmountDataPropsType extends WithStylesImportType {\n  isEgld: boolean;\n  tokenPrice?: number;\n  isNftOrSft: boolean;\n  amount: string;\n  handleReference: (element: HTMLElement | null) => void;\n  currentTransaction: ActiveLedgerTransactionType;\n  tokenDetails: TokenOptionType;\n}\n\nconst ConfirmAmountDataComponent = ({\n  isEgld,\n  styles,\n  tokenPrice,\n  isNftOrSft,\n  handleReference,\n  currentTransaction,\n  amount,\n  tokenDetails\n}: ConfirmAmountDataPropsType) => {\n  const { network } = useGetNetworkConfig();\n  const { tokenAvatar, tokenDecimals, identifier } = tokenDetails;\n\n  const getFormattedAmount = ({ addCommas }: { addCommas: boolean }) =>\n    formatAmount({\n      input: isEgld\n        ? currentTransaction.transaction.getValue().toString()\n        : amount,\n      decimals: isEgld ? Number(network.decimals) : tokenDecimals,\n      digits: Number(network.digits),\n      showLastNonZeroDecimal: false,\n      addCommas\n    });\n\n  const isEgldToken =\n    isEgld || tokenDetails.identifier === MULTI_TRANSFER_EGLD_TOKEN;\n  const formattedAmount = getFormattedAmount({ addCommas: true });\n  const rawAmount = getFormattedAmount({ addCommas: false });\n\n  return (\n    <div className={styles?.confirmAmountData}>\n      <div className={styles?.confirmAmountDataWrapper}>\n        {!isEgldToken && tokenAvatar && (\n          <img src={tokenAvatar} className={styles?.confirmAmountDataIcon} />\n        )}\n\n        {!isEgldToken && !tokenAvatar && (\n          <div\n            className={classNames(\n              styles?.confirmAmountDataIcon,\n              styles?.confirmAmountDataIconDefault\n            )}\n          >\n            <FontAwesomeIcon\n              icon={faCoins}\n              className={styles?.confirmAmountDataIconDefaultIcon}\n            />\n          </div>\n        )}\n\n        <div\n          className={styles?.confirmAmountDataBalanceWrapper}\n          ref={handleReference}\n        >\n          <Balance\n            amount={formattedAmount}\n            egldIcon={isEgldToken}\n            data-testid={DataTestIdsEnum.confirmAmount}\n            showTokenLabel\n            showTokenLabelSup\n            tokenLabel={isEgldToken ? network.egldLabel : identifier}\n            className={styles?.confirmAmountDataBalance}\n          />\n        </div>\n      </div>\n\n      {!isNftOrSft && tokenPrice && (\n        <UsdValue\n          amount={rawAmount}\n          usd={tokenPrice}\n          data-testid={DataTestIdsEnum.confirmUsdValue}\n          className={styles?.confirmAmountDataPrice}\n        />\n      )}\n\n      {!isNftOrSft && !tokenPrice && (\n        <div className={styles?.confirmAmountDataPrice}>Price Unknown</div>\n      )}\n    </div>\n  );\n};\n\nexport const ConfirmAmountData = withStyles(ConfirmAmountDataComponent, {\n  ssrStyles: () =>\n    import(\n      'UI/SignTransactionsModals/SignWithDeviceModal/components/components/ConfirmAmount/components/ConfirmAmountData/confirmAmountDataStyles.scss'\n    ),\n  clientStyles: () =>\n    require('UI/SignTransactionsModals/SignWithDeviceModal/components/components/ConfirmAmount/components/ConfirmAmountData/confirmAmountDataStyles.scss')\n      .default\n});\n"],
  "mappings": "qVAAA,IAKA,IALA,qBACA,4DACA,iEACA,0BAsBA,GAAM,GAA6B,CAAC,CAClC,SACA,SACA,aACA,aACA,kBACA,qBACA,SACA,kBACgC,CAChC,GAAM,CAAE,WAAY,EAAoB,EAClC,CAAE,cAAa,gBAAe,cAAe,EAE7C,EAAqB,CAAC,CAAE,eAC5B,EAAa,CACX,MAAO,EACH,EAAmB,YAAY,SAAS,EAAE,SAAS,EACnD,EACJ,SAAU,EAAS,OAAO,EAAQ,QAAQ,EAAI,EAC9C,OAAQ,OAAO,EAAQ,MAAM,EAC7B,uBAAwB,GACxB,WACF,CAAC,EAEG,EACJ,GAAU,EAAa,aAAe,EAClC,EAAkB,EAAmB,CAAE,UAAW,EAAK,CAAC,EACxD,EAAY,EAAmB,CAAE,UAAW,EAAM,CAAC,EAEzD,MACE,iBAAC,OAAI,UAAW,iBAAQ,mBACtB,gBAAC,OAAI,UAAW,iBAAQ,0BACrB,CAAC,GAAe,GACf,gBAAC,OAAI,IAAK,EAAa,UAAW,iBAAQ,sBAAuB,EAGlE,CAAC,GAAe,CAAC,GAChB,gBAAC,OACC,UAAW,EACT,iBAAQ,sBACR,iBAAQ,4BACV,GAEA,gBAAC,GACC,KAAM,EACN,UAAW,iBAAQ,iCACrB,CACF,EAGF,gBAAC,OACC,UAAW,iBAAQ,gCACnB,IAAK,GAEL,gBAAC,GACC,OAAQ,EACR,SAAU,EACV,cAAa,gBACb,eAAc,GACd,kBAAiB,GACjB,WAAY,EAAc,EAAQ,UAAY,EAC9C,UAAW,iBAAQ,yBACrB,CACF,CACF,EAEC,CAAC,GAAc,GACd,gBAAC,GACC,OAAQ,EACR,IAAK,EACL,cAAa,kBACb,UAAW,iBAAQ,uBACrB,EAGD,CAAC,GAAc,CAAC,GACf,gBAAC,OAAI,UAAW,iBAAQ,wBAAwB,eAAa,CAEjE,CAEJ,EAEa,EAAoB,EAAW,EAA4B,CACtE,UAAW,IACT,OACE,gJAEJ,aAAc,IACZ,WACG,OACP,CAAC",
  "names": []
}
