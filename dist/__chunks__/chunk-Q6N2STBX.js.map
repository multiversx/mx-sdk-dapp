{
  "version": 3,
  "sources": ["../../src/services/transactions/sendBatchTransactions.ts"],
  "sourcesContent": ["import { Transaction } from '@multiversx/sdk-core/out';\nimport { addressSelector } from 'reduxStore/selectors';\nimport { store } from 'reduxStore/store';\nimport {\n  SendBatchTransactionReturnType,\n  SendBatchTransactionsPropsType,\n  SimpleTransactionType\n} from 'types';\nimport { generateBatchTransactionsGrouping } from 'utils/transactions/batch/generateBatchTransactionsGrouping';\nimport { getDefaultCallbackUrl } from 'utils/window';\nimport { signTransactions } from './signTransactions';\nimport { transformTransactionsToSign } from './utils/transformTransactionsToSign';\n\nexport async function sendBatchTransactions({\n  transactions,\n  transactionsDisplayInfo,\n  redirectAfterSign = true,\n  callbackRoute = getDefaultCallbackUrl(),\n  signWithoutSending = false,\n  completedTransactionsDelay,\n  sessionInformation,\n  skipGuardian,\n  hasConsentPopup,\n  minGasLimit\n}: SendBatchTransactionsPropsType): Promise<SendBatchTransactionReturnType> {\n  try {\n    const address = addressSelector(store.getState());\n    const transactionsPayload = transactions.flat();\n\n    const transactionsToSign = await transformTransactionsToSign({\n      transactions: transactionsPayload as SimpleTransactionType[],\n      minGasLimit\n    });\n\n    const grouping = generateBatchTransactionsGrouping(transactions);\n\n    const { sessionId, error } = await signTransactions({\n      transactions: transactionsToSign as Transaction[],\n      minGasLimit,\n      callbackRoute,\n      transactionsDisplayInfo,\n      customTransactionInformation: {\n        grouping,\n        redirectAfterSign,\n        completedTransactionsDelay,\n        sessionInformation,\n        skipGuardian,\n        signWithoutSending,\n        hasConsentPopup\n      }\n    });\n\n    return {\n      error,\n      batchId: `${sessionId}-${address}`\n    };\n  } catch (err) {\n    console.error('error signing transaction', err as any);\n    return { error: err as any, batchId: null };\n  }\n}\n"],
  "mappings": "iXAaA,WAA4C,EAWgC,mCAXhC,CAC1C,eACA,0BACA,oBAAoB,GACpB,gBAAgB,EAAsB,EACtC,qBAAqB,GACrB,6BACA,qBACA,eACA,kBACA,eAC0E,CAC1E,GAAI,CACF,GAAM,GAAU,EAAgB,EAAM,SAAS,CAAC,EAC1C,EAAsB,EAAa,KAAK,EAExC,EAAqB,KAAM,GAA4B,CAC3D,aAAc,EACd,aACF,CAAC,EAEK,EAAW,EAAkC,CAAY,EAEzD,CAAE,YAAW,SAAU,KAAM,GAAiB,CAClD,aAAc,EACd,cACA,gBACA,0BACA,6BAA8B,CAC5B,WACA,oBACA,6BACA,qBACA,eACA,qBACA,iBACF,CACF,CAAC,EAED,MAAO,CACL,QACA,QAAS,GAAG,KAAa,GAC3B,CACF,OAAS,EAAP,CACA,eAAQ,MAAM,4BAA6B,CAAU,EAC9C,CAAE,MAAO,EAAY,QAAS,IAAK,CAC5C,CACF,GA5DA,iBACA,IACA,IAMA,IACA,IACA,IACA",
  "names": []
}
