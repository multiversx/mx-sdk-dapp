{
  "version": 3,
  "sources": ["../../src/utils/transactions/transactionInfoHelpers/useGetOperationList.tsx"],
  "sourcesContent": ["import { useState } from 'react';\nimport {\n  OperationType,\n  TransactionOperationActionTypeEnum\n} from 'types/serverTransactions.types';\n\nimport { WithTransactionType } from '../../../UI/types';\n\nexport const internalTransactionActions = [\n  TransactionOperationActionTypeEnum.create,\n  TransactionOperationActionTypeEnum.localMint,\n  TransactionOperationActionTypeEnum.ESDTLocalMint,\n  TransactionOperationActionTypeEnum.addQuantity,\n  TransactionOperationActionTypeEnum.burn,\n  TransactionOperationActionTypeEnum.localBurn,\n  TransactionOperationActionTypeEnum.ESDTLocalBurn,\n  TransactionOperationActionTypeEnum.wipe,\n  TransactionOperationActionTypeEnum.writeLog,\n  TransactionOperationActionTypeEnum.signalError\n];\n\nenum ButtonTextEnum {\n  inOut = 'Show in/out operations',\n  fewer = 'Show fewer operations',\n  all = 'Show all operations'\n}\n\nexport interface OperationListType extends WithTransactionType {\n  operations: OperationType[];\n  listLength?: number;\n}\n\nexport function getOperationList({\n  operations,\n  transaction,\n  isExpanded = false,\n  listLength = 25\n}: OperationListType & {\n  isExpanded?: boolean;\n}) {\n  const filteredOperations = operations.filter(\n    (operation) =>\n      !internalTransactionActions.includes(operation.action) &&\n      (operation.sender === transaction.sender ||\n        operation.receiver === transaction.sender)\n  );\n\n  const importantOperations =\n    filteredOperations.length > 0 ? filteredOperations : operations;\n\n  const displayedOperations =\n    importantOperations.length > listLength\n      ? importantOperations.slice(0, listLength)\n      : importantOperations;\n\n  const collapsedOperations =\n    importantOperations.length > listLength\n      ? importantOperations.slice(listLength, importantOperations.length)\n      : [];\n\n  const toggleButtonText = isExpanded\n    ? filteredOperations.length > 0\n      ? ButtonTextEnum.inOut\n      : ButtonTextEnum.fewer\n    : ButtonTextEnum.all;\n\n  const showToggleButton =\n    displayedOperations.length !== operations.length ||\n    collapsedOperations.length > 0;\n\n  return {\n    displayedOperations: isExpanded ? operations : displayedOperations,\n    toggleButtonText,\n    showToggleButton\n  };\n}\n\nexport function useGetOperationList(props: OperationListType) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const onToggleButtonClick = () => {\n    setIsExpanded((existing) => !existing);\n  };\n\n  const { displayedOperations, showToggleButton, toggleButtonText } =\n    getOperationList({ ...props, isExpanded });\n\n  return {\n    isExpanded,\n    displayedOperations,\n    showToggleButton,\n    toggleButtonText,\n    onToggleButtonClick\n  };\n}\n"],
  "mappings": "qGAAA,iCAgCO,WAA0B,CAC/B,aACA,cACA,aAAa,GACb,aAAa,IAGZ,CACD,GAAM,GAAqB,EAAW,OACpC,AAAC,GACC,CAAC,EAA2B,SAAS,EAAU,MAAM,GACpD,GAAU,SAAW,EAAY,QAChC,EAAU,WAAa,EAAY,OACzC,EAEM,EACJ,EAAmB,OAAS,EAAI,EAAqB,EAEjD,EACJ,EAAoB,OAAS,EACzB,EAAoB,MAAM,EAAG,CAAU,EACvC,EAEA,EACJ,EAAoB,OAAS,EACzB,EAAoB,MAAM,EAAY,EAAoB,MAAM,EAChE,CAAC,EAED,EAAmB,EACrB,EAAmB,OAAS,EAC1B,yBACA,wBACF,sBAEE,EACJ,EAAoB,SAAW,EAAW,QAC1C,EAAoB,OAAS,EAE/B,MAAO,CACL,oBAAqB,EAAa,EAAa,EAC/C,mBACA,kBACF,CACF,CAEO,WAA6B,EAA0B,CAC5D,GAAM,CAAC,EAAY,GAAiB,EAAS,EAAK,EAC5C,EAAsB,IAAM,CAChC,EAAc,AAAC,GAAa,CAAC,CAAQ,CACvC,EAEM,CAAE,sBAAqB,mBAAkB,oBAC7C,EAAiB,OAAK,GAAL,CAAY,YAAW,EAAC,EAE3C,MAAO,CACL,aACA,sBACA,mBACA,mBACA,qBACF,CACF,CA7FA,GAQa,GARb,aACA,IAOO,AAAM,EAA6B,CACxC,SACA,YACA,gBACA,cACA,OACA,YACA,gBACA,OACA,WACA,aACF",
  "names": []
}
