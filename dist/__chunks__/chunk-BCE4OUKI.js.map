{
  "version": 3,
  "sources": ["../../src/utils/transactions/transactionInfoHelpers/useDataDecode.ts"],
  "sourcesContent": ["import { useEffect, useState, SetStateAction, Dispatch } from 'react';\n\nimport { DecodeMethodEnum } from 'types';\nimport { decodeForDisplay } from './decodeForDisplay';\n\nexport interface DataDecodeType {\n  value: string;\n  className?: string;\n  initialDecodeMethod?: DecodeMethodEnum | string;\n  setDecodeMethod?: Dispatch<SetStateAction<string>>;\n  identifier?: string;\n}\n\nconst decodeOptions = [\n  {\n    label: 'Raw',\n    value: DecodeMethodEnum.raw\n  },\n  {\n    label: 'Text',\n    value: DecodeMethodEnum.text\n  },\n  {\n    label: 'Decimal',\n    value: DecodeMethodEnum.decimal\n  },\n  {\n    label: 'Smart',\n    value: DecodeMethodEnum.smart\n  }\n];\n\nexport const useDataDecode = ({\n  value,\n  initialDecodeMethod,\n  setDecodeMethod,\n  identifier\n}: DataDecodeType) => {\n  const [activeKey, setActiveKey] = useState(\n    initialDecodeMethod &&\n      Object.values<string>(DecodeMethodEnum).includes(initialDecodeMethod)\n      ? initialDecodeMethod\n      : DecodeMethodEnum.raw\n  );\n\n  const { displayValue, validationWarnings } = decodeForDisplay({\n    input: value,\n    decodeMethod: activeKey as DecodeMethodEnum,\n    identifier\n  });\n\n  useEffect(() => {\n    if (setDecodeMethod) {\n      setDecodeMethod(activeKey);\n    }\n  }, [activeKey]);\n\n  return {\n    displayValue,\n    validationWarnings,\n    setActiveKey,\n    decodeOptions\n  };\n};\n"],
  "mappings": "+MAAA,mDAaM,GAmBO,EAhCb,aAEA,IACA,IAUA,AAAM,EAAgB,CACpB,CACE,MAAO,MACP,MAAO,KACT,EACA,CACE,MAAO,OACP,MAAO,MACT,EACA,CACE,MAAO,UACP,MAAO,SACT,EACA,CACE,MAAO,QACP,MAAO,OACT,CACF,EAEa,EAAgB,CAAC,CAC5B,QACA,sBACA,kBACA,gBACoB,CACpB,GAAM,CAAC,EAAW,GAAgB,EAChC,GACE,OAAO,OAAe,CAAgB,EAAE,SAAS,CAAmB,EAClE,EACA,KACN,EAEM,CAAE,eAAc,sBAAuB,EAAiB,CAC5D,MAAO,EACP,aAAc,EACd,YACF,CAAC,EAED,SAAU,IAAM,CACd,AAAI,GACF,EAAgB,CAAS,CAE7B,EAAG,CAAC,CAAS,CAAC,EAEP,CACL,eACA,qBACA,eACA,eACF,CACF",
  "names": []
}
