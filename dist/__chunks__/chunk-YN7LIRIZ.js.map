{
  "version": 3,
  "sources": ["../../src/UI/TransactionsTable/TransactionsTable.tsx"],
  "sourcesContent": ["import React, { ReactNode, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { DataTestIdsEnum } from 'constants/index';\nimport { useGetAccount, useGetNetworkConfig } from 'hooks';\nimport { ServerTransactionType } from 'types/serverTransactions.types';\nimport { getInterpretedTransaction } from 'utils/transactions/getInterpretedTransaction/getInterpretedTransaction';\nimport { withStyles, WithStylesImportType } from '../../hocs/withStyles';\nimport { WithClassnameType } from '../types';\nimport { TransactionRow } from './components/TransactionRow';\n\nexport interface TransactionsTableType extends WithClassnameType {\n  transactions: ServerTransactionType[];\n  title?: ReactNode;\n  directionCol?: boolean;\n  showLockedAccounts?: boolean;\n}\n\nconst TransactionsTableComponent = ({\n  transactions,\n  directionCol = false,\n  showLockedAccounts = false,\n  className = 'dapp-transactions-table',\n  title,\n  globalStyles,\n  styles\n}: TransactionsTableType & WithStylesImportType) => {\n  const { address } = useGetAccount();\n  const {\n    network: { explorerAddress }\n  } = useGetNetworkConfig();\n\n  const interpretedTransactions = useMemo(() => {\n    if (!address) {\n      return [];\n    }\n    return transactions.map((transaction) =>\n      getInterpretedTransaction({ transaction, address, explorerAddress })\n    );\n  }, [transactions, explorerAddress, address]);\n\n  if (!address) {\n    return null;\n  }\n\n  return (\n    <div\n      className={classNames(\n        globalStyles?.card,\n        globalStyles?.mt5,\n        globalStyles?.mb5,\n        styles?.transactionsTable,\n        className\n      )}\n    >\n      <div\n        className={classNames(\n          globalStyles?.cardHeader,\n          globalStyles?.cardHeaderItem,\n          globalStyles?.dFlex,\n          globalStyles?.justifyContentBetween,\n          globalStyles?.alignItemsCenter,\n          styles?.transactionsTableHeader\n        )}\n      >\n        <h6 className={globalStyles?.h6} data-testid={DataTestIdsEnum.title}>\n          {title || 'Transactions'}\n        </h6>\n      </div>\n\n      <div className={classNames(globalStyles?.cardBody, globalStyles?.p0)}>\n        <div className={styles?.tableWrapper}>\n          <table\n            className={classNames(styles?.table, globalStyles?.trimSizeSm)}\n            data-testid={DataTestIdsEnum.transactionsTable}\n          >\n            <thead>\n              <tr>\n                <th scope='col'>Tx Hash</th>\n                <th scope='col'>Age</th>\n                <th scope='col'>Shard</th>\n                <th scope='col'>From</th>\n                {directionCol && <th scope='col'> Tx Direction </th>}\n                <th scope='col'>To</th>\n                <th scope='col'>Method</th>\n                <th scope='col'>Value</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {interpretedTransactions.map((transaction) => (\n                <TransactionRow\n                  transaction={transaction}\n                  key={transaction.txHash}\n                  showDirectionCol={directionCol}\n                  showLockedAccounts={showLockedAccounts}\n                />\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const TransactionsTable = withStyles(TransactionsTableComponent, {\n  ssrStyles: () =>\n    import('UI/TransactionsTable/components/transactionsTable.styles.scss'),\n  clientStyles: () =>\n    require('UI/TransactionsTable/components/transactionsTable.styles.scss')\n      .default\n});\n"],
  "mappings": "qVAAA,IAEA,IAFA,mCACA,0BAIA,IAYA,GAAM,GAA6B,CAAC,CAClC,eACA,eAAe,GACf,qBAAqB,GACrB,YAAY,0BACZ,QACA,eACA,YACkD,CAClD,GAAM,CAAE,WAAY,EAAc,EAC5B,CACJ,QAAS,CAAE,oBACT,EAAoB,EAElB,EAA0B,EAAQ,IACjC,EAGE,EAAa,IAAI,AAAC,GACvB,EAA0B,CAAE,cAAa,UAAS,iBAAgB,CAAC,CACrE,EAJS,CAAC,EAKT,CAAC,EAAc,EAAiB,CAAO,CAAC,EAE3C,MAAK,GAKH,gBAAC,OACC,UAAW,EACT,iBAAc,KACd,iBAAc,IACd,iBAAc,IACd,iBAAQ,kBACR,CACF,GAEA,gBAAC,OACC,UAAW,EACT,iBAAc,WACd,iBAAc,eACd,iBAAc,MACd,iBAAc,sBACd,iBAAc,iBACd,iBAAQ,uBACV,GAEA,gBAAC,MAAG,UAAW,iBAAc,GAAI,cAAa,SAC3C,GAAS,cACZ,CACF,EAEA,gBAAC,OAAI,UAAW,EAAW,iBAAc,SAAU,iBAAc,EAAE,GACjE,gBAAC,OAAI,UAAW,iBAAQ,cACtB,gBAAC,SACC,UAAW,EAAW,iBAAQ,MAAO,iBAAc,UAAU,EAC7D,cAAa,qBAEb,gBAAC,aACC,gBAAC,UACC,gBAAC,MAAG,MAAM,OAAM,SAAO,EACvB,gBAAC,MAAG,MAAM,OAAM,KAAG,EACnB,gBAAC,MAAG,MAAM,OAAM,OAAK,EACrB,gBAAC,MAAG,MAAM,OAAM,MAAI,EACnB,GAAgB,gBAAC,MAAG,MAAM,OAAM,gBAAc,EAC/C,gBAAC,MAAG,MAAM,OAAM,IAAE,EAClB,gBAAC,MAAG,MAAM,OAAM,QAAM,EACtB,gBAAC,MAAG,MAAM,OAAM,OAAK,CACvB,CACF,EAEA,gBAAC,aACE,EAAwB,IAAI,AAAC,GAC5B,gBAAC,GACC,YAAa,EACb,IAAK,EAAY,OACjB,iBAAkB,EAClB,mBAAoB,EACtB,CACD,CACH,CACF,CACF,CACF,CACF,EA5DO,IA8DX,EAEa,EAAoB,EAAW,EAA4B,CACtE,UAAW,IACT,OAAO,kEACT,aAAc,IACZ,WACG,OACP,CAAC",
  "names": []
}
