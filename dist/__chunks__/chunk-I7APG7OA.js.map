{
  "version": 3,
  "sources": ["../../src/hooks/transactions/helpers/checkNeedsGuardianSigning.ts"],
  "sourcesContent": ["import { Transaction } from '@multiversx/sdk-core';\nimport { getEnvironmentForChainId } from 'apiCalls/configuration';\nimport { getCrossWindowProvider } from 'components/ProviderInitializer/helpers';\nimport {\n  WALLET_SIGN_SESSION,\n  fallbackNetworkConfigurations\n} from 'constants/index';\n\nimport { newWalletProvider } from 'providers/utils';\nimport { builtCallbackUrl } from 'utils/transactions/builtCallbackUrl';\nimport { getWindowLocation } from 'utils/window/getWindowLocation';\nimport { getAreAllTransactionsSignedByGuardian } from './getAreAllTransactionsSignedByGuardian';\n\ninterface SendTransactionsToGuardianType {\n  transactions: Transaction[];\n  hasGuardianScreen?: boolean;\n  isGuarded?: boolean;\n  callbackRoute?: string;\n  sessionId?: string;\n  walletAddress?: string;\n}\n\nexport const checkNeedsGuardianSigning = ({\n  transactions,\n  hasGuardianScreen,\n  callbackRoute,\n  sessionId,\n  walletAddress,\n  isGuarded\n}: SendTransactionsToGuardianType) => {\n  const allSignedByGuardian = getAreAllTransactionsSignedByGuardian({\n    isGuarded,\n    transactions\n  });\n\n  const chainId = transactions[0].getChainID().valueOf();\n  const sender = transactions[0].getSender().bech32().toString();\n  const environment = getEnvironmentForChainId(chainId);\n  const walletProviderAddress =\n    walletAddress ?? fallbackNetworkConfigurations[environment].walletAddress;\n\n  const sendTransactionsToGuardian = () => {\n    const walletProvider = newWalletProvider(walletProviderAddress);\n    const urlParams = { [WALLET_SIGN_SESSION]: String(sessionId) };\n    const { origin } = getWindowLocation();\n    const callbackUrl = window?.location\n      ? `${origin}${callbackRoute}`\n      : `${callbackRoute}`;\n    const builtedCallbackUrl = builtCallbackUrl({ callbackUrl, urlParams });\n\n    walletProvider.guardTransactions(transactions, {\n      callbackUrl: encodeURIComponent(builtedCallbackUrl)\n    });\n  };\n\n  const guardTransactions = async () => {\n    const provider = await getCrossWindowProvider({\n      address: sender,\n      walletUrl: walletProviderAddress\n    });\n    provider?.setShouldShowConsentPopup(true);\n    const guardedTransactions = await provider?.guardTransactions(transactions);\n    return guardedTransactions;\n  };\n\n  const needs2FaSigning =\n    !hasGuardianScreen && !allSignedByGuardian && sessionId;\n\n  return {\n    needs2FaSigning: isGuarded ? needs2FaSigning : false,\n    sendTransactionsToGuardian,\n    guardTransactions\n  };\n};\n"],
  "mappings": "oYAAA,IAGA,IAMA,IACA,IAYO,GAAM,GAA4B,CAAC,CACxC,eACA,oBACA,gBACA,YACA,gBACA,eACoC,CACpC,GAAM,GAAsB,EAAsC,CAChE,YACA,cACF,CAAC,EAEK,EAAU,EAAa,GAAG,WAAW,EAAE,QAAQ,EAC/C,EAAS,EAAa,GAAG,UAAU,EAAE,OAAO,EAAE,SAAS,EACvD,EAAc,EAAyB,CAAO,EAC9C,EACJ,UAAiB,EAA8B,GAAa,cA6B9D,MAAO,CACL,gBAAiB,EAHjB,CAAC,GAAqB,CAAC,GAAuB,EAGC,GAC/C,2BA7BiC,IAAM,CACvC,GAAM,GAAiB,EAAkB,CAAqB,EACxD,EAAY,CAAE,CAAC,GAAsB,OAAO,CAAS,CAAE,EACvD,CAAE,UAAW,EAAkB,EAC/B,EAAc,qBAAQ,SACxB,GAAG,IAAS,IACZ,GAAG,IACD,EAAqB,EAAiB,CAAE,cAAa,WAAU,CAAC,EAEtE,EAAe,kBAAkB,EAAc,CAC7C,YAAa,mBAAmB,CAAkB,CACpD,CAAC,CACH,EAkBE,kBAhBwB,IAAY,0BACpC,GAAM,GAAW,KAAM,GAAuB,CAC5C,QAAS,EACT,UAAW,CACb,CAAC,EACD,kBAAU,0BAA0B,IACR,KAAM,kBAAU,kBAAkB,EAEhE,EASA,CACF",
  "names": []
}
