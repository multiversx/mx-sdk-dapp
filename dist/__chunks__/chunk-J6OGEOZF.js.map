{
  "version": 3,
  "sources": ["../../src/__mocks__/server.ts"],
  "sourcesContent": ["import {\n  DefaultBodyType,\n  PathParams,\n  ResponseComposition,\n  rest,\n  RestContext,\n  RestRequest\n} from 'msw';\nimport { setupServer } from 'msw/node';\nimport { testAddress, testNetwork } from './accountConfig';\nimport {\n  account,\n  blocks,\n  dappConfig,\n  networkConfig,\n  socketResponse,\n  websocketConfig\n} from './data';\n\nexport const mockResponse =\n  <T extends DefaultBodyType>(body: T) =>\n  (\n    _req: RestRequest<never, PathParams<string>>,\n    res: ResponseComposition<DefaultBodyType>,\n    ctx: RestContext\n  ) => {\n    return res(ctx.status(200), ctx.json(body));\n  };\n\nconst handlers = [\n  rest.get(`${testNetwork.apiAddress}/dapp/config`, mockResponse(dappConfig)),\n\n  rest.get(\n    `${testNetwork.apiAddress}/network/config`,\n    mockResponse(networkConfig)\n  ),\n  rest.get(\n    `https://${websocketConfig.url}/socket.io/`,\n    mockResponse(socketResponse)\n  ),\n  rest.get(\n    `${testNetwork.apiAddress}/websocket/config`,\n    mockResponse(websocketConfig)\n  ),\n  rest.get(\n    `${testNetwork.apiAddress}/accounts/${testAddress}`,\n    mockResponse(account)\n  ),\n  rest.get(`${testNetwork.apiAddress}/blocks`, mockResponse(blocks))\n];\n\n// This configures a request mocking server with the given request handlers.\nconst server = setupServer(...handlers);\n\nexport { server, rest };\n"],
  "mappings": "kUAAA,+BAQA,uCAWO,GAAM,GACX,AAA4B,GAC5B,CACE,EACA,EACA,IAEO,EAAI,EAAI,OAAO,GAAG,EAAG,EAAI,KAAK,CAAI,CAAC,EAGxC,EAAW,CACf,EAAK,IAAI,GAAG,EAAY,yBAA0B,EAAa,CAAU,CAAC,EAE1E,EAAK,IACH,GAAG,EAAY,4BACf,EAAa,CAAa,CAC5B,EACA,EAAK,IACH,WAAW,EAAgB,iBAC3B,EAAa,CAAc,CAC7B,EACA,EAAK,IACH,GAAG,EAAY,8BACf,EAAa,CAAe,CAC9B,EACA,EAAK,IACH,GAAG,EAAY,uBAAuB,IACtC,EAAa,CAAO,CACtB,EACA,EAAK,IAAI,GAAG,EAAY,oBAAqB,EAAa,CAAM,CAAC,CACnE,EAGM,EAAS,EAAY,GAAG,CAAQ",
  "names": []
}
