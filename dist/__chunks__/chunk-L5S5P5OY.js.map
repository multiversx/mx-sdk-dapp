{
  "version": 3,
  "sources": ["../../src/reduxStore/slices/loginInfoSlice.ts"],
  "sourcesContent": ["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { IframeLoginTypes } from 'lib/sdkWebWalletIframeProvider';\nimport { setLoginExpiresAt, getNewLoginExpiresTimestamp } from 'storage/local';\nimport { LoginMethodsEnum } from 'types/enums.types';\nimport { TokenLoginType } from '../../types';\nimport {\n  loginAction,\n  logoutAction,\n  LoginActionPayloadType\n} from '../commonActions';\n\nexport interface WalletConnectLoginType {\n  loginType: string;\n  callbackRoute: string;\n  logoutRoute: string;\n}\n\nexport interface LedgerLoginType {\n  index: number;\n  loginType: string;\n}\n\nexport interface LoginInfoType {\n  data: any;\n  expires?: number;\n}\n\nexport interface LoginInfoStateType {\n  loginMethod: LoginMethodsEnum;\n  iframeLoginType?: IframeLoginTypes;\n  walletConnectLogin: WalletConnectLoginType | null;\n  ledgerLogin: LedgerLoginType | null;\n  tokenLogin: TokenLoginType | null;\n  walletLogin: LoginInfoType | null;\n  extensionLogin: LoginInfoType | null;\n  passkeyLogin: LoginInfoType | null;\n  operaLogin: LoginInfoType | null;\n  crossWindowLogin: LoginInfoType | null;\n  iframeWindowLogin: LoginInfoType | null;\n  webviewLogin: LoginInfoType | null;\n  isLoginSessionInvalid: boolean;\n  logoutRoute?: string;\n  isWalletConnectV2Initialized?: boolean;\n}\n\nconst initialState: LoginInfoStateType = {\n  loginMethod: LoginMethodsEnum.none,\n  walletConnectLogin: null,\n  ledgerLogin: null,\n  tokenLogin: null,\n  walletLogin: null,\n  extensionLogin: null,\n  passkeyLogin: null,\n  operaLogin: null,\n  crossWindowLogin: null,\n  iframeWindowLogin: null,\n  isLoginSessionInvalid: false,\n  webviewLogin: null\n};\n\nexport const loginInfoSlice = createSlice({\n  name: 'loginInfoSlice',\n  initialState: initialState,\n  reducers: {\n    setLoginMethod: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LoginMethodsEnum>\n    ) => {\n      state.loginMethod = action.payload;\n    },\n    setTokenLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<TokenLoginType | null>\n    ) => {\n      state.tokenLogin = action.payload;\n    },\n    setTokenLoginSignature: (\n      state: LoginInfoStateType,\n      action: PayloadAction<string>\n    ) => {\n      if (state?.tokenLogin != null) {\n        state.tokenLogin.signature = action.payload;\n      }\n    },\n    setWalletLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LoginInfoType | null>\n    ) => {\n      state.walletLogin = action.payload;\n    },\n    setWalletConnectLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<WalletConnectLoginType | null>\n    ) => {\n      state.walletConnectLogin = action.payload;\n    },\n    setLedgerLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LedgerLoginType | null>\n    ) => {\n      state.ledgerLogin = action.payload;\n    },\n    setWebviewLogin: (\n      state: LoginInfoStateType,\n      action: PayloadAction<LoginInfoType | null>\n    ) => {\n      state.webviewLogin = action.payload;\n    },\n    invalidateLoginSession: (state: LoginInfoStateType) => {\n      state.isLoginSessionInvalid = true;\n    },\n    setLogoutRoute: (\n      state: LoginInfoStateType,\n      action: PayloadAction<string | undefined>\n    ) => {\n      state.logoutRoute = action.payload;\n    },\n    setIsWalletConnectV2Initialized: (\n      state: LoginInfoStateType,\n      action: PayloadAction<boolean>\n    ) => {\n      state.isWalletConnectV2Initialized = action.payload;\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n    builder.addCase(\n      loginAction,\n      (\n        state: LoginInfoStateType,\n        action: PayloadAction<LoginActionPayloadType>\n      ) => {\n        state.isLoginSessionInvalid = false;\n        state.loginMethod = action.payload.loginMethod;\n        state.iframeLoginType = action.payload.iframeLoginType;\n        setLoginExpiresAt(getNewLoginExpiresTimestamp());\n      }\n    );\n  }\n});\n\nexport const {\n  setLoginMethod,\n  setWalletConnectLogin,\n  setLedgerLogin,\n  setTokenLogin,\n  setTokenLoginSignature,\n  setWalletLogin,\n  invalidateLoginSession,\n  setLogoutRoute,\n  setIsWalletConnectV2Initialized,\n  setWebviewLogin\n} = loginInfoSlice.actions;\n\nexport default loginInfoSlice.reducer;\n"],
  "mappings": "mMAAA,kDA6CM,GAeO,EAoFX,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAGK,EA5JP,aAEA,IACA,IAEA,IAwCA,AAAM,EAAmC,CACvC,YAAa,GACb,mBAAoB,KACpB,YAAa,KACb,WAAY,KACZ,YAAa,KACb,eAAgB,KAChB,aAAc,KACd,WAAY,KACZ,iBAAkB,KAClB,kBAAmB,KACnB,sBAAuB,GACvB,aAAc,IAChB,EAEa,EAAiB,EAAY,CACxC,KAAM,iBACN,aAAc,EACd,SAAU,CACR,eAAgB,CACd,EACA,IACG,CACH,EAAM,YAAc,EAAO,OAC7B,EACA,cAAe,CACb,EACA,IACG,CACH,EAAM,WAAa,EAAO,OAC5B,EACA,uBAAwB,CACtB,EACA,IACG,CACH,AAAI,kBAAO,aAAc,MACvB,GAAM,WAAW,UAAY,EAAO,QAExC,EACA,eAAgB,CACd,EACA,IACG,CACH,EAAM,YAAc,EAAO,OAC7B,EACA,sBAAuB,CACrB,EACA,IACG,CACH,EAAM,mBAAqB,EAAO,OACpC,EACA,eAAgB,CACd,EACA,IACG,CACH,EAAM,YAAc,EAAO,OAC7B,EACA,gBAAiB,CACf,EACA,IACG,CACH,EAAM,aAAe,EAAO,OAC9B,EACA,uBAAwB,AAAC,GAA8B,CACrD,EAAM,sBAAwB,EAChC,EACA,eAAgB,CACd,EACA,IACG,CACH,EAAM,YAAc,EAAO,OAC7B,EACA,gCAAiC,CAC/B,EACA,IACG,CACH,EAAM,6BAA+B,EAAO,OAC9C,CACF,EACA,cAAe,AAAC,GAAY,CAC1B,EAAQ,QAAQ,EAAc,IACrB,CACR,EACD,EAAQ,QACN,EACA,CACE,EACA,IACG,CACH,EAAM,sBAAwB,GAC9B,EAAM,YAAc,EAAO,QAAQ,YACnC,EAAM,gBAAkB,EAAO,QAAQ,gBACvC,EAAkB,EAA4B,CAAC,CACjD,CACF,CACF,CACF,CAAC,EAEY,CA/Ib,AAgJE,iBAhJF,AAiJE,wBAjJF,AAkJE,iBAlJF,AAmJE,gBAnJF,AAoJE,yBApJF,AAqJE,iBArJF,AAsJE,yBAtJF,AAuJE,iBAvJF,AAwJE,kCAxJF,AAyJE,mBACE,EAAe,QAEZ,EAAQ,EAAe",
  "names": []
}
