{
  "version": 3,
  "sources": ["../../src/UI/ledger/LedgerLoginButton/LedgerLoginButton.tsx"],
  "sourcesContent": ["import React, { ReactNode } from 'react';\n\nimport { DataTestIdsEnum } from 'constants/index';\nimport { useGetModalLoginMethods } from 'hooks';\nimport { LoginButton } from 'UI/LoginButton/LoginButton';\n\nimport { OnProviderLoginType } from '../../../types';\nimport { WithClassnameType } from '../../types';\nimport { LedgerLoginContainer } from '../LedgerLoginContainer';\nimport { InnerLedgerComponentsClassesType } from '../LedgerLoginContainer/types';\n\nexport interface LedgerLoginButtonPropsType\n  extends WithClassnameType,\n    OnProviderLoginType {\n  buttonClassName?: string;\n  children?: ReactNode;\n  customSpinnerComponent?: ReactNode;\n  disabled?: boolean;\n  hideButtonWhenModalOpens?: boolean;\n  innerLedgerComponentsClasses?: InnerLedgerComponentsClassesType;\n  loginButtonText?: string;\n  modalClassName?: string;\n  onContentHide?: (props?: any) => void;\n  onContentShow?: (props?: any) => void;\n  onModalCloses?: (props?: any) => void;\n  onModalOpens?: (props?: any) => void;\n  showProgressBar?: boolean;\n  showScamPhishingAlert?: boolean;\n  wrapContentInsideModal?: boolean;\n}\n\nexport const LedgerLoginButton: (\n  props: LedgerLoginButtonPropsType\n) => JSX.Element = ({\n  buttonClassName = 'dapp-ledger-login-button',\n  callbackRoute,\n  children,\n  className = 'dapp-ledger-login',\n  customSpinnerComponent,\n  'data-testid': dataTestId = DataTestIdsEnum.ledgerLoginButton,\n  disabled,\n  hideButtonWhenModalOpens = false,\n  innerLedgerComponentsClasses,\n  loginButtonText = 'Ledger',\n  modalClassName,\n  nativeAuth,\n  onLoginRedirect,\n  onContentHide,\n  onContentShow,\n  onModalCloses,\n  onModalOpens,\n  showProgressBar = true,\n  showScamPhishingAlert = true,\n  token,\n  wrapContentInsideModal = true\n}) => {\n  const {\n    disabledConnectButton,\n    handleCloseModal,\n    handleOpenModal,\n    shouldRenderButton,\n    showContent,\n    showModal\n  } = useGetModalLoginMethods({\n    hideButtonWhenModalOpens,\n    onContentHide,\n    onContentShow,\n    onModalCloses,\n    onModalOpens,\n    token,\n    wrapContentInsideModal\n  });\n\n  return (\n    <>\n      {shouldRenderButton && (\n        <LoginButton\n          btnClassName={buttonClassName}\n          className={className}\n          data-testid={dataTestId}\n          disabled={disabled || disabledConnectButton}\n          onLogin={handleOpenModal}\n          text={loginButtonText}\n        >\n          {children}\n        </LoginButton>\n      )}\n\n      <LedgerLoginContainer\n        callbackRoute={callbackRoute}\n        className={modalClassName}\n        customSpinnerComponent={customSpinnerComponent}\n        innerLedgerComponentsClasses={innerLedgerComponentsClasses}\n        nativeAuth={nativeAuth}\n        onClose={handleCloseModal}\n        onLoginRedirect={onLoginRedirect}\n        showLoginContent={showContent}\n        showLoginModal={showModal}\n        showProgressBar={showProgressBar}\n        showScamPhishingAlert={showScamPhishingAlert}\n        token={token}\n        wrapContentInsideModal={wrapContentInsideModal}\n      />\n    </>\n  );\n};\n"],
  "mappings": "mMAAA,IAEA,IAFA,qBA+BO,GAAM,GAEM,CAAC,CAClB,kBAAkB,2BAClB,gBACA,WACA,YAAY,oBACZ,yBACA,cAAe,EAAa,oBAC5B,WACA,2BAA2B,GAC3B,+BACA,kBAAkB,SAClB,iBACA,aACA,kBACA,gBACA,gBACA,gBACA,eACA,kBAAkB,GAClB,wBAAwB,GACxB,QACA,yBAAyB,MACrB,CACJ,GAAM,CACJ,wBACA,mBACA,kBACA,qBACA,cACA,aACE,EAAwB,CAC1B,2BACA,gBACA,gBACA,gBACA,eACA,QACA,wBACF,CAAC,EAED,MACE,iCACG,GACC,gBAAC,GACC,aAAc,EACd,UAAW,EACX,cAAa,EACb,SAAU,GAAY,EACtB,QAAS,EACT,KAAM,GAEL,CACH,EAGF,gBAAC,GACC,cAAe,EACf,UAAW,EACX,uBAAwB,EACxB,6BAA8B,EAC9B,WAAY,EACZ,QAAS,EACT,gBAAiB,EACjB,iBAAkB,EAClB,eAAgB,EAChB,gBAAiB,EACjB,sBAAuB,EACvB,MAAO,EACP,uBAAwB,EAC1B,CACF,CAEJ",
  "names": []
}
