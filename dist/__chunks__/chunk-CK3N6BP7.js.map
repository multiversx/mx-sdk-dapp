{
  "version": 3,
  "sources": ["../../src/UI/Trim/Trim.tsx"],
  "sourcesContent": ["import React, { useEffect, useRef, useState } from 'react';\nimport classNames from 'classnames';\nimport { DataTestIdsEnum, ELLIPSIS } from 'constants/index';\nimport { withStyles, WithStylesImportType } from 'hocs/withStyles';\nimport { useDebounce } from 'hooks';\nimport { WithClassnameType } from '../types';\n\n// TODO: Rename to \"TrimPropsType\" when sdk-dapp@3.0.0\nexport interface TrimType extends WithClassnameType {\n  text: string;\n  color?: 'muted' | 'secondary' | string;\n}\n\nconst TrimComponent = ({\n  text,\n  className = 'dapp-trim',\n  'data-testid': dataTestId = DataTestIdsEnum['trim-text-component'],\n  color,\n  styles\n}: TrimType & WithStylesImportType) => {\n  const [debounce, setDebounce] = useState(0);\n  const [overflow, setOverflow] = useState(false);\n  const trimRef = useRef(document?.createElement('span'));\n  const hiddenTextRef = useRef(document?.createElement('span'));\n  const debounceTracker = useDebounce(debounce, 300);\n\n  const onOverflowChange = () => {\n    if (trimRef.current && hiddenTextRef.current) {\n      const diff =\n        hiddenTextRef.current.offsetWidth - trimRef.current.offsetWidth;\n      setOverflow(diff > 1);\n    }\n  };\n\n  const listener = () => {\n    setDebounce(debounce + 1);\n  };\n\n  const addWindowResizeListener = () => {\n    window?.addEventListener('resize', listener);\n\n    return () => {\n      window?.removeEventListener('resize', listener);\n    };\n  };\n\n  useEffect(addWindowResizeListener);\n\n  useEffect(() => {\n    onOverflowChange();\n  }, [debounceTracker]);\n\n  return (\n    <span\n      ref={trimRef}\n      className={classNames(styles?.trim, color, className, {\n        overflow: overflow\n      })}\n      data-testid={dataTestId}\n    >\n      <span ref={hiddenTextRef} className={styles?.hiddenTextRef}>\n        {text}\n      </span>\n\n      {overflow ? (\n        <>\n          <span className={styles?.left}>\n            <span>\n              {String(text).substring(0, Math.floor(text.length / 2))}\n            </span>\n          </span>\n\n          <span className={styles?.ellipsis}>{ELLIPSIS}</span>\n\n          <span className={styles?.right}>\n            <span>{String(text).substring(Math.ceil(text.length / 2))}</span>\n          </span>\n        </>\n      ) : (\n        <span>{text}</span>\n      )}\n    </span>\n  );\n};\n\nexport const Trim = withStyles(TrimComponent, {\n  ssrStyles: () => import('UI/Trim/trim.styles.scss'),\n  clientStyles: () => require('UI/Trim/trim.styles.scss').default\n});\n"],
  "mappings": "6NAAA,IAEA,IAFA,+DACA,0BAYA,GAAM,GAAgB,CAAC,CACrB,OACA,YAAY,YACZ,cAAe,EAAa,sBAC5B,QACA,YACqC,CACrC,GAAM,CAAC,EAAU,GAAe,EAAS,CAAC,EACpC,CAAC,EAAU,GAAe,EAAS,EAAK,EACxC,EAAU,EAAO,+BAAU,cAAc,OAAO,EAChD,EAAgB,EAAO,+BAAU,cAAc,OAAO,EACtD,EAAkB,EAAY,EAAU,GAAG,EAE3C,EAAmB,IAAM,CAC7B,GAAI,EAAQ,SAAW,EAAc,QAAS,CAC5C,GAAM,GACJ,EAAc,QAAQ,YAAc,EAAQ,QAAQ,YACtD,EAAY,EAAO,CAAC,CACtB,CACF,EAEM,EAAW,IAAM,CACrB,EAAY,EAAW,CAAC,CAC1B,EAUA,SARgC,IAC9B,sBAAQ,iBAAiB,SAAU,GAE5B,IAAM,CACX,qBAAQ,oBAAoB,SAAU,EACxC,EAG+B,EAEjC,EAAU,IAAM,CACd,EAAiB,CACnB,EAAG,CAAC,CAAe,CAAC,EAGlB,gBAAC,QACC,IAAK,EACL,UAAW,EAAW,iBAAQ,KAAM,EAAO,EAAW,CACpD,SAAU,CACZ,CAAC,EACD,cAAa,GAEb,gBAAC,QAAK,IAAK,EAAe,UAAW,iBAAQ,eAC1C,CACH,EAEC,EACC,gCACE,gBAAC,QAAK,UAAW,iBAAQ,MACvB,gBAAC,YACE,OAAO,CAAI,EAAE,UAAU,EAAG,KAAK,MAAM,EAAK,OAAS,CAAC,CAAC,CACxD,CACF,EAEA,gBAAC,QAAK,UAAW,iBAAQ,UAAW,CAAS,EAE7C,gBAAC,QAAK,UAAW,iBAAQ,OACvB,gBAAC,YAAM,OAAO,CAAI,EAAE,UAAU,KAAK,KAAK,EAAK,OAAS,CAAC,CAAC,CAAE,CAC5D,CACF,EAEA,gBAAC,YAAM,CAAK,CAEhB,CAEJ,EAEa,EAAO,EAAW,EAAe,CAC5C,UAAW,IAAM,OAAO,6BACxB,aAAc,IAAM,WAAoC,OAC1D,CAAC",
  "names": []
}
