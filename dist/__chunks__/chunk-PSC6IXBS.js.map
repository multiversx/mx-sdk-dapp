{
  "version": 3,
  "sources": ["../../src/UI/TransactionsTable/components/TransactionSender.tsx"],
  "sourcesContent": ["import React from 'react';\nimport classNames from 'classnames';\nimport { DataTestIdsEnum } from 'constants/index';\nimport { withStyles, WithStylesImportType } from 'hocs/withStyles';\nimport { TransactionDirectionEnum } from 'types/serverTransactions.types';\nimport { ExplorerLink } from 'UI/ExplorerLink';\nimport { WithTransactionType } from 'UI/types';\nimport { addressIsValid } from 'utils/account/addressIsValid';\nimport { AccountName } from './AccountName';\nimport { LockedTokenAddressIcon } from './LockedTokenAddressIcon';\nimport { ScAddressIcon } from './ScAddressIcon';\nimport { ShardSpan } from './ShardSpan';\n\nexport interface TransactionSenderPropsType extends WithTransactionType {\n  showLockedAccounts?: boolean;\n}\n\nexport const TransactionSenderComponent = ({\n  transaction,\n  showLockedAccounts,\n  globalStyles,\n  styles\n}: TransactionSenderPropsType & WithStylesImportType) => {\n  const directionOut =\n    transaction.transactionDetails.direction === TransactionDirectionEnum.OUT;\n\n  return (\n    <div\n      className={classNames(\n        globalStyles?.dFlex,\n        globalStyles?.alignItemsCenter,\n        styles?.transactionCell\n      )}\n      data-testid={DataTestIdsEnum.transactionSender}\n    >\n      {showLockedAccounts && (\n        <LockedTokenAddressIcon\n          address={transaction.sender}\n          tokenId={transaction.tokenIdentifier ?? ''}\n        />\n      )}\n\n      <ScAddressIcon initiator={transaction.sender} />\n\n      {directionOut ? (\n        <div\n          className={classNames(\n            globalStyles?.w100,\n            styles?.transactionCellOverflow,\n            styles?.transactionCellMargin\n          )}\n        >\n          <AccountName\n            address={transaction.sender}\n            assets={transaction.senderAssets}\n          />\n        </div>\n      ) : addressIsValid(transaction.sender) ? (\n        <ExplorerLink\n          page={transaction.links.senderLink ?? ''}\n          data-testid={DataTestIdsEnum.senderLink}\n          className={classNames(\n            globalStyles?.w100,\n            styles?.transactionCellOverflow,\n            styles?.transactionCellMargin,\n            styles?.transactionCellLink\n          )}\n        >\n          <AccountName\n            address={transaction.sender}\n            assets={transaction.senderAssets}\n          />\n        </ExplorerLink>\n      ) : (\n        <ShardSpan shard={transaction.sender} />\n      )}\n    </div>\n  );\n};\n\nexport const TransactionSender = withStyles(TransactionSenderComponent, {\n  ssrStyles: () =>\n    import('UI/TransactionsTable/components/transactionsTable.styles.scss'),\n  clientStyles: () =>\n    require('UI/TransactionsTable/components/transactionsTable.styles.scss')\n      .default\n});\n"],
  "mappings": "wcAAA,IAEA,IAFA,qBACA,0BAGA,IAGA,IAUO,GAAM,GAA6B,CAAC,CACzC,cACA,qBACA,eACA,YACuD,CAtBzD,QAuBE,GAAM,GACJ,EAAY,mBAAmB,YAAc,MAE/C,MACE,iBAAC,OACC,UAAW,EACT,iBAAc,MACd,iBAAc,iBACd,iBAAQ,eACV,EACA,cAAa,qBAEZ,GACC,gBAAC,GACC,QAAS,EAAY,OACrB,QAAS,KAAY,kBAAZ,OAA+B,GAC1C,EAGF,gBAAC,GAAc,UAAW,EAAY,OAAQ,EAE7C,EACC,gBAAC,OACC,UAAW,EACT,iBAAc,KACd,iBAAQ,wBACR,iBAAQ,qBACV,GAEA,gBAAC,GACC,QAAS,EAAY,OACrB,OAAQ,EAAY,aACtB,CACF,EACE,EAAe,EAAY,MAAM,EACnC,gBAAC,GACC,KAAM,KAAY,MAAM,aAAlB,OAAgC,GACtC,cAAa,aACb,UAAW,EACT,iBAAc,KACd,iBAAQ,wBACR,iBAAQ,sBACR,iBAAQ,mBACV,GAEA,gBAAC,GACC,QAAS,EAAY,OACrB,OAAQ,EAAY,aACtB,CACF,EAEA,gBAAC,GAAU,MAAO,EAAY,OAAQ,CAE1C,CAEJ,EAEa,EAAoB,EAAW,EAA4B,CACtE,UAAW,IACT,OAAO,kEACT,aAAc,IACZ,WACG,OACP,CAAC",
  "names": []
}
