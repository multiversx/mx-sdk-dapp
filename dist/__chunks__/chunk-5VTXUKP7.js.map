{
  "version": 3,
  "sources": ["../../src/utils/transactions/getInterpretedTransaction/helpers/getTransactionValue/getTransactionValue.ts"],
  "sourcesContent": ["import { DECIMALS } from 'constants/index';\nimport { NftEnumType } from 'types/tokens.types';\n\nimport { getTransactionTokens } from 'utils/transactions/getInterpretedTransaction/helpers/getTransactionTokens';\nimport {\n  EgldValueDataType,\n  NFTValueDataType,\n  TokenValueDataType\n} from 'utils/transactions/getInterpretedTransaction/helpers/types';\nimport { getTransactionActionNftText } from 'utils/transactions/transactionInfoHelpers/getTransactionActionNftText';\nimport { getTransactionActionTokenText } from 'utils/transactions/transactionInfoHelpers/getTransactionActionTokenText';\n\nimport { WithTransactionType } from '../../../../../UI/types';\nimport {\n  ACTIONS_WITH_EGLD_VALUE,\n  ACTIONS_WITH_MANDATORY_OPERATIONS,\n  ACTIONS_WITH_VALUE_IN_ACTION_FIELD,\n  ACTIONS_WITH_VALUE_IN_DATA_FIELD\n} from '../../constants';\n\nimport {\n  getValueFromActions,\n  getValueFromDataField,\n  getValueFromOperations\n} from './helpers';\nimport { getEgldValueData } from './helpers/getEgldValueData';\nimport { getTitleText } from './helpers/getTitleText';\n\nexport interface GetTransactionValueReturnType {\n  egldValueData?: EgldValueDataType;\n  tokenValueData?: TokenValueDataType;\n  nftValueData?: NFTValueDataType;\n}\n\nexport interface GetTransactionValueType extends WithTransactionType {\n  hideMultipleBadge?: boolean;\n}\n\nexport const getTransactionValue = ({\n  transaction,\n  hideMultipleBadge\n}: GetTransactionValueType): GetTransactionValueReturnType => {\n  if (transaction.action) {\n    if (ACTIONS_WITH_EGLD_VALUE.includes(transaction.action.name)) {\n      return getEgldValueData(transaction.value);\n    }\n\n    if (ACTIONS_WITH_VALUE_IN_DATA_FIELD.includes(transaction.action.name)) {\n      return getValueFromDataField(transaction);\n    }\n\n    if (ACTIONS_WITH_MANDATORY_OPERATIONS.includes(transaction.action.name)) {\n      return getValueFromOperations(transaction);\n    }\n\n    if (ACTIONS_WITH_VALUE_IN_ACTION_FIELD.includes(transaction.action.name)) {\n      return getValueFromActions(transaction);\n    }\n\n    const transactionTokens = getTransactionTokens(transaction);\n\n    if (transactionTokens.length) {\n      const txToken = transactionTokens[0];\n      const isNft = Object.values(NftEnumType).includes(\n        txToken.type as NftEnumType\n      );\n\n      const hasTitleText = !hideMultipleBadge && transactionTokens.length > 1;\n      const titleText = hasTitleText ? getTitleText(transactionTokens) : '';\n\n      if (isNft) {\n        const {\n          badgeText,\n          tokenFormattedAmount,\n          tokenExplorerLink,\n          tokenLinkText\n        } = getTransactionActionNftText({ token: txToken });\n\n        return {\n          nftValueData: {\n            badgeText,\n            tokenFormattedAmount,\n            tokenExplorerLink,\n            tokenLinkText,\n            transactionTokens,\n            token: txToken,\n            value: tokenFormattedAmount != null ? txToken.value : null,\n            decimals: tokenFormattedAmount != null ? txToken.decimals : null,\n            titleText\n          }\n        };\n      }\n\n      const {\n        tokenExplorerLink,\n        showFormattedAmount,\n        tokenFormattedAmount,\n        tokenLinkText,\n        token\n      } = getTransactionActionTokenText({\n        token: txToken\n      });\n\n      return {\n        tokenValueData: {\n          tokenExplorerLink,\n          showFormattedAmount,\n          tokenFormattedAmount,\n          tokenLinkText,\n          transactionTokens,\n          token,\n          value: txToken.value,\n          decimals: txToken.decimals ?? DECIMALS,\n          titleText\n        }\n      };\n    }\n  }\n\n  return getEgldValueData(transaction.value);\n};\n"],
  "mappings": "ulBAAA,GAsCa,IAtCb,iBACA,IAEA,IAMA,IACA,IAGA,IAOA,IAKA,IACA,IAYO,AAAM,GAAsB,CAAC,CAClC,cACA,uBAC4D,CAzC9D,MA0CE,GAAI,EAAY,OAAQ,CACtB,GAAI,EAAwB,SAAS,EAAY,OAAO,IAAI,EAC1D,MAAO,GAAiB,EAAY,KAAK,EAG3C,GAAI,EAAiC,SAAS,EAAY,OAAO,IAAI,EACnE,MAAO,GAAsB,CAAW,EAG1C,GAAI,EAAkC,SAAS,EAAY,OAAO,IAAI,EACpE,MAAO,GAAuB,CAAW,EAG3C,GAAI,EAAmC,SAAS,EAAY,OAAO,IAAI,EACrE,MAAO,GAAoB,CAAW,EAGxC,GAAM,GAAoB,EAAqB,CAAW,EAE1D,GAAI,EAAkB,OAAQ,CAC5B,GAAM,GAAU,EAAkB,GAC5B,EAAQ,OAAO,OAAO,CAAW,EAAE,SACvC,EAAQ,IACV,EAGM,EAAY,AADG,CAAC,GAAqB,EAAkB,OAAS,EACrC,EAAa,CAAiB,EAAI,GAEnE,GAAI,EAAO,CACT,GAAM,CACJ,YACA,uBACA,oBACA,iBACE,EAA4B,CAAE,MAAO,CAAQ,CAAC,EAElD,MAAO,CACL,aAAc,CACZ,YACA,uBACA,oBACA,gBACA,oBACA,MAAO,EACP,MAAO,GAAwB,KAAO,EAAQ,MAAQ,KACtD,SAAU,GAAwB,KAAO,EAAQ,SAAW,KAC5D,WACF,CACF,CACF,CAEA,GAAM,CACJ,oBACA,sBACA,uBACA,gBACA,SACE,EAA8B,CAChC,MAAO,CACT,CAAC,EAED,MAAO,CACL,eAAgB,CACd,oBACA,sBACA,uBACA,gBACA,oBACA,QACA,MAAO,EAAQ,MACf,SAAU,KAAQ,WAAR,OAAoB,EAC9B,WACF,CACF,CACF,CACF,CAEA,MAAO,GAAiB,EAAY,KAAK,CAC3C",
  "names": []
}
