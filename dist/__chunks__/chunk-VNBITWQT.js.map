{
  "version": 3,
  "sources": ["../../src/utils/account/signMessage.ts"],
  "sourcesContent": ["import { Message, Address } from '@multiversx/sdk-core';\nimport { CrossWindowProvider } from 'lib/sdkWebWalletCrossWindowProvider';\nimport { getAccountProvider, getProviderType } from 'providers';\nimport { LoginMethodsEnum } from 'types';\nimport { getAddress } from 'utils/account/getAddress';\nimport { addOriginToLocationPath } from 'utils/window';\n\nexport interface SignMessageType {\n  message: string;\n  callbackRoute?: string;\n  options?: {\n    hasConsentPopup?: boolean;\n  };\n}\n\nexport const signMessage = async ({\n  message,\n  callbackRoute,\n  options\n}: SignMessageType) => {\n  const address = await getAddress();\n  const provider = getAccountProvider();\n  const providerType = getProviderType(provider);\n\n  const callbackUrl = addOriginToLocationPath(callbackRoute);\n\n  const signableMessage = new Message({\n    address: new Address(address),\n    data: Buffer.from(message)\n  });\n\n  if (\n    options?.hasConsentPopup &&\n    providerType === LoginMethodsEnum.crossWindow\n  ) {\n    (provider as unknown as CrossWindowProvider).setShouldShowConsentPopup(\n      true\n    );\n  }\n\n  const signedMessage = await provider.signMessage(signableMessage, {\n    callbackUrl: encodeURIComponent(callbackUrl)\n  });\n\n  return signedMessage;\n};\n"],
  "mappings": "iSAAA,gEAGA,IAEA,IAUO,GAAM,GAAc,AAAO,GAIX,UAJW,GAIX,UAJW,CAChC,UACA,gBACA,WACqB,CACrB,GAAM,GAAU,KAAM,GAAW,EAC3B,EAAW,EAAmB,EAC9B,EAAe,EAAgB,CAAQ,EAEvC,EAAc,EAAwB,CAAa,EAEnD,EAAkB,GAAI,GAAQ,CAClC,QAAS,GAAI,GAAQ,CAAO,EAC5B,KAAM,SAAO,KAAK,CAAO,CAC3B,CAAC,EAED,MACE,kBAAS,kBACT,IAAiB,eAEhB,EAA4C,0BAC3C,EACF,EAGoB,KAAM,GAAS,YAAY,EAAiB,CAChE,YAAa,mBAAmB,CAAW,CAC7C,CAAC,CAGH",
  "names": []
}
