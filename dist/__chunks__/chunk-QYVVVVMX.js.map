{
  "version": 3,
  "sources": ["../../src/providers/webviewProvider/requestMethods.ts", "../../src/providers/webviewProvider/webviewProvider.ts"],
  "sourcesContent": ["import { PlatformsEnum, WebViewProviderRequestEnums } from 'types/index';\nimport { getTargetOrigin } from './webviewProvider';\n\nexport type CustomRequestPayloadType = {\n  request: { method: string; params: any };\n};\n\nexport const requestMethods = {\n  signTransactions: {\n    [PlatformsEnum.ios]: (transactions: any) =>\n      (window as any).webkit.messageHandlers.signTransactions.postMessage(\n        transactions,\n        getTargetOrigin()\n      ),\n    [PlatformsEnum.reactNative]: (message: any) =>\n      (window as any)?.ReactNativeWebView.postMessage(\n        JSON.stringify({\n          type: WebViewProviderRequestEnums.signTransactionsRequest,\n          message\n        })\n      ),\n\n    [PlatformsEnum.web]: (message: any) =>\n      (window as any)?.postMessage(\n        JSON.stringify({\n          type: WebViewProviderRequestEnums.signTransactionsRequest,\n          message\n        }),\n        getTargetOrigin()\n      )\n  },\n  sendCustomRequest: {\n    [PlatformsEnum.ios]: (payload: CustomRequestPayloadType) =>\n      (window as any).webkit.messageHandlers.signMessage.postMessage({\n        type: payload.request.method,\n        payload: payload.request.params\n      }),\n    [PlatformsEnum.reactNative]: (payload: CustomRequestPayloadType) =>\n      (window as any)?.ReactNativeWebView.postMessage(\n        JSON.stringify({\n          type: payload.request.method,\n          payload: payload.request.params\n        })\n      ),\n    [PlatformsEnum.web]: (payload: CustomRequestPayloadType) =>\n      (window as any)?.postMessage(\n        JSON.stringify({\n          type: payload.request.method,\n          payload: payload.request.params\n        }),\n        getTargetOrigin()\n      )\n  },\n\n  signMessage: {\n    [PlatformsEnum.ios]: (message: string) =>\n      (window as any).webkit.messageHandlers.signMessage.postMessage(message),\n    [PlatformsEnum.reactNative]: (message: any) =>\n      (window as any)?.ReactNativeWebView.postMessage(\n        JSON.stringify({\n          type: WebViewProviderRequestEnums.signMessageRequest,\n          message\n        })\n      ),\n    [PlatformsEnum.web]: (message: any) =>\n      (window as any)?.postMessage(\n        JSON.stringify({\n          type: WebViewProviderRequestEnums.signMessageRequest,\n          message\n        }),\n        getTargetOrigin()\n      )\n  },\n  logout: {\n    [PlatformsEnum.ios]: () =>\n      (window as any).webkit.messageHandlers.logout.postMessage(),\n    [PlatformsEnum.reactNative]: () =>\n      (window as any)?.ReactNativeWebView.postMessage(\n        JSON.stringify({\n          type: WebViewProviderRequestEnums.logoutRequest\n        })\n      ),\n    [PlatformsEnum.web]: () =>\n      (window as any)?.postMessage(\n        JSON.stringify({\n          type: WebViewProviderRequestEnums.logoutRequest\n        }),\n        getTargetOrigin()\n      )\n  },\n  login: {\n    [PlatformsEnum.ios]: () =>\n      (window as any).webkit.messageHandlers.login.postMessage(),\n    [PlatformsEnum.reactNative]: () =>\n      (window as any)?.ReactNativeWebView.postMessage(\n        JSON.stringify({\n          type: WebViewProviderRequestEnums.loginRequest\n        })\n      ),\n    [PlatformsEnum.web]: () =>\n      (window as any)?.postMessage(\n        JSON.stringify({\n          type: WebViewProviderRequestEnums.loginRequest\n        }),\n        getTargetOrigin()\n      )\n  }\n};\n", "import { Transaction } from '@multiversx/sdk-core';\nimport { loginWithNativeAuthToken } from 'services/nativeAuth/helpers/loginWithNativeAuthToken';\nimport { PlatformsEnum, WebViewProviderResponseEnums } from 'types/index';\nimport { isWindowAvailable } from 'utils/isWindowAvailable';\nimport { detectCurrentPlatform } from 'utils/platform/detectCurrentPlatform';\nimport { setExternalProviderAsAccountProvider } from '../accountProvider';\nimport { requestMethods } from './requestMethods';\n\nconst notInitializedError = (caller: string) => () => {\n  throw new Error(`Unable to perform ${caller}, Provider not initialized`);\n};\n\nconst currentPlatform = detectCurrentPlatform();\nexport const getTargetOrigin = () => {\n  return isWindowAvailable() ? window?.parent?.origin ?? '*' : '*';\n};\n\nconst messageType = 'message';\n\nconst handleWaitForMessage = (cb: (eventData: any) => void) => {\n  const handleMessageReceived = (event: any) => {\n    let eventData = event.data;\n    if (\n      event.target.origin != getTargetOrigin() &&\n      currentPlatform != PlatformsEnum.reactNative\n    ) {\n      return;\n    }\n    try {\n      eventData = JSON.parse(eventData);\n      cb(eventData);\n    } catch (err) {\n      console.error('error parsing response');\n    }\n  };\n  if (document) {\n    document.addEventListener(messageType, handleMessageReceived);\n  }\n  if (window) {\n    window.addEventListener(messageType, handleMessageReceived);\n  }\n};\n\nexport const webviewProvider: any = {\n  init: async () => {\n    return true;\n  },\n  login: async () => {\n    return true;\n  },\n  //relogin is called instead of logout if the user is not actively requiring to be logged out\n  //for example, when the token expires, and this will regenerate the token, for a seamless experience\n  relogin: async () => {\n    try {\n      requestMethods.login[currentPlatform]();\n      const waitForNewToken: Promise<string> = new Promise(\n        (resolve, reject) => {\n          function handleTokenReceived(eventData: any) {\n            const { message, type } = eventData;\n            if (type === WebViewProviderResponseEnums.loginResponse) {\n              try {\n                const { accessToken, error } = message;\n                if (!error) {\n                  loginWithNativeAuthToken(accessToken);\n                  setExternalProviderAsAccountProvider();\n                  resolve(accessToken);\n                } else {\n                  reject(error);\n                }\n              } catch (err) {\n                reject('Unable to login');\n              }\n            }\n            if (document) {\n              document.removeEventListener(messageType, handleTokenReceived);\n            }\n          }\n          handleWaitForMessage(handleTokenReceived);\n        }\n      );\n      return await waitForNewToken;\n    } catch (err) {\n      console.error('error logging in', err);\n      throw err;\n    }\n  },\n  logout: () => {\n    requestMethods.logout[currentPlatform]();\n    return new Promise((resolve) => {\n      resolve(true);\n    });\n  },\n  getAddress: notInitializedError('getAddress'),\n  isInitialized: () => true,\n  isConnected: async () => true,\n  sendTransaction: notInitializedError('sendTransaction'),\n  sendCustomRequest: async (payload: {\n    request: { method: string; params: any };\n  }) => {\n    requestMethods.sendCustomRequest[currentPlatform](payload);\n  },\n  signMessage: async (message: string) => {\n    try {\n      requestMethods.signMessage[currentPlatform](message);\n      const waitForSignedMessageResponse: Promise<string> = new Promise(\n        (resolve, reject) => {\n          (window as any).signMessageResponse = (\n            signedMessage: string,\n            error: string\n          ) => {\n            if (error) {\n              reject(error);\n              (window as any).signMessageResponse = null;\n              return;\n            }\n            resolve(signedMessage);\n            (window as any).signMessageResponse = null;\n          };\n\n          function handleSignMessageResponse(eventData: any) {\n            const { message, type } = eventData;\n            if (\n              type === WebViewProviderResponseEnums.signMessageResponse &&\n              message != null\n            ) {\n              const { signedMessage, error } = message;\n\n              if (!error) {\n                resolve(signedMessage);\n              } else {\n                reject(error);\n              }\n            }\n            document?.removeEventListener(\n              messageType,\n              handleSignMessageResponse\n            );\n          }\n          handleWaitForMessage(handleSignMessageResponse);\n        }\n      );\n      return await waitForSignedMessageResponse;\n    } catch (err) {\n      console.error('error sending transaction', err);\n      throw err;\n    }\n  },\n  signTransactions: async (transactions: Transaction[]) => {\n    try {\n      const plainTransactions = transactions.map((tx) => tx.toPlainObject());\n      requestMethods.signTransactions[currentPlatform](plainTransactions);\n      const waitForSignedTransactionsResponse: Promise<Transaction[]> =\n        new Promise((resolve, reject) => {\n          (window as any).transactionsSigned = (txs: any, error: string) => {\n            txs = JSON.parse(txs);\n            if (error) {\n              reject(error);\n              (window as any).transactionsSigned = null;\n              return;\n            }\n            resolve(txs.map((tx: any) => Transaction.fromPlainObject(tx)));\n            (window as any).transactionsSigned = null;\n          };\n\n          function handleSignTransactionResponse(eventData: any) {\n            const { message, type } = eventData;\n            if (\n              type === WebViewProviderResponseEnums.signTransactionsResponse\n            ) {\n              const { transactions, error } = message;\n\n              try {\n                if (!error) {\n                  resolve(\n                    transactions.map((tx: any) =>\n                      Transaction.fromPlainObject(tx)\n                    )\n                  );\n                } else {\n                  reject(error);\n                }\n              } catch (err) {\n                reject('Unable to sign');\n              }\n            }\n            if (document) {\n              document.removeEventListener(\n                messageType,\n                handleSignTransactionResponse\n              );\n            }\n          }\n          handleWaitForMessage(handleSignTransactionResponse);\n        });\n      return await waitForSignedTransactionsResponse;\n    } catch (err) {\n      console.error('error sending transaction', err);\n      throw err;\n    }\n  },\n  signTransaction: async function (transaction: Transaction[]) {\n    const response = await this.signTransactions([transaction]);\n    return response[0];\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
