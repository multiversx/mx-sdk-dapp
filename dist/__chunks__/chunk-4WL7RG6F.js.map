{
  "version": 3,
  "sources": ["../../src/reduxStore/slices/toastsSlice.ts"],
  "sourcesContent": ["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { REHYDRATE } from 'redux-persist';\nimport { ToastsEnum } from 'types';\nimport { CustomToastType, TransactionToastType } from 'types/toasts.types';\nimport { getUnixTimestamp } from 'utils/dateTime/getUnixTimestamp';\nimport { logoutAction } from '../commonActions';\n\nexport interface ToastsSliceState {\n  customToasts: CustomToastType[];\n  transactionToasts: TransactionToastType[];\n}\n\nconst initialState: ToastsSliceState = {\n  customToasts: [],\n  transactionToasts: []\n};\n\nexport const toastsSlice = createSlice({\n  name: 'toastsSlice',\n  initialState,\n  reducers: {\n    addCustomToast: (\n      state: ToastsSliceState,\n      action: PayloadAction<CustomToastType>\n    ) => {\n      const toastId =\n        action.payload.toastId ||\n        `custom-toast-${state.customToasts.length + 1}`;\n\n      const existingToastIndex = state.customToasts.findIndex(\n        (toast) => toast.toastId === toastId\n      );\n\n      if (existingToastIndex !== -1) {\n        state.customToasts[existingToastIndex] = {\n          ...state.customToasts[existingToastIndex],\n          ...action.payload,\n          type: ToastsEnum.custom,\n          toastId\n        } as CustomToastType;\n        return;\n      }\n\n      state.customToasts.push({\n        ...action.payload,\n        type: ToastsEnum.custom,\n        toastId\n      });\n    },\n\n    removeCustomToast: (\n      state: ToastsSliceState,\n      action: PayloadAction<string>\n    ) => {\n      state.customToasts = state.customToasts.filter(\n        (toast) => toast.toastId !== action.payload\n      );\n    },\n\n    addTransactionToast: (\n      state: ToastsSliceState,\n      action: PayloadAction<string>\n    ) => {\n      state.transactionToasts.push({\n        type: ToastsEnum.transaction,\n        startTimestamp: getUnixTimestamp(),\n        toastId:\n          action.payload || `custom-toast-${state.transactionToasts.length + 1}`\n      });\n    },\n    removeTransactionToast: (\n      state: ToastsSliceState,\n      action: PayloadAction<string>\n    ) => {\n      state.transactionToasts = state.transactionToasts.filter((toast) => {\n        return toast.toastId !== action.payload;\n      });\n    }\n  },\n\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n    builder.addCase(REHYDRATE, (state, action: any) => {\n      const excludeComponentToasts =\n        action.customToasts?.filter(\n          (toast: CustomToastType) => !('component' in toast)\n        ) ?? [];\n      state.customToasts = excludeComponentToasts;\n    });\n  }\n});\n\nexport const {\n  addCustomToast,\n  removeCustomToast,\n  addTransactionToast,\n  removeTransactionToast\n} = toastsSlice.actions;\n\nexport default toastsSlice.reducer;\n"],
  "mappings": "mMAAA,+CACA,0CADA,GAYM,GAKO,EA8EX,EACA,EACA,EACA,EAGK,EArGP,aAEA,IAEA,IACA,IAOA,AAAM,EAAiC,CACrC,aAAc,CAAC,EACf,kBAAmB,CAAC,CACtB,EAEa,EAAc,EAAY,CACrC,KAAM,cACN,eACA,SAAU,CACR,eAAgB,CACd,EACA,IACG,CACH,GAAM,GACJ,EAAO,QAAQ,SACf,gBAAgB,EAAM,aAAa,OAAS,IAExC,EAAqB,EAAM,aAAa,UAC5C,AAAC,GAAU,EAAM,UAAY,CAC/B,EAEA,GAAI,IAAuB,GAAI,CAC7B,EAAM,aAAa,GAAsB,SACpC,EAAM,aAAa,IACnB,EAAO,SAF6B,CAGvC,KAAM,SACN,SACF,GACA,MACF,CAEA,EAAM,aAAa,KAAK,OACnB,EAAO,SADY,CAEtB,KAAM,SACN,SACF,EAAC,CACH,EAEA,kBAAmB,CACjB,EACA,IACG,CACH,EAAM,aAAe,EAAM,aAAa,OACtC,AAAC,GAAU,EAAM,UAAY,EAAO,OACtC,CACF,EAEA,oBAAqB,CACnB,EACA,IACG,CACH,EAAM,kBAAkB,KAAK,CAC3B,KAAM,cACN,eAAgB,EAAiB,EACjC,QACE,EAAO,SAAW,gBAAgB,EAAM,kBAAkB,OAAS,GACvE,CAAC,CACH,EACA,uBAAwB,CACtB,EACA,IACG,CACH,EAAM,kBAAoB,EAAM,kBAAkB,OAAO,AAAC,GACjD,EAAM,UAAY,EAAO,OACjC,CACH,CACF,EAEA,cAAe,AAAC,GAAY,CAC1B,EAAQ,QAAQ,EAAc,IACrB,CACR,EACD,EAAQ,QAAQ,EAAW,CAAC,EAAO,IAAgB,CApFvD,QAqFM,GAAM,GACJ,QAAO,eAAP,cAAqB,OACnB,AAAC,GAA2B,CAAE,cAAe,OAD/C,OAEK,CAAC,EACR,EAAM,aAAe,CACvB,CAAC,CACH,CACF,CAAC,EAEY,CA9Fb,AA+FE,iBA/FF,AAgGE,oBAhGF,AAiGE,sBAjGF,AAkGE,0BACE,EAAY,QAET,EAAQ,EAAY",
  "names": []
}
