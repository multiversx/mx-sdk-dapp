{
  "version": 3,
  "sources": ["../../src/UI/extension/ExtensionLoginButton/ExtensionLoginButton.tsx"],
  "sourcesContent": ["import React, { ReactNode } from 'react';\nimport classNames from 'classnames';\nimport {\n  CHROME_EXTENSION_LINK,\n  DataTestIdsEnum,\n  FIREFOX_ADDON_LINK\n} from 'constants/index';\nimport { withStyles, WithStylesImportType } from 'hocs/withStyles';\nimport { useExtensionLogin } from 'hooks/login/useExtensionLogin';\nimport { getIsNativeAuthSingingForbidden } from 'services/nativeAuth/helpers';\nimport { LoginButton } from 'UI/LoginButton/LoginButton';\nimport { isWindowAvailable } from 'utils/isWindowAvailable';\nimport { OnProviderLoginType } from '../../../types';\nimport { WithClassnameType } from '../../types';\nimport { getIsExtensionAvailable } from '../helpers';\n\nexport interface ExtensionLoginButtonPropsType\n  extends WithClassnameType,\n    OnProviderLoginType {\n  children?: ReactNode;\n  buttonClassName?: string;\n  loginButtonText?: string;\n  disabled?: boolean;\n}\n\nconst ExtensionLoginButtonComponent: (\n  props: ExtensionLoginButtonPropsType & WithStylesImportType\n) => JSX.Element = ({\n  token,\n  className = 'dapp-extension-login',\n  children,\n  callbackRoute,\n  buttonClassName = 'dapp-default-login-button',\n  nativeAuth,\n  loginButtonText = 'MultiversX DeFi Wallet',\n  onLoginRedirect,\n  disabled,\n  'data-testid': dataTestId = DataTestIdsEnum.extensionLoginButton,\n  globalStyles,\n  styles\n}) => {\n  const [onInitiateLogin] = useExtensionLogin({\n    callbackRoute,\n    token,\n    onLoginRedirect,\n    nativeAuth\n  });\n  const disabledConnectButton = getIsNativeAuthSingingForbidden(token);\n  const isFirefox =\n    isWindowAvailable() && navigator.userAgent.indexOf('Firefox') != -1;\n  const classes = {\n    wrapper: classNames(\n      globalStyles?.btn,\n      globalStyles?.btnPrimary,\n      globalStyles?.px4,\n      globalStyles?.m1,\n      globalStyles?.mx3,\n      styles?.noExtensionButtonWrapper,\n      {\n        [buttonClassName]: buttonClassName != null\n      },\n      className\n    ),\n    loginText: classNames(styles?.loginText, styles?.noExtensionButtonContent),\n    wrapperClassName: className\n  };\n\n  const handleLogin = () => {\n    onInitiateLogin();\n  };\n\n  return !getIsExtensionAvailable() ? (\n    <a\n      rel='noreferrer'\n      href={isFirefox ? FIREFOX_ADDON_LINK : CHROME_EXTENSION_LINK}\n      target='_blank'\n      className={classes.wrapper}\n    >\n      {children || <span className={classes.loginText}>{loginButtonText}</span>}\n    </a>\n  ) : (\n    <LoginButton\n      onLogin={handleLogin}\n      className={className}\n      btnClassName={buttonClassName}\n      text={loginButtonText}\n      disabled={disabled || disabledConnectButton}\n      data-testid={dataTestId}\n    >\n      {children}\n    </LoginButton>\n  );\n};\n\nexport const ExtensionLoginButton = withStyles(ExtensionLoginButtonComponent, {\n  ssrStyles: () =>\n    import(\n      'UI/extension/ExtensionLoginButton/extensionLoginButton.styles.scss'\n    ),\n  clientStyles: () =>\n    require('UI/extension/ExtensionLoginButton/extensionLoginButton.styles.scss')\n      .default\n});\n"],
  "mappings": "4aAAA,IAEA,IAFA,qBACA,0BAUA,IAcA,GAAM,GAEa,CAAC,CAClB,QACA,YAAY,uBACZ,WACA,gBACA,kBAAkB,4BAClB,aACA,kBAAkB,yBAClB,kBACA,WACA,cAAe,EAAa,uBAC5B,eACA,YACI,CACJ,GAAM,CAAC,GAAmB,EAAkB,CAC1C,gBACA,QACA,kBACA,YACF,CAAC,EACK,EAAwB,EAAgC,CAAK,EAC7D,EACJ,EAAkB,GAAK,UAAU,UAAU,QAAQ,SAAS,GAAK,GAC7D,EAAU,CACd,QAAS,EACP,iBAAc,IACd,iBAAc,WACd,iBAAc,IACd,iBAAc,GACd,iBAAc,IACd,iBAAQ,yBACR,CACE,CAAC,GAAkB,GAAmB,IACxC,EACA,CACF,EACA,UAAW,EAAW,iBAAQ,UAAW,iBAAQ,wBAAwB,EACzE,iBAAkB,CACpB,EAEM,EAAc,IAAM,CACxB,EAAgB,CAClB,EAEA,MAAO,AAAC,GAAwB,EAU9B,gBAAC,GACC,QAAS,EACT,UAAW,EACX,aAAc,EACd,KAAM,EACN,SAAU,GAAY,EACtB,cAAa,GAEZ,CACH,EAlBA,gBAAC,KACC,IAAI,aACJ,KAAM,EAAY,EAAqB,EACvC,OAAO,SACP,UAAW,EAAQ,SAElB,GAAY,gBAAC,QAAK,UAAW,EAAQ,WAAY,CAAgB,CACpE,CAaJ,EAEa,EAAuB,EAAW,EAA+B,CAC5E,UAAW,IACT,OACE,uEAEJ,aAAc,IACZ,WACG,OACP,CAAC",
  "names": []
}
