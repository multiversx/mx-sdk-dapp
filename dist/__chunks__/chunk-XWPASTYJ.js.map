{
  "version": 3,
  "sources": ["../../src/components/TransactionSender/TransactionSender.ts"],
  "sourcesContent": ["import { useCallback, useEffect, useRef } from 'react';\nimport {\n  sendSignedTransactions as defaultSendSignedTxs,\n  sendSignedBatchTransactions as defaultSendSignedBatchTxs\n} from 'apiCalls/transactions';\nimport { useDispatch, useSelector } from 'reduxStore/DappProviderContext';\nimport {\n  accountSelector,\n  signedTransactionsSelector\n} from 'reduxStore/selectors';\nimport {\n  clearAllTransactionsToSign,\n  setTxSubmittedModal,\n  updateSignedTransactions\n} from 'reduxStore/slices';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums.types';\nimport { SignedTransactionsBodyType } from 'types/transactions.types';\nimport { setNonce } from 'utils/account/setNonce';\nimport { safeRedirect } from 'utils/redirect';\nimport { removeTransactionParamsFromUrl } from 'utils/transactions/removeTransactionParamsFromUrl';\nimport { TransactionSenderType } from './types/transactionSender.types';\nimport { invokeSendTransactions } from './utils/invokeSendTransactions';\n\n/**\n * Function used to redirect after sending because of Safari cancelling async requests on page change\n */\nconst optionalRedirect = (sessionInformation: SignedTransactionsBodyType) => {\n  const redirectRoute = sessionInformation.redirectRoute;\n  if (redirectRoute) {\n    safeRedirect({ url: redirectRoute });\n  }\n};\n\nexport const TransactionSender = ({\n  sendSignedTransactionsAsync = defaultSendSignedTxs,\n  sendSignedBatchTransactionsAsync = defaultSendSignedBatchTxs\n}: TransactionSenderType) => {\n  const dispatch = useDispatch();\n\n  const { nonce } = useSelector(accountSelector);\n  const signedTransactions = useSelector(signedTransactionsSelector);\n\n  const sendingRef = useRef(false);\n  const sentSessionIds = useRef<string[]>([]);\n\n  const clearSignInfo = () => {\n    dispatch(clearAllTransactionsToSign());\n    sendingRef.current = false;\n  };\n\n  const handleSendTransactions = useCallback(async () => {\n    const sessionIds = Object.keys(signedTransactions);\n\n    for (const sessionId of sessionIds) {\n      const session = signedTransactions[sessionId];\n      const skipSending =\n        session?.customTransactionInformation?.signWithoutSending;\n\n      if (!session || !sessionId || skipSending) {\n        optionalRedirect(session);\n        continue;\n      }\n\n      if (sentSessionIds.current.includes(sessionId)) {\n        continue;\n      }\n\n      const { transactions } = session;\n      if (!transactions) {\n        continue;\n      }\n\n      const isSessionIdSigned =\n        session.status === TransactionBatchStatusesEnum.signed;\n      const shouldSendCurrentSession = isSessionIdSigned && !sendingRef.current;\n\n      if (!shouldSendCurrentSession) {\n        continue;\n      }\n\n      sendingRef.current = true;\n      sentSessionIds.current.push(sessionId);\n\n      const responseHashes = await invokeSendTransactions({\n        session,\n        sessionId,\n        clearSignInfo,\n        sendSignedTransactionsAsync,\n        sendSignedBatchTransactionsAsync\n      });\n\n      const newStatus = TransactionServerStatusesEnum.pending;\n      const newTransactions = transactions.map((transaction) => {\n        if (responseHashes?.includes(transaction.hash)) {\n          return { ...transaction, status: newStatus };\n        }\n\n        return transaction;\n      });\n\n      const submittedModalPayload = {\n        sessionId,\n        submittedMessage: 'submitted'\n      };\n\n      dispatch(setTxSubmittedModal(submittedModalPayload));\n      dispatch(\n        updateSignedTransactions({\n          sessionId,\n          status: TransactionBatchStatusesEnum.sent,\n          transactions: newTransactions\n        })\n      );\n      clearSignInfo();\n      setNonce(nonce + transactions.length);\n\n      optionalRedirect(session);\n      const [transaction] = transactions;\n      removeTransactionParamsFromUrl({\n        transaction\n      });\n\n      sendingRef.current = false;\n    }\n  }, [signedTransactions, nonce]);\n\n  useEffect(() => {\n    handleSendTransactions();\n  }, [signedTransactions, handleSendTransactions]);\n\n  return null;\n};\n"],
  "mappings": "mmBAAA,mEAMA,IAIA,IAKA,IAMA,IACA,IAOA,GAAM,GAAmB,AAAC,GAAmD,CAC3E,GAAM,GAAgB,EAAmB,cACzC,AAAI,GACF,EAAa,CAAE,IAAK,CAAc,CAAC,CAEvC,EAEa,GAAoB,CAAC,CAChC,8BAA8B,EAC9B,mCAAmC,KACR,CAC3B,GAAM,GAAW,EAAY,EAEvB,CAAE,SAAU,EAAY,CAAe,EACvC,EAAqB,EAAY,CAA0B,EAE3D,EAAa,EAAO,EAAK,EACzB,EAAiB,EAAiB,CAAC,CAAC,EAEpC,EAAgB,IAAM,CAC1B,EAAS,EAA2B,CAAC,EACrC,EAAW,QAAU,EACvB,EAEM,EAAyB,EAAY,IAAY,0BArDzD,MAsDI,GAAM,GAAa,OAAO,KAAK,CAAkB,EAEjD,OAAW,KAAa,GAAY,CAClC,GAAM,GAAU,EAAmB,GAC7B,EACJ,oBAAS,+BAAT,cAAuC,mBAEzC,GAAI,CAAC,GAAW,CAAC,GAAa,EAAa,CACzC,EAAiB,CAAO,EACxB,QACF,CAEA,GAAI,EAAe,QAAQ,SAAS,CAAS,EAC3C,SAGF,GAAM,CAAE,gBAAiB,EASzB,GARI,CAAC,GAQD,CAF6B,CAD/B,EAAQ,SAAW,UACiC,CAAC,EAAW,SAGhE,SAGF,EAAW,QAAU,GACrB,EAAe,QAAQ,KAAK,CAAS,EAErC,GAAM,GAAiB,KAAM,GAAuB,CAClD,UACA,YACA,gBACA,8BACA,kCACF,CAAC,EAEK,EAAY,UACZ,EAAkB,EAAa,IAAI,AAAC,GACpC,WAAgB,SAAS,EAAY,MAChC,OAAK,GAAL,CAAkB,OAAQ,CAAU,GAGtC,CACR,EAOD,EAAS,EALqB,CAC5B,YACA,iBAAkB,WACpB,CAEkD,CAAC,EACnD,EACE,EAAyB,CACvB,YACA,OAAQ,OACR,aAAc,CAChB,CAAC,CACH,EACA,EAAc,EACd,EAAS,EAAQ,EAAa,MAAM,EAEpC,EAAiB,CAAO,EACxB,GAAM,CAAC,GAAe,EACtB,EAA+B,CAC7B,aACF,CAAC,EAED,EAAW,QAAU,EACvB,CACF,GAAG,CAAC,EAAoB,CAAK,CAAC,EAE9B,SAAU,IAAM,CACd,EAAuB,CACzB,EAAG,CAAC,EAAoB,CAAsB,CAAC,EAExC,IACT",
  "names": []
}
