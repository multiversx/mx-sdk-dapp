{
  "version": 3,
  "sources": ["../../src/providers/accountProvider.ts"],
  "sourcesContent": ["import { ExtensionProvider } from '@multiversx/sdk-extension-provider';\nimport { HWProvider } from '@multiversx/sdk-hw-provider';\nimport { MetamaskProvider } from '@multiversx/sdk-metamask-provider/out/metamaskProvider';\nimport { OperaProvider } from '@multiversx/sdk-opera-provider';\nimport { PasskeyProvider } from '@multiversx/sdk-passkey-provider/out';\nimport { WalletProvider } from '@multiversx/sdk-web-wallet-provider';\nimport { CrossWindowProvider } from 'lib/sdkWebWalletCrossWindowProvider';\nimport { IframeProvider } from 'lib/sdkWebWalletIframeProvider';\nimport { IDappProvider } from 'types';\nimport { WalletConnectV2Provider } from 'utils/walletconnect/__sdkWalletconnectProvider';\nimport { emptyProvider } from './utils';\n\nexport type ProvidersType =\n  | IDappProvider\n  | ExtensionProvider\n  | PasskeyProvider\n  | MetamaskProvider\n  | WalletProvider\n  | CrossWindowProvider\n  | IframeProvider\n  | HWProvider\n  | OperaProvider\n  | WalletConnectV2Provider;\n\nlet accountProvider: ProvidersType = emptyProvider;\n\nlet externalProvider: IDappProvider | null = null;\n\nexport function setAccountProvider<TProvider extends ProvidersType>(\n  provider: TProvider\n) {\n  accountProvider = provider;\n}\n\nexport function setExternalProvider(provider: IDappProvider) {\n  externalProvider = provider;\n}\n\nexport function setExternalProviderAsAccountProvider() {\n  if (externalProvider != null) {\n    accountProvider = externalProvider;\n  }\n}\n\nexport function getAccountProvider(): IDappProvider {\n  return (accountProvider as IDappProvider) || emptyProvider;\n}\n\nexport function getExternalProvider() {\n  return externalProvider;\n}\n"],
  "mappings": "gFAAA,IAwBA,GAAI,GAAiC,EAEjC,EAAyC,KAEtC,WACL,EACA,CACA,EAAkB,CACpB,CAEO,WAA6B,EAAyB,CAC3D,EAAmB,CACrB,CAEO,YAAgD,CACrD,AAAI,GAAoB,MACtB,GAAkB,EAEtB,CAEO,YAA6C,CAClD,MAAQ,IAAqC,CAC/C,CAEO,YAA+B,CACpC,MAAO,EACT",
  "names": []
}
