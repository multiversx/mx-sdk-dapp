{
  "version": 3,
  "sources": ["../../src/components/LogoutListener/helpers/useNativeAuthLogout.ts"],
  "sourcesContent": ["import { useEffect, useRef } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useGetAccountInfo } from 'hooks';\nimport { useSelector } from 'reduxStore/DappProviderContext';\nimport { logoutRouteSelector, loginInfoSelector } from 'reduxStore/selectors';\nimport { getTokenExpiration } from 'services/nativeAuth/methods';\nimport { getWebviewToken } from 'utils/account/getWebviewToken';\nimport { logout } from 'utils/logout';\n\nexport const useNativeAuthLogout = () => {\n  const { address } = useGetAccountInfo();\n  const { tokenLogin } = useSelector(loginInfoSelector);\n  const logoutRoute = useSelector(logoutRouteSelector);\n\n  const {\n    isExpired: isNativeAuthTokenExpired,\n    secondsUntilExpires,\n    expiresAt\n  } = getTokenExpiration(tokenLogin?.nativeAuthToken);\n\n  const plannedLogoutRef = useRef('');\n  const logoutTimeoutRef = useRef<NodeJS.Timeout>();\n\n  // logout if token is expired\n  useEffect(() => {\n    if (address && isNativeAuthTokenExpired) {\n      logout(logoutRoute);\n    }\n  }, [isNativeAuthTokenExpired, address, logoutRoute]);\n\n  // plan logout for existing token\n  useEffect(() => {\n    const isWebviewLogin = Boolean(getWebviewToken());\n\n    // prevent unexpected logout if webview login\n    if (!address || isWebviewLogin) {\n      return;\n    }\n\n    // Handle the actual logout functionality.\n    const secondsUntilExpiresBN = new BigNumber(String(secondsUntilExpires));\n    const plannedLogoutKey = `${address}_${expiresAt}`;\n    const plannedLogoutSet = plannedLogoutRef.current === plannedLogoutKey;\n\n    const isValidInterval =\n      secondsUntilExpires && secondsUntilExpiresBN.isGreaterThan(0);\n\n    if (!isValidInterval || plannedLogoutSet) {\n      return;\n    }\n\n    plannedLogoutRef.current = plannedLogoutKey;\n\n    clearTimeout(logoutTimeoutRef.current);\n    const millisecondsUntilLogout = secondsUntilExpiresBN.times(1000);\n\n    logoutTimeoutRef.current = setTimeout(() => {\n      logout(logoutRoute);\n    }, millisecondsUntilLogout.toNumber());\n\n    return () => {\n      clearTimeout(logoutTimeoutRef.current);\n    };\n  }, [expiresAt, address, logoutRoute]);\n\n  return null;\n};\n"],
  "mappings": "kUAAA,kDACA,4BAGA,IAKO,GAAM,GAAsB,IAAM,CACvC,GAAM,CAAE,WAAY,EAAkB,EAChC,CAAE,cAAe,EAAY,CAAiB,EAC9C,EAAc,EAAY,CAAmB,EAE7C,CACJ,UAAW,EACX,sBACA,aACE,EAAmB,iBAAY,eAAe,EAE5C,EAAmB,EAAO,EAAE,EAC5B,EAAmB,EAAuB,EAGhD,SAAU,IAAM,CACd,AAAI,GAAW,GACb,EAAO,CAAW,CAEtB,EAAG,CAAC,EAA0B,EAAS,CAAW,CAAC,EAGnD,EAAU,IAAM,CACd,GAAM,GAAiB,QAAQ,EAAgB,CAAC,EAGhD,GAAI,CAAC,GAAW,EACd,OAIF,GAAM,GAAwB,GAAI,GAAU,OAAO,CAAmB,CAAC,EACjE,EAAmB,GAAG,KAAW,IACjC,EAAmB,EAAiB,UAAY,EAKtD,GAAI,CAFF,IAAuB,EAAsB,cAAc,CAAC,IAEtC,EACtB,OAGF,EAAiB,QAAU,EAE3B,aAAa,EAAiB,OAAO,EACrC,GAAM,GAA0B,EAAsB,MAAM,GAAI,EAEhE,SAAiB,QAAU,WAAW,IAAM,CAC1C,EAAO,CAAW,CACpB,EAAG,EAAwB,SAAS,CAAC,EAE9B,IAAM,CACX,aAAa,EAAiB,OAAO,CACvC,CACF,EAAG,CAAC,EAAW,EAAS,CAAW,CAAC,EAE7B,IACT",
  "names": []
}
