{
  "version": 3,
  "sources": ["../../src/UI/TransactionInfo/components/TransactionAction/components/TransactionActionBlock/components/TransactionActionNft.tsx"],
  "sourcesContent": ["import React from 'react';\nimport classNames from 'classnames';\nimport { DataTestIdsEnum } from 'constants/index';\nimport { withStyles, WithStylesImportType } from 'hocs/withStyles';\nimport { ExplorerLink } from 'UI/ExplorerLink';\nimport { FormatAmount } from 'UI/FormatAmount/FormatAmount';\nimport { TransactionActionNftReturnType } from 'utils/transactions/transactionInfoHelpers/getTransactionActionNftText';\nimport { NftBadge } from './NftBadge';\n\nconst TransactionActionNftComponent = ({\n  badgeText,\n  tokenFormattedAmount,\n  tokenExplorerLink,\n  tokenLinkText,\n  token,\n  showLastNonZeroDecimal,\n  globalStyles,\n  styles\n}: TransactionActionNftReturnType & WithStylesImportType) => {\n  if (!token.identifier) {\n    return null;\n  }\n\n  return (\n    <div className={styles?.transactionActionNft}>\n      {badgeText != null && (\n        <NftBadge\n          text={badgeText}\n          className={classNames(globalStyles?.mr1, globalStyles?.myAuto)}\n        />\n      )}\n\n      {tokenFormattedAmount != null && (\n        <div\n          className={classNames(globalStyles?.mr1, {\n            [globalStyles?.textTruncate ?? '']: token.svgUrl\n          })}\n        >\n          <FormatAmount\n            value={token.value}\n            digits={2}\n            showLabel={false}\n            showLastNonZeroDecimal={showLastNonZeroDecimal}\n            decimals={token.decimals}\n            data-testid={DataTestIdsEnum.nftFormattedAmount}\n          />\n        </div>\n      )}\n\n      <ExplorerLink\n        page={tokenExplorerLink}\n        data-testid={DataTestIdsEnum.nftExplorerLink}\n        className={classNames(styles?.explorer, {\n          [globalStyles?.sideLink ?? '']: token.svgUrl,\n          [globalStyles?.dFlex ?? '']: token.svgUrl,\n          [globalStyles?.textTruncate ?? '']: !token.svgUrl\n        })}\n      >\n        <div className={styles?.data}>\n          {token.svgUrl && (\n            <img\n              src={token.svgUrl}\n              alt={token.name}\n              className={classNames(globalStyles?.sideIcon, globalStyles?.mr1)}\n            />\n          )}\n\n          <span\n            className={classNames({\n              [styles?.truncate ?? '']: token.ticker === token.collection\n            })}\n          >\n            {tokenLinkText}\n          </span>\n        </div>\n      </ExplorerLink>\n    </div>\n  );\n};\n\nexport const TransactionActionNft = withStyles(TransactionActionNftComponent, {\n  ssrStyles: () =>\n    import(\n      'UI/TransactionInfo/components/TransactionAction/components/TransactionActionBlock/styles.scss'\n    ),\n  clientStyles: () =>\n    require('UI/TransactionInfo/components/TransactionAction/components/TransactionActionBlock/styles.scss')\n      .default\n});\n"],
  "mappings": "sSAAA,IAEA,IAFA,qBACA,0BAQA,GAAM,GAAgC,CAAC,CACrC,YACA,uBACA,oBACA,gBACA,QACA,yBACA,eACA,YAC2D,CAlB7D,cAmBE,MAAK,GAAM,WAKT,gBAAC,OAAI,UAAW,iBAAQ,sBACrB,GAAa,MACZ,gBAAC,GACC,KAAM,EACN,UAAW,EAAW,iBAAc,IAAK,iBAAc,MAAM,EAC/D,EAGD,GAAwB,MACvB,gBAAC,OACC,UAAW,EAAW,iBAAc,IAAK,CACvC,CAAC,oBAAc,eAAd,OAA8B,IAAK,EAAM,MAC5C,CAAC,GAED,gBAAC,GACC,MAAO,EAAM,MACb,OAAQ,EACR,UAAW,GACX,uBAAwB,EACxB,SAAU,EAAM,SAChB,cAAa,qBACf,CACF,EAGF,gBAAC,GACC,KAAM,EACN,cAAa,kBACb,UAAW,EAAW,iBAAQ,SAAU,CACtC,CAAC,oBAAc,WAAd,OAA0B,IAAK,EAAM,OACtC,CAAC,oBAAc,QAAd,OAAuB,IAAK,EAAM,OACnC,CAAC,oBAAc,eAAd,OAA8B,IAAK,CAAC,EAAM,MAC7C,CAAC,GAED,gBAAC,OAAI,UAAW,iBAAQ,MACrB,EAAM,QACL,gBAAC,OACC,IAAK,EAAM,OACX,IAAK,EAAM,KACX,UAAW,EAAW,iBAAc,SAAU,iBAAc,GAAG,EACjE,EAGF,gBAAC,QACC,UAAW,EAAW,CACpB,CAAC,oBAAQ,WAAR,OAAoB,IAAK,EAAM,SAAW,EAAM,UACnD,CAAC,GAEA,CACH,CACF,CACF,CACF,EAxDO,IA0DX,EAEa,EAAuB,EAAW,EAA+B,CAC5E,UAAW,IACT,OACE,kGAEJ,aAAc,IACZ,WACG,OACP,CAAC",
  "names": []
}
