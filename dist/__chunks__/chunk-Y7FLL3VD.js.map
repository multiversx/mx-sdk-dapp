{
  "version": 3,
  "sources": ["../../src/hooks/websocketListener/useInitializeWebsocketConnection.tsx"],
  "sourcesContent": ["import { useCallback, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport { useGetAccount } from 'hooks/account/useGetAccount';\nimport { useDispatch } from 'reduxStore/DappProviderContext';\nimport { setWebsocketBatchEvent, setWebsocketEvent } from 'reduxStore/slices';\nimport { BatchTransactionsWSResponseType } from 'types';\nimport { retryMultipleTimes } from 'utils/retryMultipleTimes';\nimport { getWebsocketUrl } from 'utils/websocket/getWebsocketUrl';\nimport { useGetNetworkConfig } from '../useGetNetworkConfig';\nimport {\n  websocketConnection,\n  WebsocketConnectionStatusEnum\n} from './websocketConnection';\n\nconst TIMEOUT = 3000;\nconst RECONNECTION_ATTEMPTS = 3;\nconst RETRY_INTERVAL = 500;\nconst MESSAGE_DELAY = 1000;\nconst BATCH_UPDATED_EVENT = 'batchUpdated';\nconst CONNECT = 'connect';\nconst DISCONNECT = 'disconnect';\n\nexport function useInitializeWebsocketConnection() {\n  const messageTimeout = useRef<NodeJS.Timeout | null>(null);\n  const batchTimeout = useRef<NodeJS.Timeout | null>(null);\n  const { address } = useGetAccount();\n  const dispatch = useDispatch();\n  const { network } = useGetNetworkConfig();\n\n  const handleMessageReceived = (message: string) => {\n    if (messageTimeout.current) {\n      clearTimeout(messageTimeout.current);\n    }\n\n    messageTimeout.current = setTimeout(() => {\n      dispatch(setWebsocketEvent(message));\n    }, MESSAGE_DELAY);\n  };\n\n  const handleBatchUpdate = (data: BatchTransactionsWSResponseType) => {\n    if (batchTimeout.current) {\n      clearTimeout(batchTimeout.current);\n    }\n\n    batchTimeout.current = setTimeout(() => {\n      dispatch(setWebsocketBatchEvent(data));\n    }, MESSAGE_DELAY);\n  };\n\n  const unsubscribeWS = () => {\n    websocketConnection.current?.close();\n    websocketConnection.current = null;\n    websocketConnection.status = WebsocketConnectionStatusEnum.NOT_INITIALIZED;\n\n    if (messageTimeout.current) {\n      clearTimeout(messageTimeout.current);\n    }\n  };\n\n  const initializeWebsocketConnection = useCallback(\n    retryMultipleTimes(\n      async () => {\n        if (!address) {\n          return;\n        }\n\n        // If there are many components that use this hook, the initialize method is triggered many times.\n        // To avoid multiple connections to the same endpoint, we have to guard the initialization before the logic started\n        websocketConnection.status = WebsocketConnectionStatusEnum.PENDING;\n\n        const websocketUrl =\n          network.websocketUrl ?? (await getWebsocketUrl(network.apiAddress));\n\n        if (websocketUrl == null) {\n          console.warn('Can not get websocket url');\n          return;\n        }\n\n        websocketConnection.current = io(websocketUrl, {\n          forceNew: true,\n          reconnectionAttempts: RECONNECTION_ATTEMPTS,\n          timeout: TIMEOUT,\n          query: {\n            address\n          }\n        });\n\n        websocketConnection.status = WebsocketConnectionStatusEnum.COMPLETED;\n\n        websocketConnection.current.onAny(handleMessageReceived);\n\n        websocketConnection.current.on(BATCH_UPDATED_EVENT, handleBatchUpdate);\n\n        websocketConnection.current.on(CONNECT, () => {\n          console.log('Websocket connected.');\n        });\n\n        websocketConnection.current.on(DISCONNECT, () => {\n          if (address) {\n            // Make sure we are still logged in before retrying to connect to the websocket\n            console.warn('Websocket disconnected. Trying to reconnect...');\n\n            setTimeout(() => {\n              if (address) {\n                // Make sure we are still logged in when the timeout is finished\n                console.log('Websocket reconnecting...');\n                websocketConnection.current?.connect();\n              }\n            }, RETRY_INTERVAL);\n          }\n        });\n      },\n      {\n        retries: 2,\n        delay: RETRY_INTERVAL\n      }\n    ),\n    [address]\n  );\n\n  useEffect(() => {\n    if (\n      address &&\n      websocketConnection.status ===\n        WebsocketConnectionStatusEnum.NOT_INITIALIZED &&\n      !websocketConnection.current?.active\n    ) {\n      initializeWebsocketConnection();\n      return;\n    }\n\n    if (!address) {\n      // Close the websocket connection when we are not logged in\n      unsubscribeWS();\n    }\n  }, [address, initializeWebsocketConnection]);\n\n  useEffect(() => {\n    return () => {\n      unsubscribeWS();\n    };\n  }, []);\n}\n"],
  "mappings": "sXAAA,mEACA,sCAGA,IAUA,GAAM,GAAU,IACV,EAAwB,EACxB,EAAiB,IACjB,EAAgB,IAChB,EAAsB,eACtB,EAAU,UACV,EAAa,aAEZ,YAA4C,CACjD,GAAM,GAAiB,EAA8B,IAAI,EACnD,EAAe,EAA8B,IAAI,EACjD,CAAE,WAAY,EAAc,EAC5B,EAAW,EAAY,EACvB,CAAE,WAAY,EAAoB,EAElC,EAAwB,AAAC,GAAoB,CACjD,AAAI,EAAe,SACjB,aAAa,EAAe,OAAO,EAGrC,EAAe,QAAU,WAAW,IAAM,CACxC,EAAS,EAAkB,CAAO,CAAC,CACrC,EAAG,CAAa,CAClB,EAEM,EAAoB,AAAC,GAA0C,CACnE,AAAI,EAAa,SACf,aAAa,EAAa,OAAO,EAGnC,EAAa,QAAU,WAAW,IAAM,CACtC,EAAS,EAAuB,CAAI,CAAC,CACvC,EAAG,CAAa,CAClB,EAEM,EAAgB,IAAM,CAjD9B,MAkDI,KAAoB,UAApB,QAA6B,QAC7B,EAAoB,QAAU,KAC9B,EAAoB,OAAS,kBAEzB,EAAe,SACjB,aAAa,EAAe,OAAO,CAEvC,EAEM,EAAgC,EACpC,EACE,IAAY,wBA7DlB,MA8DQ,GAAI,CAAC,EACH,OAKF,EAAoB,OAAS,UAE7B,GAAM,GACJ,KAAQ,eAAR,OAAyB,KAAM,GAAgB,EAAQ,UAAU,EAEnE,GAAI,GAAgB,KAAM,CACxB,QAAQ,KAAK,2BAA2B,EACxC,MACF,CAEA,EAAoB,QAAU,EAAG,EAAc,CAC7C,SAAU,GACV,qBAAsB,EACtB,QAAS,EACT,MAAO,CACL,SACF,CACF,CAAC,EAED,EAAoB,OAAS,YAE7B,EAAoB,QAAQ,MAAM,CAAqB,EAEvD,EAAoB,QAAQ,GAAG,EAAqB,CAAiB,EAErE,EAAoB,QAAQ,GAAG,EAAS,IAAM,CAC5C,QAAQ,IAAI,sBAAsB,CACpC,CAAC,EAED,EAAoB,QAAQ,GAAG,EAAY,IAAM,CAC/C,AAAI,GAEF,SAAQ,KAAK,gDAAgD,EAE7D,WAAW,IAAM,CAtG7B,MAuGc,AAAI,GAEF,SAAQ,IAAI,2BAA2B,EACvC,KAAoB,UAApB,QAA6B,UAEjC,EAAG,CAAc,EAErB,CAAC,CACH,GACA,CACE,QAAS,EACT,MAAO,CACT,CACF,EACA,CAAC,CAAO,CACV,EAEA,EAAU,IAAM,CAxHlB,MAyHI,GACE,GACA,EAAoB,SAClB,mBACF,CAAC,MAAoB,UAApB,QAA6B,QAC9B,CACA,EAA8B,EAC9B,MACF,CAEA,AAAK,GAEH,EAAc,CAElB,EAAG,CAAC,EAAS,CAA6B,CAAC,EAE3C,EAAU,IACD,IAAM,CACX,EAAc,CAChB,EACC,CAAC,CAAC,CACP",
  "names": []
}
