{
  "version": 3,
  "sources": ["../../src/utils/decoders/base64Utils.ts"],
  "sourcesContent": ["/**\n * @description Checks if a string is base64 encoded\n * The detection difficulty stands in the format of an encoded string that initially had non-ASCII characters\n *\n * Usually, when decoding a base64 string, if the result has non-ASCII characters,\n * it means that the string was encoded, however, this is not always the case\n *\n * @example If we encode a string with non-ASCII characters like \"\uD83D\uDC4Bwxyz{|}~\uFFFD\uFFFD\uFFFD\" to base64\n * the decoded result will also contain non-ASCII characters, but the strings is valid\n * For the scenarios above, the Buffer.from() conversion is not equal to the atob() conversion\n * and, the encoded string format is also different from a regular base64 string (e.g. \"GamRHHZiaUR3bjVtQQ==\")\n *\n * Solution:\n * - if any conversion fails (atob(), btoa() or Buffer.from()), it is definitely not an encoded string\n * - if the string is equal\n *\n * @see The tests for this function are in src/utils/decoders/tests/base64Utils.test.ts\n * @param str\n */\nexport function isStringBase64(str: string) {\n  try {\n    // Try to decode the string and encode it back using base64 functions\n    const atobDecoded = atob(str);\n    const btoaEncoded = btoa(atobDecoded);\n    const bufferFromDecoded = Buffer.from(str, 'base64').toString();\n    const bufferFromEncoded = Buffer.from(bufferFromDecoded).toString('base64');\n\n    // If the result is equal to the initial string\n    const isBtoaEqual = str === btoaEncoded || btoaEncoded.startsWith(str);\n    const isBufferFromBase64Equal =\n      str === bufferFromEncoded || bufferFromEncoded.startsWith(str);\n    const isEqualToInitialString = isBtoaEqual && isBufferFromBase64Equal;\n\n    if (isEqualToInitialString) {\n      // it is a regular base64 string\n      return true;\n    }\n  } catch (e) {\n    return false;\n  }\n\n  return false;\n}\n\nexport function encodeToBase64(string: string) {\n  return btoa(string);\n}\n\nexport function decodeBase64(string: string) {\n  if (!isStringBase64(string)) {\n    return string;\n  }\n\n  return atob(string);\n}\n"],
  "mappings": "sDAmBO,WAAwB,EAAa,CAC1C,GAAI,CAEF,GAAM,GAAc,KAAK,CAAG,EACtB,EAAc,KAAK,CAAW,EAC9B,EAAoB,SAAO,KAAK,EAAK,QAAQ,EAAE,SAAS,EACxD,EAAoB,SAAO,KAAK,CAAiB,EAAE,SAAS,QAAQ,EAGpE,EAAc,IAAQ,GAAe,EAAY,WAAW,CAAG,EAC/D,EACJ,IAAQ,GAAqB,EAAkB,WAAW,CAAG,EAG/D,GAF+B,GAAe,EAI5C,MAAO,EAEX,OAAS,EAAP,CACA,MAAO,EACT,CAEA,MAAO,EACT,CAEO,WAAwB,EAAgB,CAC7C,MAAO,MAAK,CAAM,CACpB,CAEO,WAAsB,EAAgB,CAC3C,MAAK,GAAe,CAAM,EAInB,KAAK,CAAM,EAHT,CAIX,CAtDA",
  "names": []
}
