{
  "version": 3,
  "sources": ["../../src/wrappers/AppInitializer.tsx"],
  "sourcesContent": ["import { useEffect, useMemo, useState } from 'react';\nimport { Address } from '@multiversx/sdk-core/out';\nimport { getServerConfiguration } from 'apiCalls';\nimport { fallbackNetworkConfigurations } from 'constants/network';\nimport { useGetAccountInfo } from 'hooks/account/useGetAccountInfo';\nimport { useDispatch, useSelector } from 'reduxStore/DappProviderContext';\nimport { isLoginSessionInvalidSelector } from 'reduxStore/selectors/loginInfoSelectors';\nimport { setDappConfig } from 'reduxStore/slices';\nimport { setLogoutRoute } from 'reduxStore/slices/loginInfoSlice';\nimport {\n  defaultNetwork,\n  initializeNetworkConfig\n} from 'reduxStore/slices/networkConfigSlice';\nimport { logout } from 'utils/logout';\nimport {\n  CustomNetworkType,\n  DappConfigType,\n  IDappProvider,\n  EnvironmentsEnum,\n  NetworkType\n} from '../types';\n\nexport interface UseAppInitializerPropsType {\n  customNetworkConfig?: CustomNetworkType;\n  externalProvider?: IDappProvider;\n  environment: 'testnet' | 'mainnet' | 'devnet' | EnvironmentsEnum | string;\n  dappConfig?: DappConfigType;\n}\n\nexport interface AppInitializerPropsType extends UseAppInitializerPropsType {\n  children?: any;\n}\n\nexport const useAppInitializer = ({\n  customNetworkConfig = {},\n  environment,\n  dappConfig\n}: UseAppInitializerPropsType) => {\n  const [initialized, setInitialized] = useState(false);\n  const account = useGetAccountInfo();\n  const isLoginSessionInvalid = useSelector(isLoginSessionInvalidSelector);\n\n  // memoize dappConfig to avoid rerendering of AppInitializer\n  const memoizedDappConfig = useMemo(() => dappConfig, []);\n  const logoutRoute = memoizedDappConfig?.logoutRoute;\n\n  const { address, publicKey } = account;\n  const dispatch = useDispatch();\n\n  async function initializeNetwork() {\n    const fetchConfigFromServer = !customNetworkConfig?.skipFetchFromServer;\n    const customNetworkApiAddress = customNetworkConfig?.apiAddress;\n\n    const isFoundEnv = environment in fallbackNetworkConfigurations;\n\n    const fallbackConfig: NetworkType | Record<string, string> = isFoundEnv\n      ? fallbackNetworkConfigurations[environment as EnvironmentsEnum]\n      : {};\n\n    const baseConfig = {\n      ...defaultNetwork,\n      ...fallbackConfig,\n      ...customNetworkConfig\n    };\n\n    const localConfig: NetworkType = {\n      ...baseConfig,\n      apiTimeout: String(baseConfig.apiTimeout),\n      walletConnectBridgeAddresses:\n        baseConfig.walletConnectBridgeAddresses || [],\n      walletConnectV2RelayAddresses:\n        'walletConnectV2RelayAddresses' in baseConfig\n          ? baseConfig.walletConnectV2RelayAddresses\n          : ['wss://relay.walletconnect.com']\n    };\n\n    if (fetchConfigFromServer) {\n      const fallbackApiAddress =\n        'apiAddress' in fallbackConfig ? fallbackConfig.apiAddress : '';\n\n      const serverConfig = await getServerConfiguration(\n        customNetworkApiAddress || fallbackApiAddress\n      );\n\n      if (serverConfig != null) {\n        const apiConfig = {\n          ...localConfig,\n          ...serverConfig,\n          ...customNetworkConfig\n        };\n        dispatch(\n          initializeNetworkConfig({\n            ...apiConfig,\n            apiTimeout: String(apiConfig.apiTimeout)\n          })\n        );\n        return;\n      }\n    }\n\n    dispatch(initializeNetworkConfig(localConfig));\n  }\n\n  async function initializeApp() {\n    if (memoizedDappConfig) {\n      dispatch(setDappConfig(memoizedDappConfig));\n    }\n    dispatch(setLogoutRoute(logoutRoute));\n    await initializeNetwork();\n\n    setInitialized(true);\n  }\n\n  useEffect(() => {\n    if (address) {\n      const pubKey = new Address(address).hex();\n      if (pubKey !== publicKey) {\n        logout(logoutRoute);\n      }\n    }\n  }, [address, publicKey, logoutRoute]);\n\n  useEffect(() => {\n    initializeApp();\n  }, [customNetworkConfig, environment, memoizedDappConfig]);\n\n  useEffect(() => {\n    if (account.address && isLoginSessionInvalid) {\n      logout(logoutRoute);\n    }\n  }, [isLoginSessionInvalid, account.address, logoutRoute]);\n\n  return { initialized };\n};\n\nexport function AppInitializer({\n  customNetworkConfig = {},\n  children,\n  environment,\n  dappConfig\n}: AppInitializerPropsType) {\n  const [isBrowser, setIsBrowser] = useState(!dappConfig?.isSSR);\n\n  const { initialized } = useAppInitializer({\n    customNetworkConfig,\n    environment,\n    dappConfig\n  });\n\n  // This is a hack to allow the app to render on the server side\n  useEffect(() => {\n    setIsBrowser(true);\n  }, []);\n\n  return isBrowser ? (initialized ? children : null) : children;\n}\n"],
  "mappings": "ufAAA,iEACA,mDAEA,IAGA,IACA,IACA,IACA,IAwBO,GAAM,GAAoB,CAAC,CAChC,sBAAsB,CAAC,EACvB,cACA,gBACgC,CAChC,GAAM,CAAC,EAAa,GAAkB,EAAS,EAAK,EAC9C,EAAU,EAAkB,EAC5B,EAAwB,EAAY,CAA6B,EAGjE,EAAqB,EAAQ,IAAM,EAAY,CAAC,CAAC,EACjD,EAAc,iBAAoB,YAElC,CAAE,UAAS,aAAc,EACzB,EAAW,EAAY,EAE7B,YAAmC,gCACjC,GAAM,GAAwB,CAAC,YAAqB,qBAC9C,EAA0B,iBAAqB,WAI/C,EAAuD,AAF1C,IAAe,GAG9B,EAA8B,GAC9B,CAAC,EAEC,EAAa,SACd,GACA,GACA,GAGC,EAA2B,OAC5B,GAD4B,CAE/B,WAAY,OAAO,EAAW,UAAU,EACxC,6BACE,EAAW,8BAAgC,CAAC,EAC9C,8BACE,iCAAmC,GAC/B,EAAW,8BACX,CAAC,+BAA+B,CACxC,GAEA,GAAI,EAAuB,CACzB,GAAM,GACJ,cAAgB,GAAiB,EAAe,WAAa,GAEzD,EAAe,KAAM,GACzB,GAA2B,CAC7B,EAEA,GAAI,GAAgB,KAAM,CACxB,GAAM,GAAY,SACb,GACA,GACA,GAEL,EACE,EAAwB,OACnB,GADmB,CAEtB,WAAY,OAAO,EAAU,UAAU,CACzC,EAAC,CACH,EACA,MACF,CACF,CAEA,EAAS,EAAwB,CAAW,CAAC,CAC/C,GAEA,YAA+B,gCAC7B,AAAI,GACF,EAAS,EAAc,CAAkB,CAAC,EAE5C,EAAS,EAAe,CAAW,CAAC,EACpC,KAAM,GAAkB,EAExB,EAAe,EAAI,CACrB,GAEA,SAAU,IAAM,CACd,AAAI,GAEE,AADW,GAAI,GAAQ,CAAO,EAAE,IAAI,IACzB,GACb,EAAO,CAAW,CAGxB,EAAG,CAAC,EAAS,EAAW,CAAW,CAAC,EAEpC,EAAU,IAAM,CACd,EAAc,CAChB,EAAG,CAAC,EAAqB,EAAa,CAAkB,CAAC,EAEzD,EAAU,IAAM,CACd,AAAI,EAAQ,SAAW,GACrB,EAAO,CAAW,CAEtB,EAAG,CAAC,EAAuB,EAAQ,QAAS,CAAW,CAAC,EAEjD,CAAE,aAAY,CACvB,EAEO,YAAwB,CAC7B,sBAAsB,CAAC,EACvB,WACA,cACA,cAC0B,CAC1B,GAAM,CAAC,EAAW,GAAgB,EAAS,CAAC,YAAY,MAAK,EAEvD,CAAE,eAAgB,EAAkB,CACxC,sBACA,cACA,YACF,CAAC,EAGD,SAAU,IAAM,CACd,EAAa,EAAI,CACnB,EAAG,CAAC,CAAC,EAEE,EAAa,EAAc,EAAW,KAAQ,CACvD",
  "names": []
}
