{
  "version": 3,
  "sources": ["../../src/reduxStore/store.ts"],
  "sourcesContent": ["import { configureStore } from '@reduxjs/toolkit';\nimport { createSubscription } from 'react-redux/lib/utils/Subscription';\nimport { setAccount, setAccountNonce } from 'reduxStore/slices';\nimport { loginSessionMiddleware } from './middlewares/loginSessionMiddleware';\nimport { persistIgnoredActions, persistStore, reducers } from './persistConfig';\nimport rootReducer from './reducers';\n\nexport const store = configureStore({\n  reducer: reducers,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [\n          ...persistIgnoredActions,\n          setAccountNonce.type,\n          setAccount.type\n        ],\n        ignoredPaths: [\n          'payload.nonce',\n          // TODO: check regex for: account.accounts[erd1regex].nonce\n          'account.account.nonce',\n          'providers.accountProvider'\n        ]\n      }\n    }).concat(loginSessionMiddleware)\n});\n\nexport const subscription = createSubscription(store);\n\nexport const persistor = persistStore(store);\n\n// Used only to infer the store type\nconst fakeStore = configureStore({ reducer: rootReducer });\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type StoreType = typeof fakeStore;\nexport type RootState = ReturnType<ReturnType<typeof fakeStore.getState>>;\nexport type AppDispatch = typeof store.dispatch;\n"],
  "mappings": "iSAAA,kDACA,wEADA,GAOa,GAoBA,EAEA,EAGP,EAhCN,aAEA,IACA,IACA,IACA,IAEO,AAAM,EAAQ,EAAe,CAClC,QAAS,EACT,WAAY,AAAC,GACX,EAAqB,CACnB,kBAAmB,CACjB,eAAgB,CACd,GAAG,EACH,EAAgB,KAChB,EAAW,IACb,EACA,aAAc,CACZ,gBAEA,wBACA,2BACF,CACF,CACF,CAAC,EAAE,OAAO,CAAsB,CACpC,CAAC,EAEY,EAAe,EAAmB,CAAK,EAEvC,EAAY,EAAa,CAAK,EAGrC,EAAY,EAAe,CAAE,QAAS,CAAY,CAAC",
  "names": []
}
