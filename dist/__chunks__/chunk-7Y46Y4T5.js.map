{
  "version": 3,
  "sources": ["../../src/hooks/transactions/useSignTransactionsCommonData.tsx"],
  "sourcesContent": ["import { useEffect, useState } from 'react';\n\nimport { Transaction } from '@multiversx/sdk-core/out';\nimport { ExtensionProvider } from '@multiversx/sdk-extension-provider';\nimport { MetamaskProvider } from '@multiversx/sdk-metamask-provider/out/metamaskProvider';\nimport { PasskeyProvider } from '@multiversx/sdk-passkey-provider/out';\nimport { useGetAccount } from 'hooks/account';\nimport { useGetAccountProvider } from 'hooks/account/useGetAccountProvider';\nimport { useParseSignedTransactions } from 'hooks/transactions/useParseSignedTransactions';\nimport { CrossWindowProvider } from 'lib/sdkWebWalletCrossWindowProvider';\n\nimport { IframeProvider } from 'lib/sdkWebWalletIframeProvider';\nimport { ExperimentalWebviewProvider } from 'providers/experimentalWebViewProvider';\nimport { useDispatch, useSelector } from 'reduxStore/DappProviderContext';\nimport {\n  signTransactionsCancelMessageSelector,\n  transactionsToSignSelector\n} from 'reduxStore/selectors';\nimport {\n  clearAllTransactionsToSign,\n  clearTransactionsInfoForSessionId,\n  setSignTransactionsCancelMessage\n} from 'reduxStore/slices';\nimport { useSetTransactionNonces } from './helpers';\n\nexport const useSignTransactionsCommonData = () => {\n  const dispatch = useDispatch();\n  const { provider } = useGetAccountProvider();\n  const { nonce } = useGetAccount();\n  const [error, setError] = useState<string | null>(null);\n  const [hasTransactions, setHasTransactions] = useState<boolean>();\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const setTransactionNonces = useSetTransactionNonces();\n  const transactionsToSign = useSelector(transactionsToSignSelector);\n  const signTransactionsCancelMessage = useSelector(\n    signTransactionsCancelMessageSelector\n  );\n\n  const updateTransactionNonces = async () => {\n    const hasTransactionsToSign = Boolean(transactionsToSign?.transactions);\n    const transactionsWithFixedNonce = transactionsToSign?.transactions ?? [];\n\n    if (hasTransactionsToSign) {\n      const transactionsWithIncrementalNonces = transactionsToSign\n        ?.customTransactionInformation?.skipUpdateNonces\n        ? transactionsWithFixedNonce\n        : await setTransactionNonces(transactionsWithFixedNonce);\n\n      setTransactions(transactionsWithIncrementalNonces);\n    }\n\n    setHasTransactions(hasTransactionsToSign);\n  };\n\n  useEffect(() => {\n    updateTransactionNonces();\n  }, [transactionsToSign, nonce]);\n\n  const clearTransactionStatusMessage = () => {\n    setError(null);\n    dispatch(setSignTransactionsCancelMessage(null));\n  };\n\n  const onAbort = (sessionId?: string) => {\n    clearTransactionStatusMessage();\n    clearSignInfo(sessionId);\n  };\n\n  useParseSignedTransactions(onAbort);\n\n  function clearSignInfo(sessionId?: string) {\n    const isExtensionProvider = provider instanceof ExtensionProvider;\n    const isPasskeyProvider = provider instanceof PasskeyProvider;\n    const isCrossWindowProvider = provider instanceof CrossWindowProvider;\n    const isIframeProvider = provider instanceof IframeProvider;\n    const isMetamaskProvider = provider instanceof MetamaskProvider;\n    const isExperimentalWebviewProvider =\n      provider instanceof ExperimentalWebviewProvider;\n\n    dispatch(clearAllTransactionsToSign());\n    dispatch(clearTransactionsInfoForSessionId(sessionId));\n\n    if (\n      !isExtensionProvider &&\n      !isCrossWindowProvider &&\n      !isIframeProvider &&\n      !isPasskeyProvider &&\n      !isMetamaskProvider\n    ) {\n      return;\n    }\n\n    clearTransactionStatusMessage();\n\n    if (isExtensionProvider) {\n      ExtensionProvider.getInstance()?.cancelAction?.();\n    }\n\n    if (isPasskeyProvider) {\n      PasskeyProvider.getInstance()?.cancelAction?.();\n    }\n\n    if (isMetamaskProvider) {\n      MetamaskProvider.getInstance()?.cancelAction?.();\n    }\n\n    if (isCrossWindowProvider) {\n      CrossWindowProvider.getInstance()?.cancelAction?.();\n    }\n\n    if (isIframeProvider) {\n      IframeProvider.getInstance()?.cancelAction?.();\n    }\n\n    if (isExperimentalWebviewProvider) {\n      ExperimentalWebviewProvider.getInstance()?.cancelAction?.();\n    }\n  }\n\n  return {\n    error,\n    canceledTransactionsMessage: signTransactionsCancelMessage,\n    clearTransactionStatusMessage,\n    onAbort,\n    setError,\n    hasTransactions,\n    transactionsToSign: transactionsToSign\n      ? {\n          ...transactionsToSign,\n          transactions\n        }\n      : transactionsToSign\n  };\n};\n"],
  "mappings": "mkBAAA,qDAGA,uEACA,0FACA,uEAIA,KAKA,KAIA,KAOO,GAAM,IAAgC,IAAM,CACjD,GAAM,GAAW,EAAY,EACvB,CAAE,YAAa,EAAsB,EACrC,CAAE,SAAU,EAAc,EAC1B,CAAC,EAAO,GAAY,EAAwB,IAAI,EAChD,CAAC,EAAiB,GAAsB,EAAkB,EAC1D,CAAC,EAAc,GAAmB,EAAwB,CAAC,CAAC,EAC5D,EAAuB,EAAwB,EAC/C,EAAqB,EAAY,CAA0B,EAC3D,EAAgC,EACpC,CACF,EAEM,GAA0B,IAAY,0BAtC9C,QAuCI,GAAM,GAAwB,QAAQ,iBAAoB,YAAY,EAChE,EAA6B,oBAAoB,eAApB,OAAoC,CAAC,EAExE,GAAI,EAAuB,CACzB,GAAM,GAAoC,oBACtC,+BADsC,QACR,iBAC9B,EACA,KAAM,GAAqB,CAA0B,EAEzD,EAAgB,CAAiC,CACnD,CAEA,EAAmB,CAAqB,CAC1C,GAEA,GAAU,IAAM,CACd,GAAwB,CAC1B,EAAG,CAAC,EAAoB,CAAK,CAAC,EAE9B,GAAM,GAAgC,IAAM,CAC1C,EAAS,IAAI,EACb,EAAS,EAAiC,IAAI,CAAC,CACjD,EAEM,EAAU,AAAC,GAAuB,CACtC,EAA8B,EAC9B,GAAc,CAAS,CACzB,EAEA,EAA2B,CAAO,EAElC,YAAuB,EAAoB,CAtE7C,4BAuEI,GAAM,GAAsB,YAAoB,GAC1C,EAAoB,YAAoB,GACxC,EAAwB,YAAoB,GAC5C,EAAmB,YAAoB,GACvC,EAAqB,YAAoB,GACzC,GACJ,YAAoB,GAKtB,AAHA,EAAS,EAA2B,CAAC,EACrC,EAAS,EAAkC,CAAS,CAAC,EAGnD,GAAC,GACD,CAAC,GACD,CAAC,GACD,CAAC,GACD,CAAC,IAKH,GAA8B,EAE1B,GACF,SAAkB,YAAY,IAA9B,cAAiC,eAAjC,iBAGE,GACF,SAAgB,YAAY,IAA5B,cAA+B,eAA/B,iBAGE,GACF,SAAiB,YAAY,IAA7B,cAAgC,eAAhC,iBAGE,GACF,SAAoB,YAAY,IAAhC,cAAmC,eAAnC,iBAGE,GACF,SAAe,YAAY,IAA3B,cAA8B,eAA9B,iBAGE,IACF,SAA4B,YAAY,IAAxC,cAA2C,eAA3C,iBAEJ,CAEA,MAAO,CACL,QACA,4BAA6B,EAC7B,gCACA,UACA,WACA,kBACA,mBAAoB,GAChB,OACK,GADL,CAEE,cACF,EAEN,CACF",
  "names": []
}
