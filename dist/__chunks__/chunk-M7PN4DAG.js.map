{
  "version": 3,
  "sources": ["../../src/UI/ledger/LedgerLoginContainer/LedgerLoginContentBody/LedgerLoginContentBody.tsx"],
  "sourcesContent": ["import React, { ReactNode } from 'react';\nimport { SelectedAddress } from 'hooks/login/useLedgerLogin';\nimport { LedgerAccountType } from 'reduxStore/slices';\nimport { AddressTable, AddressTablePropsType } from '../AddressTable';\nimport { ConfirmAddress, ConfirmAddressPropsType } from '../ConfirmAddress';\nimport { LedgerConnect, LedgerConnectPropsType } from '../LedgerConnect';\nimport { LedgerLoading, LedgerLoadingPropsType } from '../LedgerLoading';\n\nexport interface LedgerLoginContentBodyProps {\n  accounts: string[];\n  addressTableClassNames?: AddressTablePropsType['addressTableClassNames'];\n  confirmAddressClassNames?: ConfirmAddressPropsType['confirmAddressClassNames'];\n  customContentComponent: ReactNode;\n  customSpinnerComponent: ReactNode;\n  disabledConnectButton?: boolean;\n  error: string;\n  isLoading: boolean;\n  ledgerAccount: LedgerAccountType | null; // Please define the appropriate type\n  ledgerConnectClassNames?: LedgerConnectPropsType['ledgerConnectClassNames'];\n  ledgerLoadingClassNames?: LedgerLoadingPropsType['ledgerLoadingClassNames'];\n  onConfirmSelectedAddress: () => void;\n  onGoToSpecificPage: (page: number) => void;\n  onGoToNextPage: () => void;\n  onGoToPrevPage: () => void;\n  onSelectAddress: (address: SelectedAddress | null) => void;\n  onStartLogin: () => void;\n  selectedAddress: SelectedAddress | null;\n  showAddressList: boolean;\n  startIndex: number;\n  token?: string;\n}\n\nexport const LedgerLoginContentBody = ({\n  isLoading,\n  customSpinnerComponent,\n  customContentComponent,\n  ledgerLoadingClassNames,\n  ledgerAccount,\n  error,\n  confirmAddressClassNames,\n  token,\n  showAddressList,\n  accounts,\n  addressTableClassNames,\n  onConfirmSelectedAddress,\n  onGoToSpecificPage,\n  onGoToNextPage,\n  onGoToPrevPage,\n  onSelectAddress,\n  selectedAddress,\n  startIndex,\n  disabledConnectButton,\n  ledgerConnectClassNames,\n  onStartLogin\n}: LedgerLoginContentBodyProps) => {\n  if (isLoading) {\n    return (\n      <LedgerLoading\n        customSpinnerComponent={customSpinnerComponent}\n        customContentComponent={customContentComponent}\n        ledgerLoadingClassNames={ledgerLoadingClassNames}\n      />\n    );\n  }\n\n  if (ledgerAccount != null && !error) {\n    return (\n      <ConfirmAddress\n        confirmAddressClassNames={confirmAddressClassNames}\n        customContentComponent={customContentComponent}\n        token={token}\n      />\n    );\n  }\n\n  if (showAddressList && !error) {\n    return (\n      <AddressTable\n        accounts={accounts}\n        addressTableClassNames={addressTableClassNames}\n        customContentComponent={customContentComponent}\n        loading={isLoading}\n        onConfirmSelectedAddress={onConfirmSelectedAddress}\n        onGoToSpecificPage={onGoToSpecificPage}\n        onGoToNextPage={onGoToNextPage}\n        onGoToPrevPage={onGoToPrevPage}\n        onSelectAddress={onSelectAddress}\n        selectedAddress={selectedAddress?.address}\n        startIndex={startIndex}\n      />\n    );\n  }\n\n  return (\n    <LedgerConnect\n      customContentComponent={customContentComponent}\n      disabled={disabledConnectButton}\n      error={error}\n      ledgerConnectClassNames={ledgerConnectClassNames}\n      onClick={onStartLogin}\n    />\n  );\n};\n"],
  "mappings": "mMAAA,yBAgCO,GAAM,GAAyB,CAAC,CACrC,YACA,yBACA,yBACA,0BACA,gBACA,QACA,2BACA,QACA,kBACA,WACA,yBACA,2BACA,qBACA,iBACA,iBACA,kBACA,kBACA,aACA,wBACA,0BACA,kBAEI,EAEA,gBAAC,GACC,uBAAwB,EACxB,uBAAwB,EACxB,wBAAyB,EAC3B,EAIA,GAAiB,MAAQ,CAAC,EAE1B,gBAAC,GACC,yBAA0B,EAC1B,uBAAwB,EACxB,MAAO,EACT,EAIA,GAAmB,CAAC,EAEpB,gBAAC,GACC,SAAU,EACV,uBAAwB,EACxB,uBAAwB,EACxB,QAAS,EACT,yBAA0B,EAC1B,mBAAoB,EACpB,eAAgB,EAChB,eAAgB,EAChB,gBAAiB,EACjB,gBAAiB,iBAAiB,QAClC,WAAY,EACd,EAKF,gBAAC,GACC,uBAAwB,EACxB,SAAU,EACV,MAAO,EACP,wBAAyB,EACzB,QAAS,EACX",
  "names": []
}
