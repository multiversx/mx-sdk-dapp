{
  "version": 3,
  "sources": ["../../src/utils/transactions/parseMultiEsdtTransferDataForMultipleTransactions.ts"],
  "sourcesContent": ["import type { Transaction } from '@multiversx/sdk-core';\nimport {\n  MultiSignTransactionType,\n  TransactionDataTokenType,\n  TransactionsDataTokensType\n} from 'types';\nimport { getTokenFromData } from './getTokenFromData';\nimport { parseMultiEsdtTransferData } from './parseMultiEsdtTransferData';\n\nfunction addTransactionDataToParsedInfo({\n  parsedTransactionsByDataField,\n  data,\n  txInfo\n}: {\n  parsedTransactionsByDataField?: TransactionsDataTokensType;\n  data: string;\n  txInfo: TransactionDataTokenType;\n}) {\n  if (!parsedTransactionsByDataField) {\n    return;\n  }\n\n  parsedTransactionsByDataField[data] = txInfo;\n}\n\nexport function parseMultiEsdtTransferDataForMultipleTransactions({\n  transactions\n}: {\n  transactions?: Transaction[];\n}) {\n  const parsedTransactionsByDataField: TransactionsDataTokensType = {};\n  const allTransactions: MultiSignTransactionType[] = [];\n\n  if (!transactions || transactions.length === 0) {\n    return {\n      allTransactions,\n      parsedTransactionsByDataField\n    };\n  }\n\n  transactions.forEach((transaction, transactionIndex) => {\n    const txData = transaction.getData().toString();\n    const multiTxs = parseMultiEsdtTransferData(txData);\n\n    if (multiTxs.length > 0) {\n      multiTxs.forEach((trx, idx) => {\n        const newTx: MultiSignTransactionType = {\n          transaction,\n          multiTxData: trx.data,\n          transactionIndex: idx\n        };\n\n        addTransactionDataToParsedInfo({\n          parsedTransactionsByDataField,\n          data: trx.data,\n          txInfo: {\n            tokenId: trx.token ? trx.token : '',\n            amount: trx.amount ? trx.amount : '',\n            type: trx.type,\n            nonce: trx.nonce ? trx.nonce : '',\n            multiTxData: trx.data,\n            receiver: trx.receiver\n          }\n        });\n\n        allTransactions.push(newTx);\n      });\n    } else {\n      const transactionData = transaction.getData().toString();\n\n      const { tokenId, amount } = getTokenFromData(transactionData);\n\n      if (tokenId) {\n        addTransactionDataToParsedInfo({\n          parsedTransactionsByDataField,\n          data: transactionData,\n          txInfo: {\n            tokenId,\n            amount,\n            receiver: transaction.getReceiver().bech32()\n          }\n        });\n      }\n      allTransactions.push({\n        transaction,\n        transactionIndex,\n        multiTxData: transactionData\n      });\n    }\n  });\n\n  return {\n    allTransactions,\n    parsedTransactionsByDataField\n  };\n}\n"],
  "mappings": "sIAAA,IAMA,IACA,IAEA,WAAwC,CACtC,gCACA,OACA,UAKC,CACD,AAAI,CAAC,GAIL,GAA8B,GAAQ,EACxC,CAEO,WAA2D,CAChE,gBAGC,CACD,GAAM,GAA4D,CAAC,EAC7D,EAA8C,CAAC,EAErD,MAAI,CAAC,GAAgB,EAAa,SAAW,EACpC,CACL,kBACA,+BACF,EAGF,GAAa,QAAQ,CAAC,EAAa,IAAqB,CACtD,GAAM,GAAS,EAAY,QAAQ,EAAE,SAAS,EACxC,EAAW,EAA2B,CAAM,EAElD,GAAI,EAAS,OAAS,EACpB,EAAS,QAAQ,CAAC,EAAK,IAAQ,CAC7B,GAAM,GAAkC,CACtC,cACA,YAAa,EAAI,KACjB,iBAAkB,CACpB,EAEA,EAA+B,CAC7B,gCACA,KAAM,EAAI,KACV,OAAQ,CACN,QAAS,EAAI,MAAQ,EAAI,MAAQ,GACjC,OAAQ,EAAI,OAAS,EAAI,OAAS,GAClC,KAAM,EAAI,KACV,MAAO,EAAI,MAAQ,EAAI,MAAQ,GAC/B,YAAa,EAAI,KACjB,SAAU,EAAI,QAChB,CACF,CAAC,EAED,EAAgB,KAAK,CAAK,CAC5B,CAAC,MACI,CACL,GAAM,GAAkB,EAAY,QAAQ,EAAE,SAAS,EAEjD,CAAE,UAAS,UAAW,EAAiB,CAAe,EAE5D,AAAI,GACF,EAA+B,CAC7B,gCACA,KAAM,EACN,OAAQ,CACN,UACA,SACA,SAAU,EAAY,YAAY,EAAE,OAAO,CAC7C,CACF,CAAC,EAEH,EAAgB,KAAK,CACnB,cACA,mBACA,YAAa,CACf,CAAC,CACH,CACF,CAAC,EAEM,CACL,kBACA,+BACF,EACF",
  "names": []
}
