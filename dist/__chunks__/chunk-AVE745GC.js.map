{
  "version": 3,
  "sources": ["../../src/UI/TransactionsTable/components/TransactionValue/TransactionValue.tsx"],
  "sourcesContent": ["import React, { ReactNode } from 'react';\nimport { faLayerGroup } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classNames from 'classnames';\nimport { DataTestIdsEnum } from 'constants/index';\nimport { withStyles, WithStylesImportType } from 'hocs/withStyles';\nimport { NftEnumType } from 'types/tokens.types';\nimport { FormatAmount } from 'UI/FormatAmount';\nimport { TransactionActionBlock } from 'UI/TransactionInfo/components/TransactionAction/components/TransactionActionBlock';\nimport { WithTransactionType } from 'UI/types';\nimport { getTransactionValue } from 'utils/transactions/getInterpretedTransaction/helpers/getTransactionValue';\n\ninterface TokenWrapperPropsType {\n  children: ReactNode;\n  titleText?: string;\n}\n\nexport interface TransactionValuePropsType extends WithTransactionType {\n  hideMultipleBadge?: boolean;\n}\n\nconst TokenWrapperComponent = ({\n  children,\n  titleText,\n  globalStyles\n}: TokenWrapperPropsType & WithStylesImportType) => (\n  <div\n    className={classNames(globalStyles?.dFlex, globalStyles?.alignItemsCenter)}\n    data-testid={DataTestIdsEnum.transactionValue}\n  >\n    {children}\n\n    {titleText && (\n      <FontAwesomeIcon\n        icon={faLayerGroup}\n        data-testid={DataTestIdsEnum.transactionValueIcon}\n        className={classNames(globalStyles?.ml2, globalStyles?.textSecondary)}\n        title={titleText}\n      />\n    )}\n  </div>\n);\n\nconst TokenWrapper = withStyles(TokenWrapperComponent, {\n  ssrStyles: () =>\n    import('UI/TransactionsTable/components/transactionsTable.styles.scss'),\n  clientStyles: () =>\n    require('UI/TransactionsTable/components/transactionsTable.styles.scss')\n      .default\n});\n\nconst TransactionValueComponent = ({\n  transaction,\n  hideMultipleBadge,\n  styles\n}: TransactionValuePropsType & WithStylesImportType) => {\n  const { egldValueData, tokenValueData, nftValueData } = getTransactionValue({\n    transaction,\n    hideMultipleBadge\n  });\n\n  if (tokenValueData) {\n    return (\n      <div className={styles?.transactionCell}>\n        <TokenWrapper titleText={tokenValueData.titleText}>\n          <TransactionActionBlock.Token {...tokenValueData} />\n        </TokenWrapper>\n      </div>\n    );\n  }\n\n  if (nftValueData) {\n    const hideBadgeForMetaESDT =\n      nftValueData.token.type === NftEnumType.MetaESDT;\n    const badgeText = hideBadgeForMetaESDT ? null : nftValueData.badgeText;\n\n    return (\n      <div className={styles?.transactionCell}>\n        <TokenWrapper titleText={nftValueData.titleText}>\n          <TransactionActionBlock.Nft {...nftValueData} badgeText={badgeText} />\n        </TokenWrapper>\n      </div>\n    );\n  }\n\n  if (egldValueData) {\n    return (\n      <div className={styles?.transactionCell}>\n        <FormatAmount\n          value={egldValueData.value}\n          digits={2}\n          data-testid={DataTestIdsEnum.transactionValue}\n        />\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport const TransactionValue = withStyles(TransactionValueComponent, {\n  ssrStyles: () =>\n    import('UI/TransactionsTable/components/transactionsTable.styles.scss'),\n  clientStyles: () =>\n    require('UI/TransactionsTable/components/transactionsTable.styles.scss')\n      .default\n});\n"],
  "mappings": "oYAAA,IAIA,IAJA,qBACA,iEACA,iEACA,0BAGA,IAIA,IAWA,GAAM,GAAwB,CAAC,CAC7B,WACA,YACA,kBAEA,gBAAC,OACC,UAAW,EAAW,iBAAc,MAAO,iBAAc,gBAAgB,EACzE,cAAa,oBAEZ,EAEA,GACC,gBAAC,GACC,KAAM,EACN,cAAa,uBACb,UAAW,EAAW,iBAAc,IAAK,iBAAc,aAAa,EACpE,MAAO,EACT,CAEJ,EAGI,EAAe,EAAW,EAAuB,CACrD,UAAW,IACT,OAAO,kEACT,aAAc,IACZ,WACG,OACP,CAAC,EAEK,EAA4B,CAAC,CACjC,cACA,oBACA,YACsD,CACtD,GAAM,CAAE,gBAAe,iBAAgB,gBAAiB,EAAoB,CAC1E,cACA,mBACF,CAAC,EAED,GAAI,EACF,MACE,iBAAC,OAAI,UAAW,iBAAQ,iBACtB,gBAAC,GAAa,UAAW,EAAe,WACtC,gBAAC,EAAuB,MAAvB,KAAiC,EAAgB,CACpD,CACF,EAIJ,GAAI,EAAc,CAGhB,GAAM,GAAY,AADhB,EAAa,MAAM,OAAS,WACW,KAAO,EAAa,UAE7D,MACE,iBAAC,OAAI,UAAW,iBAAQ,iBACtB,gBAAC,GAAa,UAAW,EAAa,WACpC,gBAAC,EAAuB,IAAvB,OAA+B,GAA/B,CAA6C,UAAW,GAAW,CACtE,CACF,CAEJ,CAEA,MAAI,GAEA,gBAAC,OAAI,UAAW,iBAAQ,iBACtB,gBAAC,GACC,MAAO,EAAc,MACrB,OAAQ,EACR,cAAa,mBACf,CACF,EAIG,IACT,EAEa,EAAmB,EAAW,EAA2B,CACpE,UAAW,IACT,OAAO,kEACT,aAAc,IACZ,WACG,OACP,CAAC",
  "names": []
}
