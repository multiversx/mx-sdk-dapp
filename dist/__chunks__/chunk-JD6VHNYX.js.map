{
  "version": 3,
  "sources": ["../../src/hooks/transactions/useParseSignedTransactions.tsx"],
  "sourcesContent": ["import { useEffect } from 'react';\nimport { WalletProvider } from '@multiversx/sdk-web-wallet-provider';\nimport { WALLET_PROVIDER_CALLBACK_PARAM } from '@multiversx/sdk-web-wallet-provider';\nimport qs from 'qs';\nimport {\n  DAPP_INIT_ROUTE,\n  TRANSACTION_CANCELLED,\n  WALLET_SIGN_SESSION\n} from 'constants/index';\nimport { useDispatch, useSelector } from 'reduxStore/DappProviderContext';\nimport { dappConfigSelector, networkSelector } from 'reduxStore/selectors';\nimport {\n  moveTransactionsToSignedState,\n  setSignTransactionsCancelMessage\n} from 'reduxStore/slices';\nimport { TransactionBatchStatusesEnum } from 'types/enums.types';\nimport { SignedMessageQueryParamsEnum } from 'types/signedMessage.types';\nimport { removeSearchParamsFromUrl } from 'utils/removeSearchParamsFromUrl';\nimport { parseTransactionAfterSigning } from 'utils/transactions/parseTransactionAfterSigning';\nimport { removeTransactionParamsFromUrl } from 'utils/transactions/removeTransactionParamsFromUrl';\nimport { getWindowLocation } from 'utils/window/getWindowLocation';\n\nconst location = getWindowLocation();\n\nexport function useParseSignedTransactions(\n  onAbort: (sessionId?: string) => void\n) {\n  const network = useSelector(networkSelector);\n  const dispatch = useDispatch();\n  const { shouldFetchWalletUrlOnLoad } = useSelector(dappConfigSelector);\n\n  const { search } = shouldFetchWalletUrlOnLoad\n    ? location\n    : getWindowLocation();\n\n  useEffect(() => {\n    if (search != null) {\n      const searchData = qs.parse(search.replace('?', ''));\n\n      if (searchData && WALLET_SIGN_SESSION in searchData) {\n        const sessionId = String((searchData as any)[WALLET_SIGN_SESSION]);\n\n        const signedTransactions = new WalletProvider(\n          `${network.walletAddress}${DAPP_INIT_ROUTE}`\n        ).getTransactionsFromWalletUrl(search);\n\n        if (searchData.status === TransactionBatchStatusesEnum.cancelled) {\n          dispatch(\n            moveTransactionsToSignedState({\n              sessionId,\n              status: TransactionBatchStatusesEnum.cancelled\n            })\n          );\n          onAbort();\n          removeSearchParamsFromUrl({\n            removeParams: [\n              ...Object.keys(SignedMessageQueryParamsEnum),\n              WALLET_PROVIDER_CALLBACK_PARAM,\n              WALLET_SIGN_SESSION,\n              'address'\n            ],\n            search\n          });\n          dispatch(setSignTransactionsCancelMessage(TRANSACTION_CANCELLED));\n          return;\n        }\n\n        if (signedTransactions.length > 0) {\n          // TODO: check if the transactions are same as the ones in the redux store\n          dispatch(\n            moveTransactionsToSignedState({\n              sessionId,\n              status: TransactionBatchStatusesEnum.signed,\n              transactions: signedTransactions.map((tx) =>\n                parseTransactionAfterSigning(tx)\n              )\n            })\n          );\n\n          const [transaction] = signedTransactions;\n          removeTransactionParamsFromUrl({\n            transaction,\n            search\n          });\n        }\n      }\n    }\n  }, [search]);\n}\n"],
  "mappings": "kpBAAA,IAIA,IAJA,kCACA,qEACA,qFACA,kBAOA,IACA,IAIA,IACA,IACA,IACA,IACA,IACA,IAEA,GAAM,GAAW,EAAkB,EAE5B,YACL,EACA,CACA,GAAM,GAAU,EAAY,CAAe,EACrC,EAAW,EAAY,EACvB,CAAE,8BAA+B,EAAY,CAAkB,EAE/D,CAAE,UAAW,EACf,EACA,EAAkB,EAEtB,EAAU,IAAM,CACd,GAAI,GAAU,KAAM,CAClB,GAAM,GAAa,EAAG,MAAM,EAAO,QAAQ,IAAK,EAAE,CAAC,EAEnD,GAAI,GAAc,IAAuB,GAAY,CACnD,GAAM,GAAY,OAAQ,EAAmB,EAAoB,EAE3D,EAAqB,GAAI,GAC7B,GAAG,EAAQ,gBAAgB,GAC7B,EAAE,6BAA6B,CAAM,EAErC,GAAI,EAAW,SAAW,YAAwC,CAChE,EACE,EAA8B,CAC5B,YACA,OAAQ,WACV,CAAC,CACH,EACA,EAAQ,EACR,EAA0B,CACxB,aAAc,CACZ,GAAG,OAAO,KAAK,CAA4B,EAC3C,EACA,EACA,SACF,EACA,QACF,CAAC,EACD,EAAS,EAAiC,CAAqB,CAAC,EAChE,MACF,CAEA,GAAI,EAAmB,OAAS,EAAG,CAEjC,EACE,EAA8B,CAC5B,YACA,OAAQ,SACR,aAAc,EAAmB,IAAI,AAAC,GACpC,EAA6B,CAAE,CACjC,CACF,CAAC,CACH,EAEA,GAAM,CAAC,GAAe,EACtB,EAA+B,CAC7B,cACA,QACF,CAAC,CACH,CACF,CACF,CACF,EAAG,CAAC,CAAM,CAAC,CACb",
  "names": []
}
