{
  "version": 3,
  "sources": ["../../src/UI/pages/UnlockPage/index.tsx"],
  "sourcesContent": ["import React, { useEffect, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport { withStyles, WithStylesImportType } from 'hocs/withStyles';\nimport { useGetLoginInfo } from 'hooks';\nimport { ExtensionLoginButton } from 'UI/extension/ExtensionLoginButton';\nimport { IframeButton } from 'UI/iframe/IframeLoginButton';\nimport { LedgerLoginButton } from 'UI/ledger/LedgerLoginButton';\nimport { OperaWalletLoginButton } from 'UI/operaWallet/OperaWalletLoginButton';\nimport { PasskeyLoginButton } from 'UI/passkey/PasskeyLoginButton';\nimport { WalletConnectLoginButton } from 'UI/walletConnect/WalletConnectLoginButton';\nimport { WebWalletLoginButton } from 'UI/webWallet/WebWalletLoginButton';\nimport { redirect } from 'utils/window';\n\n// TODO: Rename to \"UnlockPagePropsType\" when sdk-dapp@3.0.0\nexport interface Props {\n  title?: string;\n  className?: string;\n  loginRoute: string;\n  LedgerLoginButtonText?: string;\n  ExtensionLoginButtonText?: string;\n  PasskeyLoginButtonText?: string;\n  OperaWalletLoginButtonText?: string;\n  CrossWindowLoginButtonText?: string;\n  IframeLoginButtonText?: string;\n  WebWalletLoginButtonText?: string;\n  WalletConnectLoginButtonText?: string;\n  WalletConnectV2LoginButtonText?: string;\n  description?: string | ReactNode;\n}\n\nconst UnlockPageComponent = ({\n  loginRoute,\n  title = 'Login',\n  className = 'dapp-unlock-page',\n  LedgerLoginButtonText = 'Ledger',\n  description = 'Pick a login method',\n  WalletConnectLoginButtonText = 'xPortal App',\n  ExtensionLoginButtonText = 'Extension',\n  PasskeyLoginButtonText = 'Passkey',\n  OperaWalletLoginButtonText = 'Opera Crypto Wallet',\n  IframeLoginButtonText = 'Embeded web wallet',\n  WebWalletLoginButtonText = 'Web wallet',\n  globalStyles,\n  styles\n}: Props & WithStylesImportType) => {\n  const generatedClasses = {\n    wrapper: classNames(\n      styles?.home,\n      globalStyles?.dFlex,\n      globalStyles?.flexFill,\n      globalStyles?.alignItemsCenter,\n      className\n    ),\n    title: globalStyles?.mb4,\n    description: globalStyles?.mb4,\n    cardContainer: globalStyles?.mAuto,\n    card: classNames(\n      globalStyles?.card,\n      globalStyles?.my4,\n      globalStyles?.textCenter\n    ),\n    cardBody: classNames(\n      globalStyles?.cardBody,\n      globalStyles?.py4,\n      globalStyles?.px2,\n      globalStyles?.pxSm2,\n      globalStyles?.mxLg4\n    )\n  };\n  const { isLoggedIn } = useGetLoginInfo();\n\n  useEffect(() => {\n    if (isLoggedIn && window) {\n      redirect(loginRoute);\n    }\n  }, [isLoggedIn]);\n\n  return (\n    <div className={generatedClasses.wrapper}>\n      <div className={generatedClasses.cardContainer}>\n        <div className={generatedClasses.card}>\n          <div className={generatedClasses.cardBody}>\n            <h4 className={classNames(globalStyles?.h4, globalStyles?.title)}>\n              {title}\n            </h4>\n\n            <p className={generatedClasses.description}>{description}</p>\n\n            <ExtensionLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={ExtensionLoginButtonText}\n            />\n\n            <PasskeyLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={PasskeyLoginButtonText}\n            />\n\n            <IframeButton\n              callbackRoute={loginRoute}\n              loginButtonText={IframeLoginButtonText}\n            />\n\n            <OperaWalletLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={OperaWalletLoginButtonText}\n            />\n\n            <WebWalletLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={WebWalletLoginButtonText}\n            />\n\n            <LedgerLoginButton\n              loginButtonText={LedgerLoginButtonText}\n              callbackRoute={loginRoute}\n            />\n\n            <WalletConnectLoginButton\n              callbackRoute={loginRoute}\n              loginButtonText={WalletConnectLoginButtonText}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const UnlockPage = withStyles(UnlockPageComponent, {\n  ssrStyles: () => import('UI/pages/UnlockPage/unlockPageStyles.scss'),\n  clientStyles: () =>\n    require('UI/pages/UnlockPage/unlockPageStyles.scss').default\n});\n"],
  "mappings": "shBAAA,yCACA,0BAUA,IAmBA,GAAM,GAAsB,CAAC,CAC3B,aACA,QAAQ,QACR,YAAY,mBACZ,wBAAwB,SACxB,cAAc,sBACd,+BAA+B,cAC/B,2BAA2B,YAC3B,yBAAyB,UACzB,6BAA6B,sBAC7B,wBAAwB,qBACxB,2BAA2B,aAC3B,eACA,YACkC,CAClC,GAAM,GAAmB,CACvB,QAAS,EACP,iBAAQ,KACR,iBAAc,MACd,iBAAc,SACd,iBAAc,iBACd,CACF,EACA,MAAO,iBAAc,IACrB,YAAa,iBAAc,IAC3B,cAAe,iBAAc,MAC7B,KAAM,EACJ,iBAAc,KACd,iBAAc,IACd,iBAAc,UAChB,EACA,SAAU,EACR,iBAAc,SACd,iBAAc,IACd,iBAAc,IACd,iBAAc,MACd,iBAAc,KAChB,CACF,EACM,CAAE,cAAe,EAAgB,EAEvC,SAAU,IAAM,CACd,AAAI,GAAc,QAChB,EAAS,CAAU,CAEvB,EAAG,CAAC,CAAU,CAAC,EAGb,gBAAC,OAAI,UAAW,EAAiB,SAC/B,gBAAC,OAAI,UAAW,EAAiB,eAC/B,gBAAC,OAAI,UAAW,EAAiB,MAC/B,gBAAC,OAAI,UAAW,EAAiB,UAC/B,gBAAC,MAAG,UAAW,EAAW,iBAAc,GAAI,iBAAc,KAAK,GAC5D,CACH,EAEA,gBAAC,KAAE,UAAW,EAAiB,aAAc,CAAY,EAEzD,gBAAC,GACC,cAAe,EACf,gBAAiB,EACnB,EAEA,gBAAC,GACC,cAAe,EACf,gBAAiB,EACnB,EAEA,gBAAC,GACC,cAAe,EACf,gBAAiB,EACnB,EAEA,gBAAC,GACC,cAAe,EACf,gBAAiB,EACnB,EAEA,gBAAC,GACC,cAAe,EACf,gBAAiB,EACnB,EAEA,gBAAC,GACC,gBAAiB,EACjB,cAAe,EACjB,EAEA,gBAAC,GACC,cAAe,EACf,gBAAiB,EACnB,CACF,CACF,CACF,CACF,CAEJ,EAEa,EAAa,EAAW,EAAqB,CACxD,UAAW,IAAM,OAAO,8CACxB,aAAc,IACZ,WAAqD,OACzD,CAAC",
  "names": []
}
