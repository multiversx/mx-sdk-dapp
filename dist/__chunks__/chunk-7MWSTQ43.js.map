{
  "version": 3,
  "sources": ["../../src/hooks/transactions/batch/tracker/useBatchTransactionsTracker.ts"],
  "sourcesContent": ["import { useEffect } from 'react';\nimport { useGetAccount } from 'hooks/account';\nimport { useGetBatches } from 'hooks/transactions/batch/useGetBatches';\nimport { buildBatchId } from 'hooks/transactions/helpers/buildBatchId';\nimport { useGetSignedTransactions } from 'hooks/transactions/useGetSignedTransactions';\nimport { useRegisterWebsocketListener } from 'hooks/websocketListener';\nimport {\n  BatchTransactionsWSResponseType,\n  TransactionBatchStatusesEnum\n} from 'types';\nimport { useCheckBatchesOnWsFailureFallback } from './useCheckBatchesOnWsFailureFallback';\nimport { useCheckHangingBatchesFallback } from './useCheckHangingBatchesFallback';\nimport { useVerifyBatchStatus } from './useVerifyBatchStatus';\n\nexport type BatchTransactionsTrackerProps = {\n  onSuccess?: (sessionId: string | null) => void;\n  onFail?: (sessionId: string | null, errorMessage?: string) => void;\n};\n\nexport const useBatchTransactionsTracker = ({\n  onSuccess,\n  onFail\n}: BatchTransactionsTrackerProps) => {\n  const { batches } = useGetBatches();\n  const { signedTransactionsArray } = useGetSignedTransactions();\n  const { address } = useGetAccount();\n\n  const { verifyBatchStatus } = useVerifyBatchStatus({\n    onSuccess,\n    onFail\n  });\n\n  const onMessage = () => {\n    // Do nothing, used for backwards compatibility to avoid breaking changes\n    // TODO: Will be removed in the next major release\n  };\n\n  const onBatchUpdate = async (data: BatchTransactionsWSResponseType) => {\n    await verifyBatchStatus({ batchId: data.batchId });\n  };\n\n  const checkAllBatches = async () => {\n    for (const [sessionId, session] of signedTransactionsArray) {\n      const batchId = buildBatchId({\n        sessionId,\n        address\n      });\n\n      const batchDoesNotExists = !Boolean(batches[batchId]);\n      const isPending = session.status !== TransactionBatchStatusesEnum.sent;\n      const isCompleted = !isPending;\n\n      if (isCompleted || batchDoesNotExists) {\n        continue;\n      }\n\n      await verifyBatchStatus({ batchId });\n    }\n  };\n\n  // register ws listener\n  useRegisterWebsocketListener(onMessage, onBatchUpdate);\n\n  // Fallbacks\n  useCheckBatchesOnWsFailureFallback({\n    onSuccess,\n    onFail\n  });\n\n  useCheckHangingBatchesFallback({\n    onSuccess,\n    onFail\n  });\n\n  useEffect(() => {\n    checkAllBatches();\n  }, []);\n};\n"],
  "mappings": "uZAAA,sCAMA,IAaO,GAAM,GAA8B,CAAC,CAC1C,YACA,YACmC,CACnC,GAAM,CAAE,WAAY,EAAc,EAC5B,CAAE,2BAA4B,EAAyB,EACvD,CAAE,WAAY,EAAc,EAE5B,CAAE,qBAAsB,EAAqB,CACjD,YACA,QACF,CAAC,EAEK,EAAY,IAAM,CAGxB,EAEM,EAAgB,AAAO,GAA0C,0BACrE,KAAM,GAAkB,CAAE,QAAS,EAAK,OAAQ,CAAC,CACnD,GAEM,EAAkB,IAAY,0BAClC,OAAW,CAAC,EAAW,IAAY,GAAyB,CAC1D,GAAM,GAAU,EAAa,CAC3B,YACA,SACF,CAAC,EAEK,EAAqB,CAAC,QAAQ,EAAQ,EAAQ,EAIpD,AAAI,AAFgB,CADF,GAAQ,SAAW,SAGlB,GAInB,MAAM,GAAkB,CAAE,SAAQ,CAAC,EACrC,CACF,GAGA,EAA6B,EAAW,CAAa,EAGrD,EAAmC,CACjC,YACA,QACF,CAAC,EAED,EAA+B,CAC7B,YACA,QACF,CAAC,EAED,EAAU,IAAM,CACd,EAAgB,CAClB,EAAG,CAAC,CAAC,CACP",
  "names": []
}
