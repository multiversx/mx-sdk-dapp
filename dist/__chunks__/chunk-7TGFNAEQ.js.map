{
  "version": 3,
  "sources": ["../../src/UI/SignTransactionsModals/SignWithDeviceModal/components/components/ConfirmAmount/components/ConfirmAmountNftSft/ConfirmAmountNftSft.tsx"],
  "sourcesContent": ["import React, { MouseEvent } from 'react';\nimport { faArrowUpRightFromSquare } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classNames from 'classnames';\n\nimport { DataTestIdsEnum } from 'constants/index';\nimport { withStyles } from 'hocs/withStyles';\nimport { TokenOptionType, useGetNetworkConfig } from 'hooks';\nimport { safeWindow } from 'lib/sdkDappUtils';\nimport { NftEnumType } from 'types/tokens.types';\nimport {\n  explorerUrlBuilder,\n  getExplorerLink\n} from 'utils/transactions/getInterpretedTransaction/helpers';\n\nimport { WithStylesImportType } from '../../../../../../../../hocs/useStyles';\n\nexport interface ConfirmAmountNftSftPropsType extends WithStylesImportType {\n  type?: NftEnumType;\n  amount: string;\n  tokenDetails: TokenOptionType;\n}\n\nconst ConfirmAmountNftSftComponent = ({\n  styles,\n  amount,\n  type,\n  tokenDetails\n}: ConfirmAmountNftSftPropsType) => {\n  const { network } = useGetNetworkConfig();\n  const { identifier, tokenAvatar, name } = tokenDetails;\n\n  const isSft = NftEnumType.SemiFungibleESDT === type;\n  const mirroredSftAvatarsCount = 4;\n  const duplicatedSftAvatars = Array(\n    Math.min(mirroredSftAvatarsCount, Number(amount))\n  ).fill(null);\n\n  const handleNftSftClick = (event: MouseEvent<HTMLElement>) => {\n    if (!identifier) {\n      return;\n    }\n\n    const explorerLink = getExplorerLink({\n      explorerAddress: network.explorerAddress,\n      to: explorerUrlBuilder.nftDetails(identifier)\n    });\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (safeWindow?.open) {\n      safeWindow.open(explorerLink);\n    }\n  };\n\n  return (\n    <div onClick={handleNftSftClick} className={styles?.confirmAmountNftSft}>\n      <div className={styles?.confirmAmountNftSftWrapper}>\n        {tokenAvatar ? (\n          <div className={styles?.confirmAmountNftSftIconWrapper}>\n            {duplicatedSftAvatars.map((_, index) => (\n              <img\n                src={tokenAvatar}\n                alt={type}\n                key={`nft-sft-avatar-${index}`}\n                style={{\n                  opacity: 1 - 0.25 * index,\n                  zIndex: duplicatedSftAvatars.length - index,\n                  marginLeft: (duplicatedSftAvatars.length - index - 1) * 4\n                }}\n                className={classNames(styles?.confirmAmountNftSftIcon, {\n                  [styles?.confirmAmountNftSftIconRelative]: index === 0\n                })}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className={styles?.confirmAmountNftSftIconWrapper}>\n            <div className={styles?.confirmAmountNftSftIconText}>\n              {isSft ? 'SFT' : 'NFT'}\n            </div>\n          </div>\n        )}\n\n        <div className={styles?.confirmAmountNftSftContent}>\n          <div\n            className={styles?.confirmAmountNftSftName}\n            data-testid={DataTestIdsEnum.nftLabel}\n          >\n            {name}\n          </div>\n\n          <div\n            className={styles?.confirmAmountNftSftTicker}\n            data-testid={DataTestIdsEnum.nftIdentifier}\n          >\n            {identifier}\n          </div>\n        </div>\n      </div>\n\n      <FontAwesomeIcon\n        icon={faArrowUpRightFromSquare}\n        className={styles?.confirmAmountNftSftIcon}\n      />\n    </div>\n  );\n};\n\nexport const ConfirmAmountNftSft = withStyles(ConfirmAmountNftSftComponent, {\n  ssrStyles: () =>\n    import(\n      'UI/SignTransactionsModals/SignWithDeviceModal/components/components/ConfirmAmount/components/ConfirmAmountNftSft/confirmAmountNftSftStyles.scss'\n    ),\n  clientStyles: () =>\n    require('UI/SignTransactionsModals/SignWithDeviceModal/components/components/ConfirmAmount/components/ConfirmAmountNftSft/confirmAmountNftSftStyles.scss')\n      .default\n});\n"],
  "mappings": "qaAAA,IAKA,IALA,qBACA,6EACA,iEACA,0BAKA,IACA,IACA,IAaA,GAAM,GAA+B,CAAC,CACpC,SACA,SACA,OACA,kBACkC,CAClC,GAAM,CAAE,WAAY,EAAoB,EAClC,CAAE,aAAY,cAAa,QAAS,EAEpC,EAAQ,qBAAiC,EAEzC,EAAuB,MAC3B,KAAK,IAFyB,EAEI,OAAO,CAAM,CAAC,CAClD,EAAE,KAAK,IAAI,EAoBX,MACE,iBAAC,OAAI,QAnBmB,AAAC,GAAmC,CAtChE,MAuCI,GAAI,CAAC,EACH,OAGF,GAAM,GAAe,EAAgB,CACnC,gBAAiB,EAAQ,gBACzB,GAAI,EAAmB,WAAW,CAAU,CAC9C,CAAC,EAED,EAAM,eAAe,EACrB,EAAM,gBAAgB,EAElB,eAAY,MACd,EAAW,KAAK,CAAY,CAEhC,EAGmC,UAAW,iBAAQ,qBAClD,gBAAC,OAAI,UAAW,iBAAQ,4BACrB,EACC,gBAAC,OAAI,UAAW,iBAAQ,gCACrB,EAAqB,IAAI,CAAC,EAAG,IAC5B,gBAAC,OACC,IAAK,EACL,IAAK,EACL,IAAK,kBAAkB,IACvB,MAAO,CACL,QAAS,EAAI,IAAO,EACpB,OAAQ,EAAqB,OAAS,EACtC,WAAa,GAAqB,OAAS,EAAQ,GAAK,CAC1D,EACA,UAAW,EAAW,iBAAQ,wBAAyB,CACrD,CAAC,iBAAQ,iCAAkC,IAAU,CACvD,CAAC,EACH,CACD,CACH,EAEA,gBAAC,OAAI,UAAW,iBAAQ,gCACtB,gBAAC,OAAI,UAAW,iBAAQ,6BACrB,EAAQ,MAAQ,KACnB,CACF,EAGF,gBAAC,OAAI,UAAW,iBAAQ,4BACtB,gBAAC,OACC,UAAW,iBAAQ,wBACnB,cAAa,YAEZ,CACH,EAEA,gBAAC,OACC,UAAW,iBAAQ,0BACnB,cAAa,iBAEZ,CACH,CACF,CACF,EAEA,gBAAC,GACC,KAAM,EACN,UAAW,iBAAQ,wBACrB,CACF,CAEJ,EAEa,EAAsB,EAAW,EAA8B,CAC1E,UAAW,IACT,OACE,oJAEJ,aAAc,IACZ,WACG,OACP,CAAC",
  "names": []
}
