{
  "version": 3,
  "sources": ["../../src/UI/SignTransactionsModals/SignTransactionsModals.tsx"],
  "sourcesContent": ["import React, { useCallback } from 'react';\n\nimport { useGetLoginInfo } from 'hooks';\nimport { LoginMethodsEnum } from 'types';\n\nimport { ConfirmationScreen, DeviceConfirmationScreen } from './components';\nimport { SignWithCrossWindowWalletModal } from './SignWithCrossWindowWalletModal';\nimport { SignWithExtensionModal } from './SignWithExtensionModal';\nimport { SignWithExtraModal } from './SignWithExtraModal';\nimport { SignWithIframeModal } from './SignWithIframeModal';\nimport { SignWithLedgerModal } from './SignWithLedgerModal';\nimport { SignWithMetamaskModal } from './SignWithMetamaskModal';\nimport { SignWithOperaModal } from './SignWithOperaModal';\nimport { SignWithPasskeyModal } from './SignWithPasskeyModal';\nimport { SignWithWalletConnectModal } from './SignWithWalletConnectModal';\nimport {\n  CustomConfirmScreensType,\n  ScreenType,\n  SignPropsType\n} from './types/signTransactionsModals.types';\n\nexport interface SignTransactionsModalsPropsType {\n  className?: string;\n  CustomConfirmScreens?: CustomConfirmScreensType;\n  verifyReceiverScam?: SignPropsType['verifyReceiverScam'];\n  GuardianScreen?: SignPropsType['GuardianScreen'];\n}\n\nexport const SignTransactionsModals = ({\n  className,\n  CustomConfirmScreens,\n  GuardianScreen,\n  verifyReceiverScam = true\n}: SignTransactionsModalsPropsType) => {\n  const { loginMethod } = useGetLoginInfo();\n\n  const ConfirmScreens: CustomConfirmScreensType = {\n    Ledger: CustomConfirmScreens?.Ledger ?? SignWithLedgerModal,\n    WalletConnect:\n      CustomConfirmScreens?.WalletConnect ?? SignWithWalletConnectModal,\n    Extension: CustomConfirmScreens?.Extension ?? SignWithExtensionModal,\n    Passkey: CustomConfirmScreens?.Passkey ?? SignWithPasskeyModal,\n    Metamask: CustomConfirmScreens?.Metamask ?? SignWithMetamaskModal,\n    Iframe: CustomConfirmScreens?.Iframe ?? SignWithIframeModal,\n    Opera: CustomConfirmScreens?.Opera ?? SignWithOperaModal,\n    CrossWindow:\n      CustomConfirmScreens?.CrossWindow ?? SignWithCrossWindowWalletModal,\n    // The purpose of having this is to have a consistent flow of transaction signing.\n    // The logic for redirecting to the web wallet is placed in the ConfirmationScreen component,\n    // so we have to render that component when we are logged in with the web wallet provider\n    Wallet: () => <></>,\n    Extra: CustomConfirmScreens?.Extra ?? SignWithExtraModal\n  };\n\n  const renderScreen = useCallback(\n    ({ Screen, isDevice }: { Screen?: ScreenType; isDevice?: boolean }) => {\n      const ConfirmationScreenWrapper = isDevice\n        ? DeviceConfirmationScreen\n        : ConfirmationScreen;\n\n      return (\n        <ConfirmationScreenWrapper\n          Screen={Screen}\n          GuardianScreen={GuardianScreen}\n          verifyReceiverScam={verifyReceiverScam}\n          className={className}\n        />\n      );\n    },\n    [verifyReceiverScam, className]\n  );\n  switch (loginMethod) {\n    case LoginMethodsEnum.ledger:\n      return renderScreen({ Screen: ConfirmScreens.Ledger, isDevice: true });\n    case LoginMethodsEnum.walletconnectv2:\n      return renderScreen({ Screen: ConfirmScreens.WalletConnect });\n    case LoginMethodsEnum.extension:\n      return renderScreen({ Screen: ConfirmScreens.Extension });\n    case LoginMethodsEnum.passkey:\n      return renderScreen({ Screen: ConfirmScreens.Passkey, isDevice: true });\n    case LoginMethodsEnum.metamask:\n      return renderScreen({ Screen: ConfirmScreens.Metamask, isDevice: true });\n    case LoginMethodsEnum.opera:\n      return renderScreen({ Screen: ConfirmScreens.Opera });\n    case LoginMethodsEnum.crossWindow:\n      return renderScreen({ Screen: ConfirmScreens.CrossWindow });\n    case LoginMethodsEnum.iframe:\n      return renderScreen({ Screen: ConfirmScreens.Iframe });\n    case LoginMethodsEnum.wallet:\n      return renderScreen({ Screen: ConfirmScreens.Wallet });\n    case LoginMethodsEnum.extra:\n      return renderScreen({ Screen: ConfirmScreens.Extra, isDevice: true });\n    default:\n      return null;\n  }\n};\n"],
  "mappings": "gjBAAA,2CAGA,IAyBO,GAAM,GAAyB,CAAC,CACrC,YACA,uBACA,iBACA,qBAAqB,MACgB,CAjCvC,sBAkCE,GAAM,CAAE,eAAgB,EAAgB,EAElC,EAA2C,CAC/C,OAAQ,oBAAsB,SAAtB,OAAgC,EACxC,cACE,oBAAsB,gBAAtB,OAAuC,EACzC,UAAW,oBAAsB,YAAtB,OAAmC,EAC9C,QAAS,oBAAsB,UAAtB,OAAiC,EAC1C,SAAU,oBAAsB,WAAtB,OAAkC,EAC5C,OAAQ,oBAAsB,SAAtB,OAAgC,EACxC,MAAO,oBAAsB,QAAtB,OAA+B,EACtC,YACE,oBAAsB,cAAtB,OAAqC,EAIvC,OAAQ,IAAM,+BAAE,EAChB,MAAO,oBAAsB,QAAtB,OAA+B,CACxC,EAEM,EAAe,EACnB,CAAC,CAAE,SAAQ,cAMP,gBALgC,EAC9B,EACA,EAGD,CACC,OAAQ,EACR,eAAgB,EAChB,mBAAoB,EACpB,UAAW,EACb,EAGJ,CAAC,EAAoB,CAAS,CAChC,EACA,OAAQ,OACD,SACH,MAAO,GAAa,CAAE,OAAQ,EAAe,OAAQ,SAAU,EAAK,CAAC,MAClE,kBACH,MAAO,GAAa,CAAE,OAAQ,EAAe,aAAc,CAAC,MACzD,YACH,MAAO,GAAa,CAAE,OAAQ,EAAe,SAAU,CAAC,MACrD,UACH,MAAO,GAAa,CAAE,OAAQ,EAAe,QAAS,SAAU,EAAK,CAAC,MACnE,WACH,MAAO,GAAa,CAAE,OAAQ,EAAe,SAAU,SAAU,EAAK,CAAC,MACpE,QACH,MAAO,GAAa,CAAE,OAAQ,EAAe,KAAM,CAAC,MACjD,cACH,MAAO,GAAa,CAAE,OAAQ,EAAe,WAAY,CAAC,MACvD,SACH,MAAO,GAAa,CAAE,OAAQ,EAAe,MAAO,CAAC,MAClD,SACH,MAAO,GAAa,CAAE,OAAQ,EAAe,MAAO,CAAC,MAClD,QACH,MAAO,GAAa,CAAE,OAAQ,EAAe,MAAO,SAAU,EAAK,CAAC,UAEpE,MAAO,MAEb",
  "names": []
}
