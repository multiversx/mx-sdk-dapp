{
  "version": 3,
  "sources": ["../../src/utils/transactions/parseTransactionAfterSigning.ts"],
  "sourcesContent": ["import { Transaction } from '@multiversx/sdk-core/out';\nimport { PlainSignedTransaction } from '@multiversx/sdk-web-wallet-provider/out/plainSignedTransaction';\nimport { newTransaction } from 'models';\nimport { SignedTransactionType } from 'types';\nimport { TransactionServerStatusesEnum } from 'types/enums.types';\nimport { isGuardianTx } from './isGuardianTx';\n\nexport function parseTransactionAfterSigning(\n  signedTransaction: Transaction | PlainSignedTransaction\n) {\n  const isComplexTransaction =\n    Object.getPrototypeOf(signedTransaction).toPlainObject != null;\n\n  const transaction = isComplexTransaction\n    ? (signedTransaction as Transaction)\n    : newTransaction(signedTransaction as PlainSignedTransaction);\n\n  const parsedTransaction: SignedTransactionType = {\n    ...transaction.toPlainObject(),\n    hash: transaction.getHash().hex(),\n    senderUsername: transaction.getSenderUsername().valueOf(),\n    receiverUsername: transaction.getReceiverUsername().valueOf(),\n    status: TransactionServerStatusesEnum.pending\n  };\n\n  // TODO: Remove when the protocol supports usernames for guardian transactions\n  if (isGuardianTx({ data: parsedTransaction.data, onlySetGuardian: true })) {\n    delete parsedTransaction.senderUsername;\n    delete parsedTransaction.receiverUsername;\n  }\n\n  return parsedTransaction;\n}\n"],
  "mappings": "oOAOO,WACL,EACA,CAIA,GAAM,GAAc,AAFlB,OAAO,eAAe,CAAiB,EAAE,eAAiB,KAGvD,EACD,EAAe,CAA2C,EAExD,EAA2C,OAC5C,EAAY,cAAc,GADkB,CAE/C,KAAM,EAAY,QAAQ,EAAE,IAAI,EAChC,eAAgB,EAAY,kBAAkB,EAAE,QAAQ,EACxD,iBAAkB,EAAY,oBAAoB,EAAE,QAAQ,EAC5D,OAAQ,SACV,GAGA,MAAI,GAAa,CAAE,KAAM,EAAkB,KAAM,gBAAiB,EAAK,CAAC,GACtE,OAAO,GAAkB,eACzB,MAAO,GAAkB,kBAGpB,CACT,CAhCA,iBAEA,IAEA,IACA",
  "names": []
}
