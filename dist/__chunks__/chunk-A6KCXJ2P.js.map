{
  "version": 3,
  "sources": ["../../src/wrappers/AxiosInterceptorContext/components/AxiosInterceptorContextProvider.tsx"],
  "sourcesContent": ["import React, {\n  useContext,\n  useState,\n  Dispatch,\n  ReactNode,\n  SetStateAction,\n  createContext\n} from 'react';\nimport { loginInfoSelector } from 'reduxStore/selectors';\nimport { RootState, store } from 'reduxStore/store';\nimport { LoginInfoStateType } from '../../../reduxStore/slices/loginInfoSlice';\n\nexport interface AxiosInterceptorContextPropsType {\n  address?: string;\n  isLoggedIn: boolean;\n  setAddress: Dispatch<SetStateAction<string | undefined>>;\n  loginInfo: LoginInfoStateType;\n  setLoginInfo: (props: LoginInfoStateType) => void;\n}\n\nexport interface AxiosInterceptorContextProviderPropsType {\n  children: ReactNode;\n}\n\nconst AxiosInterceptorContext = createContext(\n  {} as AxiosInterceptorContextPropsType\n);\n\nconst appState: RootState = store.getState();\n\n/**\n * Used to lift the state of `<DappProvider>`, as a helper for setting interceptors\n * @example\n * <AxiosInterceptorContextProvider>\n *  <AxiosInterceptor> // set interceptors with `nativeAuth` Bearer token\n *   <Navbar /> // optionally get access to `isLoggedIn` and `address`\n *   <DappProvider> // all `axios` calls inside will use interceptors set above\n *    <Router />\n *    <LoginInfoListener/>\n *   <DappProvider/>\n *  <AxiosInterceptor/>\n * <AxiosInterceptorContextProvider/>\n */\nexport function AxiosInterceptorContextProvider({\n  children\n}: AxiosInterceptorContextProviderPropsType) {\n  const [address, setAddress] = useState<string>();\n\n  const [loginInfo, setLoginInfo] = useState<LoginInfoStateType>(\n    loginInfoSelector(appState)\n  );\n\n  const value: AxiosInterceptorContextPropsType = {\n    address,\n    setAddress,\n    isLoggedIn: Boolean(address),\n    loginInfo,\n    setLoginInfo: (data: LoginInfoStateType) => setLoginInfo(data)\n  };\n\n  return (\n    <AxiosInterceptorContext.Provider value={value}>\n      {children}\n    </AxiosInterceptorContext.Provider>\n  );\n}\n\nexport function useAxiosInterceptorContext(): AxiosInterceptorContextPropsType {\n  const context = useContext(AxiosInterceptorContext);\n\n  if (context === undefined || Object.values(context).length === 0) {\n    throw new Error(\n      'useAxiosInterceptorContext must be used within an AxiosInterceptorContextProvider'\n    );\n  }\n  return context;\n}\n"],
  "mappings": "uKAAA,IAQA,IACA,IATA,uEAwBA,GAAM,GAA0B,EAC9B,CAAC,CACH,EAEM,EAAsB,EAAM,SAAS,EAepC,WAAyC,CAC9C,YAC2C,CAC3C,GAAM,CAAC,EAAS,GAAc,EAAiB,EAEzC,CAAC,EAAW,GAAgB,EAChC,EAAkB,CAAQ,CAC5B,EAEM,EAA0C,CAC9C,UACA,aACA,WAAY,QAAQ,CAAO,EAC3B,YACA,aAAc,AAAC,GAA6B,EAAa,CAAI,CAC/D,EAEA,MACE,iBAAC,EAAwB,SAAxB,CAAiC,MAAO,GACtC,CACH,CAEJ,CAEO,YAAwE,CAC7E,GAAM,GAAU,EAAW,CAAuB,EAElD,GAAI,IAAY,QAAa,OAAO,OAAO,CAAO,EAAE,SAAW,EAC7D,KAAM,IAAI,OACR,mFACF,EAEF,MAAO,EACT",
  "names": []
}
