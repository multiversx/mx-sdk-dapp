{
  "version": 3,
  "sources": ["../../src/components/ProviderInitializer/helpers/getIframeProvider.ts"],
  "sourcesContent": ["import {\n  IframeLoginTypes,\n  IframeProvider\n} from 'lib/sdkWebWalletIframeProvider';\n\ninterface GetIframeProviderPropsType {\n  address: string;\n  walletUrl: string;\n  loginType?: IframeLoginTypes;\n}\n\nexport async function getIframeProvider({\n  address,\n  walletUrl,\n  loginType\n}: GetIframeProviderPropsType) {\n  try {\n    const provider = IframeProvider.getInstance();\n\n    if (provider.isInitialized()) {\n      return provider;\n    }\n\n    switch (loginType) {\n      case IframeLoginTypes.passkey:\n        provider.setLoginType(IframeLoginTypes.passkey);\n        break;\n      case IframeLoginTypes.metamask:\n        provider.setLoginType(IframeLoginTypes.metamask);\n        break;\n      default:\n        break;\n    }\n\n    provider.setAddress(address).setWalletUrl(walletUrl);\n    const success = await provider.init();\n\n    if (success) {\n      return provider;\n    }\n\n    console.error('Could not initialise IframeProvider');\n  } catch (err) {\n    console.error('Unable to login to IframeProvider', err);\n  }\n  return null;\n}\n"],
  "mappings": "yFAAA,IAWA,WAAwC,EAIT,mCAJS,CACtC,UACA,YACA,aAC6B,CAC7B,GAAI,CACF,GAAM,GAAW,EAAe,YAAY,EAE5C,GAAI,EAAS,cAAc,EACzB,MAAO,GAGT,OAAQ,OACD,GAAiB,QACpB,EAAS,aAAa,EAAiB,OAAO,EAC9C,UACG,GAAiB,SACpB,EAAS,aAAa,EAAiB,QAAQ,EAC/C,cAEA,MAMJ,GAHA,EAAS,WAAW,CAAO,EAAE,aAAa,CAAS,EACnC,KAAM,GAAS,KAAK,EAGlC,MAAO,GAGT,QAAQ,MAAM,qCAAqC,CACrD,OAAS,EAAP,CACA,QAAQ,MAAM,oCAAqC,CAAG,CACxD,CACA,MAAO,KACT",
  "names": []
}
