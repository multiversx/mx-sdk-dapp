{
  "version": 3,
  "sources": ["../../src/utils/operations/timeRemaining.ts"],
  "sourcesContent": ["export function getRemainingTime(ms: number) {\n  const days = Math.floor(ms / (24 * 60 * 60 * 1000));\n  const daysms = ms % (24 * 60 * 60 * 1000);\n  const hrs = Math.floor(daysms / (60 * 60 * 1000));\n  const hrsms = daysms % (60 * 60 * 1000);\n  const mins = Math.floor(hrsms / (60 * 1000));\n  const minsms = hrsms % (60 * 1000);\n  const secs = Math.floor(minsms / 1000);\n\n  let secsString = secs + ' sec';\n  let minsString = mins + ' min';\n  let hrsString = hrs + ' hr';\n  let daysString = days + ' day';\n\n  if (secs > 1) {\n    secsString = secs + ' sec';\n  }\n  if (mins > 1) {\n    minsString = mins + ' min';\n  }\n  if (hrs > 1) {\n    hrsString = hrs + ' hrs';\n  }\n  if (days > 1) {\n    daysString = days + ' days';\n  }\n\n  if (days >= 1) {\n    return daysString + ' ' + hrsString;\n  }\n  if (hrs >= 1) {\n    const minutesString = mins === 0 ? '' : ' ' + minsString;\n    return hrsString + minutesString;\n  }\n  if (mins >= 1) {\n    const secString = secs === 0 ? '' : ' ' + secsString;\n    return minsString + secString;\n  }\n\n  return secsString;\n}\n\nfunction getShortDateTimeFormat(datetime: string) {\n  const parts = datetime.split(' ');\n  if (parts.length > 1) {\n    return `${parts[0]} ${parts[1]}`;\n  }\n  return datetime;\n}\n\nconst getUTCDateNow = (date = new Date(), extendedSeconds = 0) =>\n  Date.UTC(\n    date.getUTCFullYear(),\n    date.getUTCMonth(),\n    date.getUTCDate(),\n    date.getUTCHours(),\n    date.getUTCMinutes(),\n    date.getUTCSeconds() + extendedSeconds,\n    date.getUTCMilliseconds()\n  );\n\nfunction getUTCdiffInMs(duration: number) {\n  const date = new Date();\n  const startDate = getUTCDateNow(date);\n  const endDate = getUTCDateNow(date, duration);\n  const diffInMs = Math.max(endDate - startDate, 0);\n  return diffInMs;\n}\n\nexport function timeRemaining(duration: number, short = true) {\n  const diffInMs = getUTCdiffInMs(duration);\n  const remaining = getRemainingTime(diffInMs);\n  return short ? getShortDateTimeFormat(remaining) : remaining;\n}\n\nfunction getDifferenceInMs(timestamp: number) {\n  const dateNow = new Date().getTime();\n  const difference = dateNow - timestamp;\n  const diffInMs = Math.max(difference, 0);\n  return diffInMs;\n}\n\nexport function timeAgo(timestamp: number, short = true) {\n  const diffInMs = getDifferenceInMs(timestamp);\n  const remaining = getRemainingTime(diffInMs);\n\n  return short ? getShortDateTimeFormat(remaining) : remaining;\n}\n"],
  "mappings": "0CAAO,WAA0B,EAAY,CAC3C,GAAM,GAAO,KAAK,MAAM,EAAM,KAAoB,EAC5C,EAAS,EAAM,IAAK,GAAK,GAAK,KAC9B,EAAM,KAAK,MAAM,EAAU,IAAK,GAAK,IAAK,EAC1C,EAAQ,EAAU,IAAK,GAAK,KAC5B,EAAO,KAAK,MAAM,EAAS,IAAK,IAAK,EACrC,EAAS,EAAS,IAAK,KACvB,EAAO,KAAK,MAAM,EAAS,GAAI,EAEjC,EAAa,EAAO,OACpB,EAAa,EAAO,OACpB,EAAY,EAAM,MAClB,EAAa,EAAO,OAexB,GAbI,EAAO,GACT,GAAa,EAAO,QAElB,EAAO,GACT,GAAa,EAAO,QAElB,EAAM,GACR,GAAY,EAAM,QAEhB,EAAO,GACT,GAAa,EAAO,SAGlB,GAAQ,EACV,MAAO,GAAa,IAAM,EAE5B,GAAI,GAAO,EAAG,CACZ,GAAM,GAAgB,IAAS,EAAI,GAAK,IAAM,EAC9C,MAAO,GAAY,CACrB,CACA,GAAI,GAAQ,EAAG,CACb,GAAM,GAAY,IAAS,EAAI,GAAK,IAAM,EAC1C,MAAO,GAAa,CACtB,CAEA,MAAO,EACT,CAEA,WAAgC,EAAkB,CAChD,GAAM,GAAQ,EAAS,MAAM,GAAG,EAChC,MAAI,GAAM,OAAS,EACV,GAAG,EAAM,MAAM,EAAM,KAEvB,CACT,CAaA,WAAwB,EAAkB,CACxC,GAAM,GAAO,GAAI,MACX,EAAY,EAAc,CAAI,EAC9B,EAAU,EAAc,EAAM,CAAQ,EAE5C,MADiB,MAAK,IAAI,EAAU,EAAW,CAAC,CAElD,CAEO,WAAuB,EAAkB,EAAQ,GAAM,CAC5D,GAAM,GAAW,EAAe,CAAQ,EAClC,EAAY,EAAiB,CAAQ,EAC3C,MAAO,GAAQ,EAAuB,CAAS,EAAI,CACrD,CAEA,WAA2B,EAAmB,CAE5C,GAAM,GAAa,AADH,GAAI,MAAK,EAAE,QAAQ,EACN,EAE7B,MADiB,MAAK,IAAI,EAAY,CAAC,CAEzC,CAEO,WAAiB,EAAmB,EAAQ,GAAM,CACvD,GAAM,GAAW,EAAkB,CAAS,EACtC,EAAY,EAAiB,CAAQ,EAE3C,MAAO,GAAQ,EAAuB,CAAS,EAAI,CACrD,CAvFA,GAkDM,GAlDN,aAkDA,AAAM,EAAgB,CAAC,EAAO,GAAI,MAAQ,EAAkB,IAC1D,KAAK,IACH,EAAK,eAAe,EACpB,EAAK,YAAY,EACjB,EAAK,WAAW,EAChB,EAAK,YAAY,EACjB,EAAK,cAAc,EACnB,EAAK,cAAc,EAAI,EACvB,EAAK,mBAAmB,CAC1B",
  "names": []
}
