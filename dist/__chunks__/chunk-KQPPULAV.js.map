{
  "version": 3,
  "sources": ["../../src/providers/utils.ts"],
  "sourcesContent": ["import { Message, Transaction } from '@multiversx/sdk-core';\nimport { IDAppProviderAccount } from '@multiversx/sdk-dapp-utils/out';\nimport { ExtensionProvider } from '@multiversx/sdk-extension-provider';\nimport { HWProvider } from '@multiversx/sdk-hw-provider';\nimport { IHWWalletApp } from '@multiversx/sdk-hw-provider/out/interface';\nimport { MetamaskProvider } from '@multiversx/sdk-metamask-provider/out/metamaskProvider';\nimport { OperaProvider } from '@multiversx/sdk-opera-provider';\nimport { PasskeyProvider } from '@multiversx/sdk-passkey-provider/out';\nimport { WalletProvider } from '@multiversx/sdk-web-wallet-provider';\nimport { LEDGER_CONTRACT_DATA_ENABLED_VALUE } from 'constants/index';\nimport { CrossWindowProvider } from 'lib/sdkWebWalletCrossWindowProvider';\nimport { IframeProvider } from 'lib/sdkWebWalletIframeProvider';\nimport { IDappProvider } from 'types';\nimport { LoginMethodsEnum } from 'types/enums.types';\nimport {\n  WalletConnectV2Provider,\n  EngineTypes\n} from 'utils/walletconnect/__sdkWalletconnectProvider';\n\nexport const DAPP_INIT_ROUTE = '/dapp/init';\n\nexport const getProviderType = <TProvider extends object>(\n  provider?: TProvider | null\n): LoginMethodsEnum => {\n  switch (provider?.constructor) {\n    case WalletProvider:\n      return LoginMethodsEnum.wallet;\n    case WalletConnectV2Provider:\n      return LoginMethodsEnum.walletconnectv2;\n    case HWProvider:\n      return LoginMethodsEnum.ledger;\n    case ExtensionProvider:\n      return LoginMethodsEnum.extension;\n    case PasskeyProvider:\n      return LoginMethodsEnum.passkey;\n    case MetamaskProvider:\n      return LoginMethodsEnum.metamask;\n    case OperaProvider:\n      return LoginMethodsEnum.opera;\n    case CrossWindowProvider:\n      return LoginMethodsEnum.crossWindow;\n    case IframeProvider:\n      return LoginMethodsEnum.iframe;\n    case EmptyProvider:\n      return LoginMethodsEnum.none;\n    default:\n      return LoginMethodsEnum.extra;\n  }\n};\n\nexport const newWalletProvider = (walletAddress: string) =>\n  new WalletProvider(`${walletAddress}${DAPP_INIT_ROUTE}`);\n\nexport const getLedgerConfiguration = async (\n  initializedHwWalletP: HWProvider\n) => {\n  if (!initializedHwWalletP.isInitialized()) {\n    throw new Error('Unable to get version. Provider not initialized');\n  }\n  const hwApp: IHWWalletApp = (initializedHwWalletP as any).hwApp;\n  const { contractData, version } = await hwApp.getAppConfiguration();\n  const dataEnabled = contractData === LEDGER_CONTRACT_DATA_ENABLED_VALUE;\n  return { version, dataEnabled };\n};\n\nconst notInitializedError = (caller: string) => {\n  return `Unable to perform ${caller}, Provider not initialized`;\n};\n\nexport class EmptyProvider implements IDappProvider {\n  init(): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  getAccount(): IDAppProviderAccount | null {\n    throw new Error(notInitializedError('getAccount'));\n  }\n\n  setAccount(account: IDAppProviderAccount): void {\n    throw new Error(notInitializedError(`setAccount: ${account}`));\n  }\n\n  login<TOptions = { callbackUrl?: string } | undefined, TResponse = string>(\n    options?: TOptions\n  ): Promise<TResponse> {\n    throw new Error(notInitializedError(`login with options: ${options}`));\n  }\n\n  logout<TOptions = { callbackUrl?: string }, TResponse = boolean>(\n    options?: TOptions\n  ): Promise<TResponse> {\n    throw new Error(notInitializedError(`logout with options: ${options}`));\n  }\n\n  getAddress(): Promise<string> {\n    throw new Error(notInitializedError('getAddress'));\n  }\n\n  isInitialized(): boolean {\n    return false;\n  }\n\n  isConnected(): boolean {\n    return false;\n  }\n\n  sendTransaction?<\n    TOptions = { callbackUrl?: string },\n    TResponse = Transaction\n  >(transaction: Transaction, options?: TOptions): Promise<TResponse> {\n    throw new Error(\n      notInitializedError(\n        `sendTransaction with transactions: ${transaction} options: ${options}`\n      )\n    );\n  }\n\n  signTransaction<TOptions = { callbackUrl?: string }, TResponse = Transaction>(\n    transaction: Transaction,\n    options?: TOptions\n  ): Promise<TResponse> {\n    throw new Error(\n      notInitializedError(\n        `signTransaction with transactions: ${transaction} options: ${options}`\n      )\n    );\n  }\n\n  signTransactions<TOptions = { callbackUrl?: string }, TResponse = []>(\n    transactions: [],\n    options?: TOptions\n  ): Promise<TResponse> {\n    throw new Error(\n      notInitializedError(\n        `signTransactions with transactions: ${transactions} options: ${options}`\n      )\n    );\n  }\n\n  signMessage<T extends Message, TOptions = { callbackUrl?: string }>(\n    message: T,\n    options: TOptions\n  ): Promise<T> {\n    throw new Error(\n      notInitializedError(\n        `signTransactions with ${message} and options ${options}`\n      )\n    );\n  }\n\n  sendCustomMessage?({\n    method,\n    params\n  }: {\n    method: string;\n    params: any;\n  }): Promise<any> {\n    throw new Error(\n      notInitializedError(\n        `sendCustomMessage with method: ${method} params: ${params}`\n      )\n    );\n  }\n\n  sendCustomRequest?(options?: {\n    request: EngineTypes.RequestParams['request'];\n  }): Promise<any> {\n    throw new Error(\n      notInitializedError(`sendSessionEvent with options: ${options}`)\n    );\n  }\n\n  ping?(): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n}\n\nexport const emptyProvider = new EmptyProvider();\n"],
  "mappings": "gQAAA,IASA,IACA,IARA,uEACA,yDAEA,0FACA,+DACA,uEACA,qEAKA,IAMO,GAAM,GAAkB,aAElB,EAAkB,AAC7B,GACqB,CACrB,OAAQ,iBAAU,iBACX,GACH,MAAO,aACJ,GACH,MAAO,sBACJ,GACH,MAAO,aACJ,GACH,MAAO,gBACJ,GACH,MAAO,cACJ,GACH,MAAO,eACJ,GACH,MAAO,YACJ,GACH,MAAO,kBACJ,GACH,MAAO,aACJ,GACH,MAAO,WAEP,MAAO,QAEb,EAEa,EAAoB,AAAC,GAChC,GAAI,GAAe,GAAG,IAAgB,GAAiB,EAE5C,EAAyB,AACpC,GACG,0BACH,GAAI,CAAC,EAAqB,cAAc,EACtC,KAAM,IAAI,OAAM,iDAAiD,EAEnE,GAAM,GAAuB,EAA6B,MACpD,CAAE,eAAc,WAAY,KAAM,GAAM,oBAAoB,EAElE,MAAO,CAAE,UAAS,YADE,IAAiB,CACP,CAChC,GAEM,EAAsB,AAAC,GACpB,qBAAqB,8BAGjB,EAAN,KAA6C,CAClD,MAAyB,CACvB,MAAO,SAAQ,QAAQ,EAAK,CAC9B,CAEA,YAA0C,CACxC,KAAM,IAAI,OAAM,EAAoB,YAAY,CAAC,CACnD,CAEA,WAAW,EAAqC,CAC9C,KAAM,IAAI,OAAM,EAAoB,eAAe,GAAS,CAAC,CAC/D,CAEA,MACE,EACoB,CACpB,KAAM,IAAI,OAAM,EAAoB,uBAAuB,GAAS,CAAC,CACvE,CAEA,OACE,EACoB,CACpB,KAAM,IAAI,OAAM,EAAoB,wBAAwB,GAAS,CAAC,CACxE,CAEA,YAA8B,CAC5B,KAAM,IAAI,OAAM,EAAoB,YAAY,CAAC,CACnD,CAEA,eAAyB,CACvB,MAAO,EACT,CAEA,aAAuB,CACrB,MAAO,EACT,CAEA,gBAGE,EAA0B,EAAwC,CAClE,KAAM,IAAI,OACR,EACE,sCAAsC,cAAwB,GAChE,CACF,CACF,CAEA,gBACE,EACA,EACoB,CACpB,KAAM,IAAI,OACR,EACE,sCAAsC,cAAwB,GAChE,CACF,CACF,CAEA,iBACE,EACA,EACoB,CACpB,KAAM,IAAI,OACR,EACE,uCAAuC,cAAyB,GAClE,CACF,CACF,CAEA,YACE,EACA,EACY,CACZ,KAAM,IAAI,OACR,EACE,yBAAyB,iBAAuB,GAClD,CACF,CACF,CAEA,kBAAmB,CACjB,SACA,UAIe,CACf,KAAM,IAAI,OACR,EACE,kCAAkC,aAAkB,GACtD,CACF,CACF,CAEA,kBAAmB,EAEF,CACf,KAAM,IAAI,OACR,EAAoB,kCAAkC,GAAS,CACjE,CACF,CAEA,MAA0B,CACxB,MAAO,SAAQ,QAAQ,EAAK,CAC9B,CACF,EAEa,EAAgB,GAAI",
  "names": []
}
