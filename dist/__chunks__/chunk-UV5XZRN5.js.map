{
  "version": 3,
  "sources": ["../../src/UI/ledger/LedgerLoginContainer/ConfirmAddress/helpers/getAuthTokenText.ts"],
  "sourcesContent": ["import { decodeLoginToken } from 'services/nativeAuth/helpers/decodeLoginToken';\nimport getLedgerVersionOptions from 'utils/operations/ledger/getLedgerVersionOptions';\nimport { secondsToTimeString } from './secondsToTimeString';\n\nexport const getAuthTokenText = ({\n  loginToken,\n  version\n}: {\n  loginToken?: string;\n  version?: string;\n}) => {\n  if (!loginToken || !version) {\n    return null;\n  }\n\n  const { ledgerWithUsernames } = getLedgerVersionOptions(version);\n  const nativeAuthInfo = decodeLoginToken(loginToken);\n  if (nativeAuthInfo == null) {\n    return null;\n  }\n\n  const confirmAddressText = 'For security, please confirm that your address:';\n  const authText = 'and Auth Token:';\n  const areShownText = 'are the one shown on your Ledger device screen now.';\n\n  if (ledgerWithUsernames) {\n    const time = secondsToTimeString(nativeAuthInfo.ttl);\n\n    const confirmAddressText = 'For security, please confirm your address:';\n    const authText = 'and authorize:';\n\n    return {\n      data: `${nativeAuthInfo.origin} for ${time}.`,\n      confirmAddressText,\n      authText\n    };\n  }\n\n  return {\n    data: loginToken,\n    confirmAddressText,\n    authText,\n    areShownText\n  };\n};\n"],
  "mappings": "uKAAA,IACA,IAGO,GAAM,GAAmB,CAAC,CAC/B,aACA,aAII,CACJ,GAAI,CAAC,GAAc,CAAC,EAClB,MAAO,MAGT,GAAM,CAAE,uBAAwB,EAAwB,CAAO,EACzD,EAAiB,EAAiB,CAAU,EAClD,GAAI,GAAkB,KACpB,MAAO,MAGT,GAAM,GAAqB,kDACrB,EAAW,kBACX,EAAe,sDAErB,GAAI,EAAqB,CACvB,GAAM,GAAO,EAAoB,EAAe,GAAG,EAE7C,EAAqB,6CACrB,EAAW,iBAEjB,MAAO,CACL,KAAM,GAAG,EAAe,cAAc,KACtC,qBACA,UACF,CACF,CAEA,MAAO,CACL,KAAM,EACN,qBACA,WACA,cACF,CACF",
  "names": []
}
