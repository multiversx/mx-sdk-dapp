{
  "version": 3,
  "sources": ["../../src/UI/TransactionData/TransactionData.tsx"],
  "sourcesContent": ["import React, { ReactNode, useState } from 'react';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport classNames from 'classnames';\n\nimport { DataTestIdsEnum, N_A } from 'constants/index';\nimport { withStyles, WithStylesImportType } from 'hocs/withStyles';\nimport { CopyButton } from 'UI/CopyButton';\nimport { decodePart } from 'utils/decoders/decodePart';\nimport { getUnHighlightedDataFieldParts } from 'utils/transactions/getUnHighlightedDataFieldParts';\n\nimport { WithClassnameType } from '../types';\nimport { TransactionDataDecode } from './components';\n\nconst allOccurences = (sourceStr: string, searchStr: string) => {\n  const occurrences = [...sourceStr.matchAll(new RegExp(searchStr, 'gi'))].map(\n    (result) => result.index\n  );\n\n  return occurrences.filter((search) => Number.isFinite(search)) as number[];\n};\n\nexport interface TransactionDataPropsType extends WithClassnameType {\n  customCopyIcon?: IconProp;\n  data: string;\n  highlight?: string;\n  innerTransactionDataClasses?: {\n    transactionDataInputLabelClassName?: string;\n    transactionDataInputValueClassName?: string;\n  };\n  isScCall?: boolean;\n  label?: ReactNode;\n  showCopyButton?: boolean;\n  showDataDecode?: boolean;\n  transactionIndex: number;\n}\n\nconst TransactionDataComponent = ({\n  className = 'dapp-transaction-data',\n  customCopyIcon,\n  data,\n  globalStyles,\n  highlight,\n  innerTransactionDataClasses,\n  isScCall,\n  label,\n  showCopyButton = true,\n  styles,\n  showDataDecode,\n  transactionIndex\n}: TransactionDataPropsType & WithStylesImportType) => {\n  const [decodedData, setDecodedData] = useState(data);\n\n  const {\n    transactionDataInputLabelClassName,\n    transactionDataInputValueClassName\n  } = innerTransactionDataClasses || {};\n\n  let output = <>{decodedData}</>;\n\n  const [encodedScCall, ...remainingDataFields] =\n    highlight && isScCall ? highlight.split('@') : [];\n\n  const isHighlightedData = decodedData && highlight;\n  const occurrences = isHighlightedData\n    ? allOccurences(decodedData, highlight)\n    : [];\n  const showHighlight = isHighlightedData && occurrences.length > 0;\n\n  const handleElementReference = (element: HTMLElement | null) => {\n    if (!element) {\n      return;\n    }\n\n    element.scrollIntoView();\n  };\n\n  const handleDecode = (decoded: string) => {\n    setDecodedData(decoded);\n  };\n\n  const handleDecodeError = () => {\n    setDecodedData(data);\n  };\n\n  if (showHighlight) {\n    switch (true) {\n      case decodedData.startsWith(highlight): {\n        const [, rest] = decodedData.split(highlight);\n\n        output = (\n          <>\n            <span className={globalStyles?.highlighted}>{highlight}</span>\n            <span className={globalStyles?.textMuted}>{rest}</span>\n          </>\n        );\n        break;\n      }\n      case decodedData.endsWith(highlight): {\n        const [rest] = decodedData.split(highlight);\n\n        output = (\n          <>\n            <span className={globalStyles?.textMuted}>{rest}</span>\n            <span\n              className={globalStyles?.highlighted}\n              ref={handleElementReference}\n            >\n              {highlight}\n            </span>\n          </>\n        );\n        break;\n      }\n\n      default: {\n        const { start, end } = getUnHighlightedDataFieldParts({\n          occurrences,\n          transactionIndex,\n          data: decodedData,\n          highlight\n        });\n\n        output = (\n          <>\n            <span className={globalStyles?.textMuted}>{start}</span>\n            <span\n              className={globalStyles?.highlighted}\n              ref={handleElementReference}\n            >\n              {highlight}\n            </span>\n            <span className={globalStyles?.textMuted}>{end}</span>\n          </>\n        );\n        break;\n      }\n    }\n  }\n\n  const decodedScCall = [\n    decodePart(encodedScCall),\n    ...remainingDataFields\n  ].join('@');\n\n  return (\n    <>\n      {encodedScCall && (\n        <div className={classNames(styles?.transactionData, className)}>\n          <span\n            className={classNames(\n              styles?.transactionDataLabel,\n              transactionDataInputLabelClassName\n            )}\n          >\n            Smart Contract Call\n          </span>\n\n          <div className={styles?.transactionDataValueWrapper}>\n            <div\n              data-testid={DataTestIdsEnum.confirmScCall}\n              className={classNames(\n                styles?.transactionDataValue,\n                transactionDataInputValueClassName\n              )}\n            >\n              <span className={styles?.transactionDataValueText}>\n                {decodedScCall}\n              </span>\n\n              {decodedData && (\n                <CopyButton\n                  text={decodedScCall}\n                  className={styles?.transactionDataValueCopy}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className={classNames(styles?.transactionData, className)}>\n        <div\n          className={classNames(\n            styles?.transactionDataLabel,\n            transactionDataInputLabelClassName\n          )}\n        >\n          {label ?? 'Data'}\n          {showDataDecode && (\n            <TransactionDataDecode\n              data={data}\n              onDecode={handleDecode}\n              onDecodeError={handleDecodeError}\n            />\n          )}\n        </div>\n\n        <div className={styles?.transactionDataValueWrapper}>\n          <div\n            data-testid={DataTestIdsEnum.confirmData}\n            className={classNames(\n              styles?.transactionDataValue,\n              transactionDataInputValueClassName\n            )}\n          >\n            <span className={styles?.transactionDataValueText}>\n              {decodedData ? output : N_A}\n            </span>\n\n            {decodedData && showCopyButton && (\n              <CopyButton\n                copyIcon={customCopyIcon}\n                text={decodedData}\n                className={styles?.transactionDataValueCopy}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport const TransactionData = withStyles(TransactionDataComponent, {\n  ssrStyles: () => import('UI/TransactionData/TransactionDataStyles.scss'),\n  clientStyles: () =>\n    require('UI/TransactionData/TransactionDataStyles.scss').default\n});\n"],
  "mappings": "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",
  "names": []
}
