{
  "version": 3,
  "sources": ["../../src/UI/Pagination/Pagination.tsx"],
  "sourcesContent": ["import React, { MouseEvent, useEffect, useState } from 'react';\nimport {\n  faAngleLeft,\n  faAngleRight,\n  faAnglesLeft,\n  faAnglesRight\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport BigNumber from 'bignumber.js';\nimport classNames from 'classnames';\n\nimport { DataTestIdsEnum } from 'constants/index';\nimport { WithStylesImportType } from 'hocs/useStyles';\nimport { withStyles } from 'hocs/withStyles';\nimport { WithClassnameType } from 'UI/types';\nimport { stringIsInteger } from 'utils/validation/stringIsInteger';\n\nimport { PaginationEdgeButton } from './components';\nimport { getPagination } from './helpers';\n\nexport interface PaginationPropsType\n  extends WithStylesImportType,\n    WithClassnameType {\n  onPageChange: (page: number) => void;\n  currentPage: number;\n  totalPages: number;\n  isDisabled?: boolean;\n  showLabels?: boolean;\n  showEdgeButtons?: boolean;\n  disabledClassName?: string;\n  buttonsClassNames?: string;\n}\n\nconst PaginationComponent = ({\n  currentPage = 1,\n  totalPages,\n  className,\n  disabledClassName,\n  buttonsClassNames,\n  onPageChange,\n  isDisabled,\n  showLabels,\n  showEdgeButtons = true,\n  styles\n}: PaginationPropsType) => {\n  const [currentPageIndex, setCurrentPageIndex] = useState(currentPage);\n\n  const isLeftToggleDisabled = currentPageIndex === 1;\n  const isRightToggleDisabled = currentPageIndex === totalPages;\n\n  const optionalDisabledClassName = disabledClassName\n    ? { [disabledClassName]: isDisabled }\n    : {};\n\n  const paginationItems = getPagination({\n    currentPage: currentPageIndex,\n    totalPages\n  });\n\n  const handlePageClick = (newPageIndex: number) => {\n    if (newPageIndex === currentPageIndex) {\n      return;\n    }\n\n    setCurrentPageIndex(newPageIndex);\n    onPageChange(newPageIndex);\n  };\n\n  const handlePaginationItemClick = (paginationItem: string) => {\n    if (stringIsInteger(paginationItem)) {\n      handlePageClick(new BigNumber(paginationItem).toNumber());\n    }\n  };\n\n  const handleEdgePageClick =\n    (pageToNavigateTo: number) => (event: MouseEvent<HTMLElement>) => {\n      event.preventDefault();\n      handlePageClick(pageToNavigateTo);\n    };\n\n  const isPaginationItemInTheHundreds = (paginationItem: string) =>\n    stringIsInteger(paginationItem) &&\n    new BigNumber(paginationItem).isGreaterThanOrEqualTo(100);\n\n  const isCurrentPageActive = (paginationItem: string) =>\n    new BigNumber(paginationItem).isEqualTo(currentPageIndex);\n\n  useEffect(() => {\n    if (currentPage !== currentPageIndex) {\n      setCurrentPageIndex(currentPage);\n    }\n  }, [currentPage, currentPageIndex]);\n\n  if (totalPages === 1) {\n    return null;\n  }\n\n  return (\n    <div className={classNames(styles?.pagination, className)}>\n      {showEdgeButtons && (\n        <span\n          onClick={handleEdgePageClick(1)}\n          className={classNames(styles?.paginationAngle, buttonsClassNames, {\n            [styles?.disabled]: isLeftToggleDisabled,\n            ...optionalDisabledClassName\n          })}\n        >\n          <FontAwesomeIcon\n            className={styles?.paginationAngleIcon}\n            icon={faAnglesLeft}\n          />\n        </span>\n      )}\n\n      <PaginationEdgeButton\n        label='Prev'\n        onClick={handleEdgePageClick(currentPageIndex - 1)}\n        data-testid={DataTestIdsEnum.prevBtn}\n        paginationButtonIcon={faAngleLeft}\n        isInactive={isLeftToggleDisabled}\n        showLabels={showLabels}\n        className={classNames(\n          styles?.paginationEdgeButton,\n          buttonsClassNames,\n          { [styles?.disabled]: isDisabled },\n          optionalDisabledClassName\n        )}\n      />\n\n      <div className={styles?.paginationItems}>\n        {paginationItems.map((paginationItem, paginationItemIndex) => (\n          <div\n            key={`page-item-${paginationItemIndex}`}\n            className={styles?.paginationItemWrapper}\n          >\n            {stringIsInteger(paginationItem) ? (\n              <div\n                onClick={() => handlePaginationItemClick(paginationItem)}\n                className={classNames(\n                  styles?.paginationItem,\n                  buttonsClassNames,\n                  { [styles?.active]: isCurrentPageActive(paginationItem) },\n                  { [styles?.ellipsis]: !stringIsInteger(paginationItem) },\n                  { [styles?.disabled]: isDisabled },\n                  {\n                    [styles?.hundreds]:\n                      isPaginationItemInTheHundreds(paginationItem)\n                  },\n                  optionalDisabledClassName\n                )}\n              >\n                <span className={styles?.paginationItemText}>\n                  {paginationItem}\n                </span>\n              </div>\n            ) : (\n              <span className={styles?.paginationItemText}>\n                {paginationItem}\n              </span>\n            )}\n          </div>\n        ))}\n      </div>\n\n      <PaginationEdgeButton\n        label='Next'\n        onClick={handleEdgePageClick(currentPageIndex + 1)}\n        data-testid={DataTestIdsEnum.nextBtn}\n        paginationButtonIcon={faAngleRight}\n        isInactive={isRightToggleDisabled}\n        showLabels={showLabels}\n        className={classNames(\n          styles?.paginationEdgeButton,\n          styles?.reversed,\n          buttonsClassNames,\n          { [styles?.disabled]: isDisabled },\n          optionalDisabledClassName\n        )}\n      />\n\n      {showEdgeButtons && (\n        <span\n          onClick={handleEdgePageClick(totalPages)}\n          className={classNames(styles?.paginationAngle, buttonsClassNames, {\n            [styles?.disabled]: isRightToggleDisabled,\n            ...optionalDisabledClassName\n          })}\n        >\n          <FontAwesomeIcon\n            className={styles?.paginationAngleIcon}\n            icon={faAnglesRight}\n          />\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport const Pagination = withStyles(PaginationComponent, {\n  ssrStyles: () => import('UI/Pagination/paginationStyles.scss'),\n  clientStyles: () => require('UI/Pagination/paginationStyles.scss').default\n});\n"],
  "mappings": "oTAAA,IAWA,IAXA,mDACA,uHAMA,iEACA,4BACA,0BAMA,IAkBA,GAAM,GAAsB,CAAC,CAC3B,cAAc,EACd,aACA,YACA,oBACA,oBACA,eACA,aACA,aACA,kBAAkB,GAClB,YACyB,CACzB,GAAM,CAAC,EAAkB,GAAuB,EAAS,CAAW,EAE9D,EAAuB,IAAqB,EAC5C,EAAwB,IAAqB,EAE7C,EAA4B,EAC9B,CAAE,CAAC,GAAoB,CAAW,EAClC,CAAC,EAEC,EAAkB,EAAc,CACpC,YAAa,EACb,YACF,CAAC,EAEK,EAAkB,AAAC,GAAyB,CAChD,AAAI,IAAiB,GAIrB,GAAoB,CAAY,EAChC,EAAa,CAAY,EAC3B,EAEM,EAA4B,AAAC,GAA2B,CAC5D,AAAI,EAAgB,CAAc,GAChC,EAAgB,GAAI,GAAU,CAAc,EAAE,SAAS,CAAC,CAE5D,EAEM,EACJ,AAAC,GAA6B,AAAC,GAAmC,CAChE,EAAM,eAAe,EACrB,EAAgB,CAAgB,CAClC,EAEI,EAAgC,AAAC,GACrC,EAAgB,CAAc,GAC9B,GAAI,GAAU,CAAc,EAAE,uBAAuB,GAAG,EAEpD,EAAsB,AAAC,GAC3B,GAAI,GAAU,CAAc,EAAE,UAAU,CAAgB,EAQ1D,MANA,GAAU,IAAM,CACd,AAAI,IAAgB,GAClB,EAAoB,CAAW,CAEnC,EAAG,CAAC,EAAa,CAAgB,CAAC,EAE9B,IAAe,EACV,KAIP,gBAAC,OAAI,UAAW,EAAW,iBAAQ,WAAY,CAAS,GACrD,GACC,gBAAC,QACC,QAAS,EAAoB,CAAC,EAC9B,UAAW,EAAW,iBAAQ,gBAAiB,EAAmB,GAChE,CAAC,iBAAQ,UAAW,GACjB,EACJ,GAED,gBAAC,GACC,UAAW,iBAAQ,oBACnB,KAAM,EACR,CACF,EAGF,gBAAC,GACC,MAAM,OACN,QAAS,EAAoB,EAAmB,CAAC,EACjD,cAAa,UACb,qBAAsB,EACtB,WAAY,EACZ,WAAY,EACZ,UAAW,EACT,iBAAQ,qBACR,EACA,CAAE,CAAC,iBAAQ,UAAW,CAAW,EACjC,CACF,EACF,EAEA,gBAAC,OAAI,UAAW,iBAAQ,iBACrB,EAAgB,IAAI,CAAC,EAAgB,IACpC,gBAAC,OACC,IAAK,aAAa,IAClB,UAAW,iBAAQ,uBAElB,EAAgB,CAAc,EAC7B,gBAAC,OACC,QAAS,IAAM,EAA0B,CAAc,EACvD,UAAW,EACT,iBAAQ,eACR,EACA,CAAE,CAAC,iBAAQ,QAAS,EAAoB,CAAc,CAAE,EACxD,CAAE,CAAC,iBAAQ,UAAW,CAAC,EAAgB,CAAc,CAAE,EACvD,CAAE,CAAC,iBAAQ,UAAW,CAAW,EACjC,CACE,CAAC,iBAAQ,UACP,EAA8B,CAAc,CAChD,EACA,CACF,GAEA,gBAAC,QAAK,UAAW,iBAAQ,oBACtB,CACH,CACF,EAEA,gBAAC,QAAK,UAAW,iBAAQ,oBACtB,CACH,CAEJ,CACD,CACH,EAEA,gBAAC,GACC,MAAM,OACN,QAAS,EAAoB,EAAmB,CAAC,EACjD,cAAa,UACb,qBAAsB,EACtB,WAAY,EACZ,WAAY,EACZ,UAAW,EACT,iBAAQ,qBACR,iBAAQ,SACR,EACA,CAAE,CAAC,iBAAQ,UAAW,CAAW,EACjC,CACF,EACF,EAEC,GACC,gBAAC,QACC,QAAS,EAAoB,CAAU,EACvC,UAAW,EAAW,iBAAQ,gBAAiB,EAAmB,GAChE,CAAC,iBAAQ,UAAW,GACjB,EACJ,GAED,gBAAC,GACC,UAAW,iBAAQ,oBACnB,KAAM,EACR,CACF,CAEJ,CAEJ,EAEa,GAAa,EAAW,EAAqB,CACxD,UAAW,IAAM,OAAO,wCACxB,aAAc,IAAM,WAA+C,OACrE,CAAC",
  "names": []
}
