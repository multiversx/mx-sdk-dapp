{
  "version": 3,
  "sources": ["../../src/UI/walletConnect/WalletConnectConnectionStatus/WalletConnectConnectionStatus.tsx"],
  "sourcesContent": ["import React, { useState, useEffect } from 'react';\nimport {\n  faCircleNotch,\n  faTimes,\n  faCheckCircle\n} from '@fortawesome/free-solid-svg-icons';\nimport classNames from 'classnames';\nimport { withStyles, WithStylesImportType } from 'hocs/withStyles';\nimport { useGetAccountProvider } from 'hooks/account/useGetAccountProvider';\nimport { getProviderType } from 'providers/utils';\nimport { LoginMethodsEnum } from 'types/enums.types';\nimport { timeoutPromise } from 'utils/asyncActions';\nimport { WithClassnameType } from '../../types';\nimport { WalletConnectConnectionDescription } from './WalletConnectConnectionDescription';\nimport { WalletConnectConnectionHint } from './WalletConnectConnectionHint';\n\nconst TEN_SECONDS = 10000;\n\nexport enum WalletConnectConnectionStatusEnum {\n  pending = 'pending',\n  waiting = 'waiting',\n  success = 'success',\n  error = 'error'\n}\n\nexport interface WalletConnectConnectionStatusType {\n  description?: string;\n}\n\nconst WalletConnectConnectionStatusComponent = ({\n  description,\n  className,\n  globalStyles\n}: WalletConnectConnectionStatusType &\n  WithClassnameType &\n  WithStylesImportType) => {\n  const { provider } = useGetAccountProvider();\n  const providerType = getProviderType(provider);\n\n  const [connectionStatus, setConnectionStatus] =\n    useState<WalletConnectConnectionStatusEnum>(\n      WalletConnectConnectionStatusEnum.pending\n    );\n  const [connectionStatusInterval, setConnectionStatusInterval] =\n    useState<number>(TEN_SECONDS);\n\n  const isSigningWithWalletConnectV2 =\n    providerType === LoginMethodsEnum.walletconnectv2;\n\n  const getConnectionStatus = async () => {\n    const timeoutError = Symbol();\n    try {\n      const pingResponse = await timeoutPromise(\n        provider?.ping?.(),\n        TEN_SECONDS,\n        timeoutError\n      );\n\n      if (pingResponse) {\n        setConnectionStatus(WalletConnectConnectionStatusEnum.success);\n        setConnectionStatusInterval((existing) => existing * 1.5);\n      } else {\n        setConnectionStatus(WalletConnectConnectionStatusEnum.error);\n        setConnectionStatusInterval(TEN_SECONDS);\n      }\n    } catch (error) {\n      if (error === timeoutError) {\n        setConnectionStatus(WalletConnectConnectionStatusEnum.waiting);\n      } else {\n        setConnectionStatus(WalletConnectConnectionStatusEnum.error);\n      }\n      setConnectionStatusInterval(TEN_SECONDS);\n    }\n  };\n\n  useEffect(() => {\n    getConnectionStatus();\n\n    const interval = setInterval(async () => {\n      await getConnectionStatus();\n    }, connectionStatusInterval);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  if (!isSigningWithWalletConnectV2) {\n    return null;\n  }\n\n  switch (connectionStatus) {\n    case WalletConnectConnectionStatusEnum.pending:\n      return (\n        <WalletConnectConnectionDescription\n          className={className}\n          icon={faCircleNotch}\n          iconClassName={classNames(\n            globalStyles?.textPrimary,\n            'fa-spin',\n            'slow-spin'\n          )}\n          description='Checking the connection...'\n          details={\n            <div className={classNames(globalStyles?.mt3)}>{description}</div>\n          }\n        />\n      );\n\n    case WalletConnectConnectionStatusEnum.waiting:\n      return (\n        <WalletConnectConnectionDescription\n          className={className}\n          icon={faCircleNotch}\n          iconClassName={classNames(\n            globalStyles?.textPrimary,\n            'fa-spin',\n            'slow-spin'\n          )}\n          description='Checking the connection...'\n          details={<WalletConnectConnectionHint />}\n        />\n      );\n\n    case WalletConnectConnectionStatusEnum.success:\n      return (\n        <WalletConnectConnectionDescription\n          className={className}\n          icon={faCheckCircle}\n          iconClassName={classNames(globalStyles?.textSuccess)}\n          description='Connected'\n          details={\n            <div className={classNames(globalStyles?.mt3)}>{description}</div>\n          }\n        />\n      );\n\n    default:\n    case WalletConnectConnectionStatusEnum.error:\n      return (\n        <WalletConnectConnectionDescription\n          className={className}\n          icon={faTimes}\n          iconClassName={classNames(globalStyles?.textDanger)}\n          description='Unable to establish a connection with the device.'\n          details={<WalletConnectConnectionHint />}\n        />\n      );\n  }\n};\n\nexport const WalletConnectConnectionStatus = withStyles(\n  WalletConnectConnectionStatusComponent,\n  {}\n);\n"],
  "mappings": "uUAAA,uDACA,kGAKA,0BAIA,IAMA,GAAM,GAAc,IAER,EAAL,CAAK,GACV,WAAU,UACV,UAAU,UACV,UAAU,UACV,QAAQ,QAJE,WAWN,EAAyC,CAAC,CAC9C,cACA,YACA,kBAGyB,CACzB,GAAM,CAAE,YAAa,EAAsB,EACrC,EAAe,EAAgB,CAAQ,EAEvC,CAAC,EAAkB,GACvB,EACE,SACF,EACI,CAAC,EAA0B,GAC/B,EAAiB,CAAW,EAExB,EACJ,IAAiB,kBAEb,EAAsB,IAAY,0BAjD1C,MAkDI,GAAM,GAAe,OAAO,EAC5B,GAAI,CAOF,AANqB,MAAM,GACzB,oBAAU,OAAV,sBACA,EACA,CACF,GAGE,GAAoB,SAAyC,EAC7D,EAA4B,AAAC,GAAa,EAAW,GAAG,GAExD,GAAoB,OAAuC,EAC3D,EAA4B,CAAW,EAE3C,OAAS,EAAP,CACA,AACE,EADF,AAAI,IAAU,EACQ,UAEA,OAFyC,EAI/D,EAA4B,CAAW,CACzC,CACF,GAYA,GAVA,EAAU,IAAM,CACd,EAAoB,EAEpB,GAAM,GAAW,YAAY,IAAY,0BACvC,KAAM,GAAoB,CAC5B,GAAG,CAAwB,EAE3B,MAAO,IAAM,cAAc,CAAQ,CACrC,EAAG,CAAC,CAAC,EAED,CAAC,EACH,MAAO,MAGT,OAAQ,OACD,UACH,MACE,iBAAC,GACC,UAAW,EACX,KAAM,EACN,cAAe,EACb,iBAAc,YACd,UACA,WACF,EACA,YAAY,6BACZ,QACE,gBAAC,OAAI,UAAW,EAAW,iBAAc,GAAG,GAAI,CAAY,EAEhE,MAGC,UACH,MACE,iBAAC,GACC,UAAW,EACX,KAAM,EACN,cAAe,EACb,iBAAc,YACd,UACA,WACF,EACA,YAAY,6BACZ,QAAS,gBAAC,MAA4B,EACxC,MAGC,UACH,MACE,iBAAC,GACC,UAAW,EACX,KAAM,EACN,cAAe,EAAW,iBAAc,WAAW,EACnD,YAAY,YACZ,QACE,gBAAC,OAAI,UAAW,EAAW,iBAAc,GAAG,GAAI,CAAY,EAEhE,cAIC,QACH,MACE,iBAAC,GACC,UAAW,EACX,KAAM,EACN,cAAe,EAAW,iBAAc,UAAU,EAClD,YAAY,oDACZ,QAAS,gBAAC,MAA4B,EACxC,EAGR,EAEa,EAAgC,EAC3C,EACA,CAAC,CACH",
  "names": []
}
