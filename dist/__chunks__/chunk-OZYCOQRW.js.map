{
  "version": 3,
  "sources": ["../../src/wrappers/DappProvider/DappProvider.tsx"],
  "sourcesContent": ["import React, { ReactElement } from 'react';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { ProviderInitializer } from 'components/ProviderInitializer/ProviderInitializer';\nimport { setExternalProvider } from 'providers/accountProvider';\nimport { ExperimentalWebviewProvider } from 'providers/experimentalWebViewProvider/ExperimentalWebviewProvider';\nimport { DappCoreContext } from 'reduxStore/DappProviderContext';\nimport { setWebviewLogin } from 'reduxStore/slices';\nimport { persistor, store } from 'reduxStore/store';\nimport { getAccessTokenFromSearchParams } from 'utils/account/getAccessTokenFromSearchParams';\nimport { CustomNetworkType, IDappProvider, DappConfigType } from '../../types';\nimport {\n  AppInitializer,\n  UseAppInitializerPropsType\n} from './../../wrappers/AppInitializer';\nimport { CustomComponents, CustomComponentsType } from './CustomComponents';\n\nexport { DappConfigType };\n\nconst setWebviewProvider = () => {\n  const providerInstance = ExperimentalWebviewProvider.getInstance();\n\n  const accessToken = getAccessTokenFromSearchParams();\n  setWebviewLogin({\n    data: accessToken\n  });\n\n  providerInstance.init?.();\n  setExternalProvider(providerInstance);\n};\n\nexport interface DappProviderPropsType {\n  children: React.ReactNode | ReactElement;\n  customNetworkConfig?: CustomNetworkType;\n  externalProvider?: IDappProvider;\n  //we need the strings for autocomplete suggestions\n  environment: UseAppInitializerPropsType['environment'];\n  customComponents?: CustomComponentsType;\n  dappConfig?: DappConfigType;\n}\n\nexport const DappProvider = ({\n  children,\n  customNetworkConfig = {},\n  externalProvider,\n  environment,\n  customComponents,\n  dappConfig\n}: DappProviderPropsType) => {\n  if (!environment) {\n    //throw if the user tries to initialize the app without a valid environment\n    throw new Error('missing environment flag');\n  }\n\n  if (externalProvider != null) {\n    setExternalProvider(externalProvider);\n  } else if (dappConfig?.shouldUseWebViewProvider) {\n    setWebviewProvider();\n  }\n\n  return (\n    <Provider context={DappCoreContext} store={store}>\n      <PersistGate persistor={persistor} loading={null}>\n        {() => (\n          <AppInitializer\n            environment={environment}\n            customNetworkConfig={customNetworkConfig}\n            dappConfig={dappConfig}\n          >\n            <ProviderInitializer />\n            <CustomComponents customComponents={customComponents} />\n            {children}\n          </AppInitializer>\n        )}\n      </PersistGate>\n    </Provider>\n  );\n};\n"],
  "mappings": "yeAAA,yBACA,uCACA,8DAKA,IACA,IAEA,IASA,GAAM,GAAqB,IAAM,CAnBjC,MAoBE,GAAM,GAAmB,EAA4B,YAAY,EAE3D,EAAc,EAA+B,EACnD,EAAgB,CACd,KAAM,CACR,CAAC,EAED,KAAiB,OAAjB,gBACA,EAAoB,CAAgB,CACtC,EAYa,EAAe,CAAC,CAC3B,WACA,sBAAsB,CAAC,EACvB,mBACA,cACA,mBACA,gBAC2B,CAC3B,GAAI,CAAC,EAEH,KAAM,IAAI,OAAM,0BAA0B,EAG5C,MAAI,IAAoB,KACtB,EAAoB,CAAgB,EAC3B,WAAY,0BACrB,EAAmB,EAInB,gBAAC,GAAS,QAAS,EAAiB,MAAO,GACzC,gBAAC,GAAY,UAAW,EAAW,QAAS,MACzC,IACC,gBAAC,GACC,YAAa,EACb,oBAAqB,EACrB,WAAY,GAEZ,gBAAC,MAAoB,EACrB,gBAAC,GAAiB,iBAAkB,EAAkB,EACrD,CACH,CAEJ,CACF,CAEJ",
  "names": []
}
