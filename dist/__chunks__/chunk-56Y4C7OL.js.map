{
  "version": 3,
  "sources": ["../../src/services/nativeAuth/nativeAuth.ts"],
  "sourcesContent": ["import { NativeAuthClient } from '@multiversx/sdk-native-auth-client';\nimport { NativeAuthConfigType } from 'types';\nimport {\n  getLatestBlockHash,\n  LatestBlockHashType\n} from './helpers/getLatestBlockHash';\n\nimport { getNativeAuthConfig, getTokenExpiration } from './methods';\n\ninterface NativeAuthInitType {\n  extraInfo?: { [key: string]: string };\n  latestBlockInfo?: LatestBlockHashType;\n  noCache?: boolean;\n}\n\nexport const nativeAuth = (config?: NativeAuthConfigType) => {\n  const {\n    origin,\n    apiAddress,\n    expirySeconds,\n    blockHashShard,\n    extraInfo: extraInfoFromConfig,\n    gatewayUrl,\n    extraRequestHeaders\n  } = getNativeAuthConfig(config) as NativeAuthConfigType;\n\n  const nativeAuthClient = new NativeAuthClient({\n    origin,\n    apiUrl: apiAddress,\n    expirySeconds,\n    blockHashShard,\n    gatewayUrl,\n    extraRequestHeaders\n  });\n\n  const initialize = async (\n    initProps?: NativeAuthInitType\n  ): Promise<string> => {\n    if (!apiAddress || !origin) {\n      return '';\n    }\n\n    const getBlockHash = (): Promise<string> =>\n      nativeAuthClient.getCurrentBlockHash();\n\n    try {\n      const response =\n        initProps?.latestBlockInfo ??\n        (await getLatestBlockHash(\n          apiAddress,\n          blockHashShard,\n          getBlockHash,\n          initProps?.noCache\n        ));\n\n      if (!response) {\n        return '';\n      }\n\n      const { hash, timestamp } = response;\n      const encodedExtraInfo = nativeAuthClient.encodeValue(\n        JSON.stringify({\n          ...(initProps?.extraInfo ?? extraInfoFromConfig),\n          ...(timestamp ? { timestamp } : {})\n        })\n      );\n\n      const encodedOrigin = nativeAuthClient.encodeValue(origin);\n\n      return `${encodedOrigin}.${hash}.${expirySeconds}.${encodedExtraInfo}`;\n    } catch (err: any) {\n      console.error('Error getting native auth token: ', err.toString());\n      return '';\n    }\n  };\n\n  const getToken = ({\n    address,\n    token,\n    signature\n  }: {\n    address: string;\n    token: string;\n    signature: string;\n  }): string => nativeAuthClient.getToken(address, token, signature);\n\n  return {\n    getNativeAuthConfig,\n    initialize,\n    getToken,\n    getTokenExpiration\n  };\n};\n"],
  "mappings": "8KAAA,0EAeO,GAAM,GAAa,AAAC,GAAkC,CAC3D,GAAM,CACJ,SACA,aACA,gBACA,iBACA,UAAW,EACX,aACA,uBACE,EAAoB,CAAM,EAExB,EAAmB,GAAI,GAAiB,CAC5C,SACA,OAAQ,EACR,gBACA,iBACA,aACA,qBACF,CAAC,EAqDD,MAAO,CACL,sBACA,WArDiB,AACjB,GACoB,0BArCxB,QAsCI,GAAI,CAAC,GAAc,CAAC,EAClB,MAAO,GAGT,GAAM,GAAe,IACnB,EAAiB,oBAAoB,EAEvC,GAAI,CACF,GAAM,GACJ,oBAAW,kBAAX,OACC,KAAM,GACL,EACA,EACA,EACA,iBAAW,OACb,EAEF,GAAI,CAAC,EACH,MAAO,GAGT,GAAM,CAAE,OAAM,aAAc,EACtB,EAAmB,EAAiB,YACxC,KAAK,UAAU,OACT,oBAAW,YAAX,OAAwB,GACxB,EAAY,CAAE,WAAU,EAAI,CAAC,EAClC,CACH,EAIA,MAAO,GAFe,EAAiB,YAAY,CAAM,KAE9B,KAAQ,KAAiB,GACtD,OAAS,EAAP,CACA,eAAQ,MAAM,oCAAqC,EAAI,SAAS,CAAC,EAC1D,EACT,CACF,GAeE,SAbe,CAAC,CAChB,UACA,QACA,eAKY,EAAiB,SAAS,EAAS,EAAO,CAAS,EAM/D,oBACF,CACF",
  "names": []
}
