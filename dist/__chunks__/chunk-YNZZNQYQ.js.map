{
  "version": 3,
  "sources": ["../../src/components/ProviderInitializer/hooks/useSetLedgerProvider.ts"],
  "sourcesContent": ["import { useState } from 'react';\nimport { HWProvider } from '@multiversx/sdk-hw-provider';\nimport {\n  setAccountProvider,\n  getAccountProvider\n} from 'providers/accountProvider';\nimport { useSelector } from 'reduxStore/DappProviderContext';\nimport {\n  isLoggedInSelector,\n  ledgerLoginSelector,\n  logoutRouteSelector\n} from 'reduxStore/selectors';\nimport { getLedgerConfiguration } from 'utils/account';\nimport { logout } from 'utils/logout';\n\ntype SetLedgerProviderType = {\n  isRelogin?: boolean;\n};\n\nexport const useSetLedgerProvider = () => {\n  const logoutRoute = useSelector(logoutRouteSelector);\n  const isLoggedIn = useSelector(isLoggedInSelector);\n  const ledgerLogin = useSelector(ledgerLoginSelector);\n  const provider = getAccountProvider();\n\n  const [ledgerData, setLedgerData] =\n    useState<{\n      version: string;\n      dataEnabled: boolean;\n    }>();\n\n  const initHWProvider = async () => {\n    const hasAddressIndex = ledgerLogin?.index != null;\n\n    try {\n      if (provider instanceof HWProvider && provider.isInitialized()) {\n        if (hasAddressIndex) {\n          await provider.setAddressIndex(ledgerLogin.index);\n        }\n\n        return provider;\n      }\n\n      const hwWalletP = new HWProvider();\n      const isInitialized = await hwWalletP.init();\n\n      if (!isInitialized) {\n        return null;\n      }\n\n      if (hasAddressIndex) {\n        await hwWalletP.setAddressIndex(ledgerLogin.index);\n      }\n\n      return hwWalletP;\n    } catch (e) {\n      console.error('Failed to initialise Ledger Provider');\n\n      return null;\n    }\n  };\n\n  async function setLedgerProvider(props?: SetLedgerProviderType) {\n    let hwWalletP: HWProvider | null;\n\n    const shouldLogout = isLoggedIn && !props?.isRelogin;\n\n    try {\n      hwWalletP = await initHWProvider();\n\n      if (!hwWalletP) {\n        console.warn('Could not initialise ledger app');\n\n        if (shouldLogout) {\n          logout(logoutRoute);\n        }\n\n        return;\n      }\n\n      const ledgerConfig = await getLedgerConfiguration(hwWalletP);\n      setAccountProvider(hwWalletP);\n      setLedgerData(ledgerConfig);\n\n      return hwWalletP;\n    } catch (err) {\n      console.error('Could not initialise ledger app', err);\n\n      if (shouldLogout) {\n        logout(logoutRoute);\n      }\n    }\n    return null;\n  }\n\n  return { setLedgerProvider, ledgerData };\n};\n"],
  "mappings": "oTAAA,qCACA,yDAMA,IAYO,GAAM,GAAuB,IAAM,CACxC,GAAM,GAAc,EAAY,CAAmB,EAC7C,EAAa,EAAY,CAAkB,EAC3C,EAAc,EAAY,CAAmB,EAC7C,EAAW,EAAmB,EAE9B,CAAC,EAAY,GACjB,EAGG,EAEC,EAAiB,IAAY,0BACjC,GAAM,GAAkB,kBAAa,QAAS,KAE9C,GAAI,CACF,GAAI,YAAoB,IAAc,EAAS,cAAc,EAC3D,MAAI,IACF,MAAM,GAAS,gBAAgB,EAAY,KAAK,GAG3C,EAGT,GAAM,GAAY,GAAI,GAGtB,MAFsB,MAAM,GAAU,KAAK,GAMvC,IACF,MAAM,GAAU,gBAAgB,EAAY,KAAK,GAG5C,GAPE,IAQX,OAAS,EAAP,CACA,eAAQ,MAAM,sCAAsC,EAE7C,IACT,CACF,GAEA,WAAiC,EAA+B,gCAC9D,GAAI,GAEE,EAAe,GAAc,CAAC,YAAO,WAE3C,GAAI,CAGF,GAFA,EAAY,KAAM,GAAe,EAE7B,CAAC,EAAW,CACd,QAAQ,KAAK,iCAAiC,EAE1C,GACF,EAAO,CAAW,EAGpB,MACF,CAEA,GAAM,GAAe,KAAM,GAAuB,CAAS,EAC3D,SAAmB,CAAS,EAC5B,EAAc,CAAY,EAEnB,CACT,OAAS,EAAP,CACA,QAAQ,MAAM,kCAAmC,CAAG,EAEhD,GACF,EAAO,CAAW,CAEtB,CACA,MAAO,KACT,GAEA,MAAO,CAAE,oBAAmB,YAAW,CACzC",
  "names": []
}
