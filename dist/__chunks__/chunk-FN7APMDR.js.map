{
  "version": 3,
  "sources": ["../../src/apiCalls/utils/axiosInstance.ts"],
  "sourcesContent": ["import { buildAxiosFetch } from '@lifeomic/axios-fetch';\nimport axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\n\n// Needs to be used beacause an async call made after cross-window user interaction makes the dapp unresponsive\n\nconst fetch = buildAxiosFetch(axios);\n\nconst getFormattedAxiosResponse = async <T>(response: Response, config?: T) => {\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n\n  // Clone the response to be able to read it twice (for status and data)\n  const clonedResponse = response.clone();\n\n  // Parse the JSON body asynchronously\n  const jsonPromise = clonedResponse.json();\n\n  // Return the standardized response object\n  const [responseData] = await Promise.all([jsonPromise]);\n  return {\n    data: responseData,\n    status: response.status,\n    statusText: response.statusText,\n    headers: response.headers,\n    config\n  };\n};\n\nasync function customPost<T = any, R = AxiosResponse<T, any>, D = any>(\n  url: string,\n  data?: D,\n  config?: AxiosRequestConfig<D> | undefined\n): Promise<R> {\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(config?.headers || {})\n      },\n      ...config\n    } as RequestInit);\n\n    return getFormattedAxiosResponse(response, config) as unknown as Promise<R>;\n  } catch (error) {\n    console.error('Fetch Error:', error);\n    throw error;\n  }\n}\n\nasync function customGet<T = any, R = AxiosResponse<T, any>, D = any>(\n  url: string,\n  config?: AxiosRequestConfig<D> | undefined\n): Promise<R> {\n  try {\n    const response = await fetch(url, config as RequestInit);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    return getFormattedAxiosResponse(response, config) as unknown as Promise<R>;\n  } catch (error) {\n    console.error('Fetch Error:', error);\n    throw error;\n  }\n}\n\nasync function customPatch<T = any, R = AxiosResponse<T, any>, D = any>(\n  url: string,\n  data?: D,\n  config?: AxiosRequestConfig<D> | undefined\n): Promise<R> {\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      body: data ? JSON.stringify(data) : undefined,\n      headers: config?.headers || {},\n      ...config\n    } as RequestInit);\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    return getFormattedAxiosResponse(response, config) as unknown as Promise<R>;\n  } catch (error) {\n    console.error('Fetch Error:', error);\n    throw error;\n  }\n}\n\nconst axiosInstance = axios.create();\naxiosInstance.get = customGet;\naxiosInstance.post = customPost;\naxiosInstance.patch = customPatch;\n\nexport { axiosInstance };\n"],
  "mappings": "6DAAA,wDACA,qBA4BA,WACE,EACA,EACA,EACY,gCACZ,GAAI,CACF,GAAM,GAAW,KAAM,GAAM,EAAK,GAChC,OAAQ,OACR,KAAM,EAAO,KAAK,UAAU,CAAI,EAAI,OACpC,QAAS,GACP,eAAgB,oBACZ,kBAAQ,UAAW,CAAC,IAEvB,EACW,EAEhB,MAAO,GAA0B,EAAU,CAAM,CACnD,OAAS,EAAP,CACA,cAAQ,MAAM,eAAgB,CAAK,EAC7B,CACR,CACF,GAEA,WACE,EACA,EACY,gCACZ,GAAI,CACF,GAAM,GAAW,KAAM,GAAM,EAAK,CAAqB,EACvD,GAAI,CAAC,EAAS,GACZ,KAAM,IAAI,OAAM,uBAAuB,EAAS,QAAQ,EAG1D,MAAO,GAA0B,EAAU,CAAM,CACnD,OAAS,EAAP,CACA,cAAQ,MAAM,eAAgB,CAAK,EAC7B,CACR,CACF,GAEA,WACE,EACA,EACA,EACY,gCACZ,GAAI,CACF,GAAM,GAAW,KAAM,GAAM,EAAK,GAChC,OAAQ,QACR,KAAM,EAAO,KAAK,UAAU,CAAI,EAAI,OACpC,QAAS,kBAAQ,UAAW,CAAC,GAC1B,EACW,EAEhB,GAAI,CAAC,EAAS,GACZ,KAAM,IAAI,OAAM,uBAAuB,EAAS,QAAQ,EAG1D,MAAO,GAA0B,EAAU,CAAM,CACnD,OAAS,EAAP,CACA,cAAQ,MAAM,eAAgB,CAAK,EAC7B,CACR,CACF,GA3FA,GAKM,GAEA,EAsFA,EA7FN,aAKA,AAAM,EAAQ,EAAgB,CAAK,EAE7B,EAA4B,CAAU,EAAoB,IAAe,0BAC7E,GAAI,CAAC,EAAS,GACZ,KAAM,IAAI,OAAM,uBAAuB,EAAS,QAAQ,EAO1D,GAAM,GAAc,AAHG,EAAS,MAAM,EAGH,KAAK,EAGlC,CAAC,GAAgB,KAAM,SAAQ,IAAI,CAAC,CAAW,CAAC,EACtD,MAAO,CACL,KAAM,EACN,OAAQ,EAAS,OACjB,WAAY,EAAS,WACrB,QAAS,EAAS,QAClB,QACF,CACF,GAkEA,AAAM,EAAgB,EAAM,OAAO,EACnC,EAAc,IAAM,EACpB,EAAc,KAAO,EACrB,EAAc,MAAQ",
  "names": []
}
