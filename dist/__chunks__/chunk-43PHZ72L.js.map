{
  "version": 3,
  "sources": ["../../src/UI/ScamPhishingAlert/ScamPhishingAlert.tsx"],
  "sourcesContent": ["import React, { ReactNode } from 'react';\nimport { faLock } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classNames from 'classnames';\nimport { withStyles, WithStylesImportType } from 'hocs/withStyles';\n\nexport interface AuthorizationInfo {\n  url: string;\n  duration: string;\n  className?: string;\n}\n\nexport interface ScamPhishingAlertPropsType {\n  url: string;\n  className?: string;\n  icon?: ReactNode;\n  authorizationInfo?: AuthorizationInfo;\n}\n\nconst ScamPhishingAlertComponent = (\n  props: ScamPhishingAlertPropsType & WithStylesImportType\n) => {\n  const { className, url, icon, authorizationInfo, styles } = props;\n  const sanitizedUrl = url.replace('https://', '').replace(/\\/$/, '');\n  const sanitizedAuthUrl = authorizationInfo?.url\n    ? authorizationInfo.url.replace('https://', '').replace(/\\/$/, '')\n    : '';\n\n  return (\n    <>\n      <p className={classNames(styles?.scamPhishingAlert, className)}>\n        {icon || (\n          <FontAwesomeIcon\n            className={styles?.scamPhishingAlertIcon}\n            icon={faLock}\n          />\n        )}\n\n        <span className={styles?.scamPhishingAlertText}>\n          <span>Scam/Phishing verification:</span>{' '}\n          <span className={styles?.scamPhishingAlertPrefix}>\n            <strong>https://</strong>\n            {sanitizedUrl}\n          </span>\n        </span>\n      </p>\n\n      {authorizationInfo && authorizationInfo.url && (\n        <p\n          className={classNames(\n            styles?.scamPhishingAlert,\n            styles?.scamPhishingAlertAuthorization,\n            authorizationInfo.className\n          )}\n        >\n          <span className={styles?.scamPhishingAlertText}>\n            Please confirm that you are indeed connecting to\n          </span>\n\n          <span className={styles?.scamPhishingAlertText}>\n            <strong>https://</strong>\n            <span>{sanitizedAuthUrl} for</span>\n            <strong className={styles?.scamPhishingAlertAuthorizationDuration}>\n              {authorizationInfo.duration}\n            </strong>\n          </span>\n\n          <span className={styles?.scamPhishingAlertText}>\n            and that you trust this site. You might be sharing sensitive data.\n          </span>\n\n          <a href='https://multiversx.com/faq'>Learn more</a>\n        </p>\n      )}\n    </>\n  );\n};\n\nexport const ScamPhishingAlert = withStyles(ScamPhishingAlertComponent, {\n  ssrStyles: () => import('UI/ScamPhishingAlert/scamPhishingStyles.scss'),\n  clientStyles: () =>\n    require('UI/ScamPhishingAlert/scamPhishingStyles.scss').default\n});\n"],
  "mappings": "sIAAA,yBACA,2DACA,iEACA,0BAgBA,GAAM,GAA6B,AACjC,GACG,CACH,GAAM,CAAE,YAAW,MAAK,OAAM,oBAAmB,UAAW,EACtD,EAAe,EAAI,QAAQ,WAAY,EAAE,EAAE,QAAQ,MAAO,EAAE,EAC5D,EAAmB,WAAmB,IACxC,EAAkB,IAAI,QAAQ,WAAY,EAAE,EAAE,QAAQ,MAAO,EAAE,EAC/D,GAEJ,MACE,iCACE,gBAAC,KAAE,UAAW,EAAW,iBAAQ,kBAAmB,CAAS,GAC1D,GACC,gBAAC,GACC,UAAW,iBAAQ,sBACnB,KAAM,EACR,EAGF,gBAAC,QAAK,UAAW,iBAAQ,uBACvB,gBAAC,YAAK,6BAA2B,EAAQ,IACzC,gBAAC,QAAK,UAAW,iBAAQ,yBACvB,gBAAC,cAAO,UAAQ,EACf,CACH,CACF,CACF,EAEC,GAAqB,EAAkB,KACtC,gBAAC,KACC,UAAW,EACT,iBAAQ,kBACR,iBAAQ,+BACR,EAAkB,SACpB,GAEA,gBAAC,QAAK,UAAW,iBAAQ,uBAAuB,kDAEhD,EAEA,gBAAC,QAAK,UAAW,iBAAQ,uBACvB,gBAAC,cAAO,UAAQ,EAChB,gBAAC,YAAM,EAAiB,MAAI,EAC5B,gBAAC,UAAO,UAAW,iBAAQ,wCACxB,EAAkB,QACrB,CACF,EAEA,gBAAC,QAAK,UAAW,iBAAQ,uBAAuB,oEAEhD,EAEA,gBAAC,KAAE,KAAK,8BAA6B,YAAU,CACjD,CAEJ,CAEJ,EAEa,EAAoB,EAAW,EAA4B,CACtE,UAAW,IAAM,OAAO,iDACxB,aAAc,IACZ,WAAwD,OAC5D,CAAC",
  "names": []
}
