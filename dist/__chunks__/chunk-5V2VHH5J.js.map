{
  "version": 3,
  "sources": ["../../src/hooks/transactions/batch/tracker/useCheckHangingBatchesFallback.ts"],
  "sourcesContent": ["import { useCallback, useEffect, useRef } from 'react';\nimport { TRANSACTIONS_STATUS_DROP_INTERVAL_MS } from 'constants/transactionStatus';\nimport { removeBatchTransactions } from 'services/transactions';\nimport { getTransactionsStatus } from 'utils/transactions/batch/getTransactionsStatus';\nimport { sequentialToFlatArray } from 'utils/transactions/batch/sequentialToFlatArray';\nimport {\n  websocketConnection,\n  WebsocketConnectionStatusEnum\n} from '../../../websocketListener/websocketConnection';\nimport { extractSessionId } from '../../helpers/extractSessionId';\nimport { timestampIsOlderThan } from '../../helpers/timestampIsOlderThan';\nimport { useGetPollingInterval } from '../../useGetPollingInterval';\nimport { useGetBatches } from '../useGetBatches';\nimport { useUpdateBatch } from './useUpdateBatch';\n\n/**\n * Fallback mechanism to check hanging batches\n * Resolves the toast and set the status to failed for each transaction after a certain time (10minutes)\n * */\nexport const useCheckHangingBatchesFallback = (props?: {\n  onSuccess?: (sessionId: string | null) => void;\n  onFail?: (sessionId: string | null, errorMessage?: string) => void;\n}) => {\n  const { batchTransactionsArray } = useGetBatches();\n  const pollingInterval = useGetPollingInterval();\n  const updateBatch = useUpdateBatch();\n  const pollingIntervalTimer = useRef<NodeJS.Timeout | null>(null);\n  const isWebsocketCompleted =\n    websocketConnection.status === WebsocketConnectionStatusEnum.COMPLETED;\n  const onSuccess = props?.onSuccess;\n  const onFail = props?.onFail;\n\n  const checkHangingBatches = useCallback(async () => {\n    for (const { batchId, transactions } of batchTransactionsArray) {\n      const sessionId = extractSessionId(batchId);\n      if (!sessionId) {\n        continue;\n      }\n\n      if (\n        !timestampIsOlderThan(sessionId, TRANSACTIONS_STATUS_DROP_INTERVAL_MS)\n      ) {\n        continue;\n      }\n\n      await updateBatch({\n        sessionId: sessionId.toString(),\n        shouldRefreshBalance: true,\n        dropUnprocessedTransactions: true\n      });\n\n      const batchTransactionsArray = sequentialToFlatArray({ transactions });\n\n      const { isPending, isSuccessful, isFailed } = getTransactionsStatus({\n        transactions: batchTransactionsArray\n      });\n\n      if (!isPending) {\n        removeBatchTransactions(batchId);\n\n        if (isSuccessful) {\n          onSuccess?.(sessionId.toString());\n        }\n\n        if (isFailed) {\n          onFail?.(\n            sessionId.toString(),\n            'Error processing batch transactions. Status: failed'\n          );\n        }\n      }\n    }\n  }, [batchTransactionsArray, updateBatch, onSuccess, onFail]);\n\n  useEffect(() => {\n    if (isWebsocketCompleted) {\n      // Do not setInterval if we already subscribe to websocket event\n      if (pollingIntervalTimer.current) {\n        clearInterval(pollingIntervalTimer.current);\n      }\n\n      return;\n    }\n\n    if (pollingIntervalTimer.current) {\n      return;\n    }\n\n    pollingIntervalTimer.current = setInterval(() => {\n      checkHangingBatches();\n    }, pollingInterval);\n\n    return () => {\n      if (pollingIntervalTimer.current) {\n        clearInterval(pollingIntervalTimer.current);\n      }\n    };\n  }, [checkHangingBatches]);\n};\n"],
  "mappings": "icAAA,IACA,IADA,+DAmBO,GAAM,GAAiC,AAAC,GAGzC,CACJ,GAAM,CAAE,0BAA2B,EAAc,EAC3C,EAAkB,EAAsB,EACxC,EAAc,EAAe,EAC7B,EAAuB,EAA8B,IAAI,EACzD,EACJ,EAAoB,SAAW,YAC3B,EAAY,iBAAO,UACnB,EAAS,iBAAO,OAEhB,EAAsB,EAAY,IAAY,0BAClD,OAAW,CAAE,UAAS,iBAAkB,GAAwB,CAC9D,GAAM,GAAY,EAAiB,CAAO,EAK1C,GAJI,CAAC,GAKH,CAAC,EAAqB,EAAW,GAAoC,EAErE,SAGF,KAAM,GAAY,CAChB,UAAW,EAAU,SAAS,EAC9B,qBAAsB,GACtB,4BAA6B,EAC/B,CAAC,EAED,GAAM,GAAyB,EAAsB,CAAE,cAAa,CAAC,EAE/D,CAAE,YAAW,eAAc,YAAa,EAAsB,CAClE,aAAc,CAChB,CAAC,EAED,AAAK,GACH,GAAwB,CAAO,EAE3B,GACF,YAAY,EAAU,SAAS,IAG7B,GACF,YACE,EAAU,SAAS,EACnB,wDAIR,CACF,GAAG,CAAC,EAAwB,EAAa,EAAW,CAAM,CAAC,EAE3D,EAAU,IAAM,CACd,GAAI,EAAsB,CAExB,AAAI,EAAqB,SACvB,cAAc,EAAqB,OAAO,EAG5C,MACF,CAEA,GAAI,GAAqB,QAIzB,SAAqB,QAAU,YAAY,IAAM,CAC/C,EAAoB,CACtB,EAAG,CAAe,EAEX,IAAM,CACX,AAAI,EAAqB,SACvB,cAAc,EAAqB,OAAO,CAE9C,CACF,EAAG,CAAC,CAAmB,CAAC,CAC1B",
  "names": []
}
