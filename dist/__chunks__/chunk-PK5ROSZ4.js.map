{
  "version": 3,
  "sources": ["../../src/UI/TransactionInfo/components/EventsList/EventsList.tsx"],
  "sourcesContent": ["import React, { ReactNode, useEffect, useRef } from 'react';\nimport { faExchange } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classNames from 'classnames';\nimport { withStyles, WithStylesImportType } from 'hocs/withStyles';\nimport { EventType } from 'types/serverTransactions.types';\nimport { CopyButton } from 'UI/CopyButton';\nimport { Trim } from 'UI/Trim';\nimport {\n  getEventListDataHexValue,\n  getEventListHighlight\n} from 'utils/transactions/transactionInfoHelpers';\nimport { getEventListInitialDecodeMethod } from 'utils/transactions/transactionInfoHelpers/getEventListInitialDecodeMethod';\nimport { DataDecode } from '../DataDecode';\n\nexport interface EventsListPropsType {\n  events: EventType[];\n  id?: string;\n}\n\ninterface EventTopicsPropsType {\n  topics: EventType['topics'];\n  identifier?: string;\n}\n\ninterface EventDataPropsType {\n  children: ReactNode;\n  label: string;\n}\n\nconst EventTopics = ({ topics, identifier }: EventTopicsPropsType) => {\n  const mergedTopics = topics.filter((topic) => topic).join('\\n');\n\n  return <DataDecode value={mergedTopics} identifier={identifier} />;\n};\n\nconst EventData = ({\n  label,\n  children,\n  globalStyles,\n  styles\n}: EventDataPropsType & WithStylesImportType) => (\n  <div className={classNames(globalStyles?.row, styles?.row)}>\n    <div className={classNames(globalStyles?.colSm2, styles?.label)}>\n      {label}\n    </div>\n\n    <div className={classNames(globalStyles?.colSm10, styles?.data)}>\n      {children}\n    </div>\n  </div>\n);\n\nconst EventsListComponent = ({\n  events,\n  id,\n  globalStyles,\n  styles\n}: EventsListPropsType & WithStylesImportType) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const initialDecodeMethod = getEventListInitialDecodeMethod();\n\n  useEffect(() => {\n    if (ref.current && ref.current !== null) {\n      window?.scrollTo({\n        top: ref.current.getBoundingClientRect().top - 70,\n        behavior: 'smooth'\n      });\n    }\n  }, []);\n\n  return (\n    <div className={styles?.events}>\n      {events.map((event: EventType, index) => {\n        const dataHexValue = getEventListDataHexValue(event);\n        const highlightTx = getEventListHighlight(event, id);\n\n        return (\n          <div\n            key={index}\n            className={styles?.event}\n            {...(highlightTx ? { ref } : {})}\n          >\n            <div className={styles?.icon}>\n              <FontAwesomeIcon icon={faExchange} />\n            </div>\n\n            <div className={styles?.content}>\n              {event.address != null && (\n                <EventData\n                  label='Hash'\n                  globalStyles={globalStyles}\n                  styles={styles}\n                >\n                  <Trim text={event.address} className={styles?.hash} />\n\n                  <CopyButton text={event.address} className={styles?.copy} />\n                </EventData>\n              )}\n\n              {event.identifier != null && (\n                <EventData\n                  label='Identifier'\n                  globalStyles={globalStyles}\n                  styles={styles}\n                >\n                  {event.identifier}\n                </EventData>\n              )}\n\n              {event.topics != null && event.topics.length > 0 && (\n                <EventData\n                  label='Topics'\n                  globalStyles={globalStyles}\n                  styles={styles}\n                >\n                  <EventTopics\n                    topics={event.topics}\n                    identifier={event.identifier}\n                  />\n                </EventData>\n              )}\n\n              {event.data != null && (\n                <EventData\n                  label='Data'\n                  globalStyles={globalStyles}\n                  styles={styles}\n                >\n                  <DataDecode\n                    value={dataHexValue}\n                    {...(highlightTx ? { initialDecodeMethod } : {})}\n                  />\n                </EventData>\n              )}\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport const EventsList = withStyles(EventsListComponent, {\n  ssrStyles: () =>\n    import('UI/TransactionInfo/components/EventsList/styles.scss'),\n  clientStyles: () =>\n    require('UI/TransactionInfo/components/EventsList/styles.scss').default\n});\n"],
  "mappings": "gaAAA,qDACA,+DACA,iEACA,0BAKA,IAsBA,GAAM,GAAc,CAAC,CAAE,SAAQ,gBAAuC,CACpE,GAAM,GAAe,EAAO,OAAO,AAAC,GAAU,CAAK,EAAE,KAAK;AAAA,CAAI,EAE9D,MAAO,iBAAC,GAAW,MAAO,EAAc,WAAY,EAAY,CAClE,EAEM,EAAY,CAAC,CACjB,QACA,WACA,eACA,YAEA,gBAAC,OAAI,UAAW,EAAW,iBAAc,IAAK,iBAAQ,GAAG,GACvD,gBAAC,OAAI,UAAW,EAAW,iBAAc,OAAQ,iBAAQ,KAAK,GAC3D,CACH,EAEA,gBAAC,OAAI,UAAW,EAAW,iBAAc,QAAS,iBAAQ,IAAI,GAC3D,CACH,CACF,EAGI,EAAsB,CAAC,CAC3B,SACA,KACA,eACA,YACgD,CAChD,GAAM,GAAM,EAAuB,IAAI,EAEjC,EAAsB,EAAgC,EAE5D,SAAU,IAAM,CACd,AAAI,EAAI,SAAW,EAAI,UAAY,MACjC,sBAAQ,SAAS,CACf,IAAK,EAAI,QAAQ,sBAAsB,EAAE,IAAM,GAC/C,SAAU,QACZ,GAEJ,EAAG,CAAC,CAAC,EAGH,gBAAC,OAAI,UAAW,iBAAQ,QACrB,EAAO,IAAI,CAAC,EAAkB,IAAU,CACvC,GAAM,GAAe,EAAyB,CAAK,EAC7C,EAAc,EAAsB,EAAO,CAAE,EAEnD,MACE,iBAAC,SACC,IAAK,EACL,UAAW,iBAAQ,OACd,EAAc,CAAE,KAAI,EAAI,CAAC,GAE9B,gBAAC,OAAI,UAAW,iBAAQ,MACtB,gBAAC,GAAgB,KAAM,EAAY,CACrC,EAEA,gBAAC,OAAI,UAAW,iBAAQ,SACrB,EAAM,SAAW,MAChB,gBAAC,GACC,MAAM,OACN,aAAc,EACd,OAAQ,GAER,gBAAC,GAAK,KAAM,EAAM,QAAS,UAAW,iBAAQ,KAAM,EAEpD,gBAAC,GAAW,KAAM,EAAM,QAAS,UAAW,iBAAQ,KAAM,CAC5D,EAGD,EAAM,YAAc,MACnB,gBAAC,GACC,MAAM,aACN,aAAc,EACd,OAAQ,GAEP,EAAM,UACT,EAGD,EAAM,QAAU,MAAQ,EAAM,OAAO,OAAS,GAC7C,gBAAC,GACC,MAAM,SACN,aAAc,EACd,OAAQ,GAER,gBAAC,GACC,OAAQ,EAAM,OACd,WAAY,EAAM,WACpB,CACF,EAGD,EAAM,MAAQ,MACb,gBAAC,GACC,MAAM,OACN,aAAc,EACd,OAAQ,GAER,gBAAC,KACC,MAAO,GACF,EAAc,CAAE,qBAAoB,EAAI,CAAC,EAChD,CACF,CAEJ,CACF,CAEJ,CAAC,CACH,CAEJ,EAEa,EAAa,EAAW,EAAqB,CACxD,UAAW,IACT,OAAO,yDACT,aAAc,IACZ,WAAgE,OACpE,CAAC",
  "names": []
}
