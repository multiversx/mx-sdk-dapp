{
  "version": 3,
  "sources": ["../../src/utils/account/getShardOfAddress.ts"],
  "sourcesContent": ["import { METACHAIN_SHARD_ID } from 'constants/index';\n\nconst isAddressOfMetachain = (pubKey: Buffer) => {\n  // prettier-ignore\n  const metachainPrefix = Buffer.from([\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n  ]);\n  const pubKeyPrefix = pubKey.slice(0, metachainPrefix.length);\n  if (pubKeyPrefix.equals(metachainPrefix)) {\n    return true;\n  }\n  const zeroAddress = Buffer.alloc(32).fill(0);\n  return pubKey.equals(zeroAddress);\n};\nexport const getShardOfAddress = (hexPubKey: any) => {\n  try {\n    const numShards = 3;\n    const maskHigh = parseInt('11', 2);\n    const maskLow = parseInt('01', 2);\n    const pubKey = Buffer.from(hexPubKey, 'hex');\n    const lastByteOfPubKey = pubKey[31];\n    if (isAddressOfMetachain(pubKey)) {\n      return METACHAIN_SHARD_ID;\n    }\n    let shard = lastByteOfPubKey & maskHigh;\n    if (shard > numShards - 1) {\n      shard = lastByteOfPubKey & maskLow;\n    }\n    return shard;\n  } catch (err) {\n    return -1;\n  }\n};\n"],
  "mappings": "qGAAA,GAEM,GAYO,EAdb,iBAEA,AAAM,EAAuB,AAAC,GAAmB,CAE/C,GAAM,GAAkB,SAAO,KAAK,CAClC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,CAC1E,CAAC,EAED,GAAI,AADiB,EAAO,MAAM,EAAG,EAAgB,MAAM,EAC1C,OAAO,CAAe,EACrC,MAAO,GAET,GAAM,GAAc,SAAO,MAAM,EAAE,EAAE,KAAK,CAAC,EAC3C,MAAO,GAAO,OAAO,CAAW,CAClC,EACa,EAAoB,AAAC,GAAmB,CACnD,GAAI,CAEF,GAAM,GAAW,SAAS,KAAM,CAAC,EAC3B,EAAU,SAAS,KAAM,CAAC,EAC1B,EAAS,SAAO,KAAK,EAAW,KAAK,EACrC,EAAmB,EAAO,IAChC,GAAI,EAAqB,CAAM,EAC7B,MAAO,GAET,GAAI,GAAQ,EAAmB,EAC/B,MAAI,GAAQ,EAAY,GACtB,GAAQ,EAAmB,GAEtB,CACT,OAAS,EAAP,CACA,MAAO,EACT,CACF",
  "names": []
}
