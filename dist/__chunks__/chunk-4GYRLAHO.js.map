{
  "version": 3,
  "sources": ["../../src/utils/toasts/customToastsActions.ts"],
  "sourcesContent": ["import { addCustomToast, removeCustomToast } from 'reduxStore/slices';\nimport { store } from 'reduxStore/store';\nimport { CustomToastType } from '../../types/toasts.types';\n\n/**\n * React components cannot be sent trough Custom Events nor trough Redux\n * So a local dictionary is created here for registerd components\n */\nconst componentsDictionary: Record<string, () => JSX.Element> = {};\n/**\n * Callbacks cannot be sent trough Custom Events nor trough Redux\n * So a local dictionary is created here for registered callbacks\n */\nconst componentsCloseHandlersDictionary: Record<string, () => void> = {};\n\nexport const getRegisteredCustomIconComponents = (id: string) =>\n  componentsDictionary[id];\n\nexport const getRegisteredToastCloseHandler = (id: string) =>\n  componentsCloseHandlersDictionary[id];\n\nexport const addNewCustomToast = (props: CustomToastType) => {\n  if (props.component != null) {\n    const { component, onClose, ...rest } = props;\n    const data = store.dispatch(\n      addCustomToast({\n        ...rest,\n        // do not send component to Redux\n        component: null,\n        onClose: undefined\n      })\n    );\n\n    componentsDictionary[data?.payload.toastId] = component;\n    if (onClose) {\n      componentsCloseHandlersDictionary[data?.payload.toastId] = onClose;\n    }\n\n    return data?.payload;\n  }\n  return store.dispatch(addCustomToast(props)).payload;\n};\n\nexport const deleteCustomToast = (toastId: string) =>\n  store.dispatch(removeCustomToast(toastId));\n"],
  "mappings": "mMAAA,QACA,IAOA,GAAM,GAA0D,CAAC,EAK3D,EAAgE,CAAC,EAE1D,EAAoC,AAAC,GAChD,EAAqB,GAEV,EAAiC,AAAC,GAC7C,EAAkC,GAEvB,EAAoB,AAAC,GAA2B,CAC3D,GAAI,EAAM,WAAa,KAAM,CAC3B,GAAwC,KAAhC,aAAW,WAAqB,EAAT,IAAS,EAAT,CAAvB,YAAW,YACb,EAAO,EAAM,SACjB,EAAe,OACV,GADU,CAGb,UAAW,KACX,QAAS,MACX,EAAC,CACH,EAEA,SAAqB,iBAAM,QAAQ,SAAW,EAC1C,GACF,GAAkC,iBAAM,QAAQ,SAAW,GAGtD,iBAAM,OACf,CACA,MAAO,GAAM,SAAS,EAAe,CAAK,CAAC,EAAE,OAC/C,EAEa,EAAoB,AAAC,GAChC,EAAM,SAAS,EAAkB,CAAO,CAAC",
  "names": []
}
