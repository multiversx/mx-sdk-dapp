{
  "version": 3,
  "sources": ["../../src/UI/Progress/index.tsx"],
  "sourcesContent": ["import React, { useEffect, useMemo, useRef, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport { withStyles, WithStylesImportType } from 'hocs/withStyles';\nimport { getUnixTimestampWithAddedSeconds } from 'utils/dateTime';\nimport {\n  getRemainingValue,\n  PROGRESS_INTERVAL_DURATION_MS\n} from 'utils/progress/getRemainingValue';\nimport { storage } from 'utils/storage';\nimport { WithClassnameType } from '../types';\n\nconst TOAST_PROGRESS_KEY = 'toastProgress';\n\n// TODO: Rename to \"ProgressPropsType\" when sdk-dapp@3.0.0\nexport interface ProgressProps extends WithClassnameType {\n  id: string;\n  done: boolean;\n  children: ReactNode;\n  expiresIn?: number;\n  isCrossShard?: boolean;\n  progress: {\n    startTime: number;\n    endTime: number;\n  };\n}\n\nconst ProgressComponent = ({\n  id,\n  children,\n  progress,\n  done,\n  expiresIn = 10 * 60,\n  className = 'dapp-progress',\n  isCrossShard = false,\n  styles\n}: ProgressProps & WithStylesImportType) => {\n  const { currentRemaining, totalSeconds } = useMemo(() => {\n    const toastsProgress = storage.session.getItem(TOAST_PROGRESS_KEY) || {};\n    const currentToastProgress = toastsProgress[id];\n    const totalSeconds = progress ? progress.endTime - progress.startTime : 0;\n\n    return { currentRemaining: currentToastProgress || 100, totalSeconds };\n  }, []);\n\n  const progressRef = useRef<HTMLDivElement | null>(null);\n  const intervalRef = useRef<NodeJS.Timeout>();\n  const percentRemainingRef = useRef(currentRemaining);\n\n  useEffect(() => {\n    if (progress == null) {\n      return;\n    }\n\n    if (done) {\n      handleFinishedProgress();\n    } else {\n      handleRunningProgress();\n    }\n\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [progress, done]);\n\n  function removeTxFromSession() {\n    const toastProgress: Record<number, number> =\n      storage.session.getItem(TOAST_PROGRESS_KEY);\n\n    const hasSessionStoredTx = Boolean(toastProgress?.[id]);\n\n    if (!hasSessionStoredTx) {\n      return;\n    }\n\n    delete toastProgress[id];\n\n    saveToSession(toastProgress);\n  }\n\n  function updateTxFromSession(value: number) {\n    const toastProgress: Record<number, number> =\n      storage.session.getItem(TOAST_PROGRESS_KEY) || {};\n\n    toastProgress[id] = value;\n\n    saveToSession(toastProgress);\n  }\n\n  function saveToSession(data: Record<number, number>) {\n    storage.session.setItem({\n      key: TOAST_PROGRESS_KEY,\n      data: data,\n      expires: getUnixTimestampWithAddedSeconds(expiresIn)\n    });\n  }\n\n  function handleFinishedProgress() {\n    if (percentRemainingRef.current < 100) {\n      // Prevent setting the progress to finished state at rerender\n      setPercentRemaining(0);\n\n      return;\n    }\n\n    intervalRef.current = setInterval(() => {\n      if (progressRef.current == null) {\n        return;\n      }\n\n      const existing = percentRemainingRef.current;\n      const value = existing - 1;\n\n      if (value <= 0) {\n        clearInterval(intervalRef.current);\n        removeTxFromSession();\n        setPercentRemaining(0);\n      } else {\n        updateTxFromSession(value);\n        setPercentRemaining(value);\n      }\n    }, PROGRESS_INTERVAL_DURATION_MS);\n  }\n\n  function handleRunningProgress() {\n    const toastProgress: Record<number, number> =\n      storage.session.getItem(TOAST_PROGRESS_KEY) || {};\n    const currentToast = toastProgress[id];\n\n    if (currentToast === percentRemainingRef.current) {\n      // Set the remaining value before starting the interval\n      const value = getRemainingValue({\n        remaining: percentRemainingRef.current,\n        totalSeconds,\n        isCrossShard\n      });\n      setPercentRemaining(value);\n      updateTxFromSession(value);\n    }\n\n    intervalRef.current = setInterval(() => {\n      if (progressRef.current == null) {\n        return;\n      }\n\n      const value = getRemainingValue({\n        remaining: percentRemainingRef.current,\n        totalSeconds,\n        isCrossShard\n      });\n\n      updateTxFromSession(value);\n      setPercentRemaining(value);\n    }, PROGRESS_INTERVAL_DURATION_MS);\n  }\n\n  function setPercentRemaining(value: number) {\n    percentRemainingRef.current = value;\n    updateProgressBar();\n  }\n\n  function updateProgressBar() {\n    if (progressRef.current == null) {\n      return;\n    }\n\n    const value = percentRemainingRef.current;\n\n    progressRef.current.style.width = `${value}%`;\n    progressRef.current.ariaValueNow = value;\n  }\n\n  return progress ? (\n    <div className={classNames(styles?.progress, className)}>\n      <div\n        ref={progressRef}\n        role='progressbar'\n        aria-valuemin={0}\n        aria-valuemax={100}\n        className={styles?.bar}\n      />\n      {children}\n    </div>\n  ) : (\n    <>{children}</>\n  );\n};\n\nexport const Progress = withStyles(ProgressComponent, {\n  ssrStyles: () => import('UI/Progress/progressStyles.scss'),\n  clientStyles: () => require('UI/Progress/progressStyles.scss').default\n});\n"],
  "mappings": "oTAAA,kEACA,0BAEA,IAKA,IAGA,GAAM,GAAqB,gBAerB,EAAoB,CAAC,CACzB,KACA,WACA,WACA,OACA,YAAY,GAAK,GACjB,YAAY,gBACZ,eAAe,GACf,YAC0C,CAC1C,GAAM,CAAE,mBAAkB,gBAAiB,EAAQ,IAAM,CAEvD,GAAM,GAAuB,AADN,GAAQ,QAAQ,QAAQ,CAAkB,GAAK,CAAC,GAC3B,GACtC,EAAe,EAAW,EAAS,QAAU,EAAS,UAAY,EAExE,MAAO,CAAE,iBAAkB,GAAwB,IAAK,cAAa,CACvE,EAAG,CAAC,CAAC,EAEC,EAAc,EAA8B,IAAI,EAChD,EAAc,EAAuB,EACrC,EAAsB,EAAO,CAAgB,EAEnD,EAAU,IAAM,CACd,GAAI,GAAY,KAIhB,MAAI,GACF,EAAuB,EAEvB,EAAsB,EAGjB,IAAM,CACX,cAAc,EAAY,OAAO,CACnC,CACF,EAAG,CAAC,EAAU,CAAI,CAAC,EAEnB,YAA+B,CAC7B,GAAM,GACJ,EAAQ,QAAQ,QAAQ,CAAkB,EAI5C,AAAI,CAFuB,QAAQ,iBAAgB,EAAG,GAMtD,OAAO,GAAc,GAErB,EAAc,CAAa,EAC7B,CAEA,WAA6B,EAAe,CAC1C,GAAM,GACJ,EAAQ,QAAQ,QAAQ,CAAkB,GAAK,CAAC,EAElD,EAAc,GAAM,EAEpB,EAAc,CAAa,CAC7B,CAEA,WAAuB,EAA8B,CACnD,EAAQ,QAAQ,QAAQ,CACtB,IAAK,EACL,KAAM,EACN,QAAS,EAAiC,CAAS,CACrD,CAAC,CACH,CAEA,YAAkC,CAChC,GAAI,EAAoB,QAAU,IAAK,CAErC,EAAoB,CAAC,EAErB,MACF,CAEA,EAAY,QAAU,YAAY,IAAM,CACtC,GAAI,EAAY,SAAW,KACzB,OAIF,GAAM,GAAQ,AADG,EAAoB,QACZ,EAEzB,AAAI,GAAS,EACX,eAAc,EAAY,OAAO,EACjC,EAAoB,EACpB,EAAoB,CAAC,GAErB,GAAoB,CAAK,EACzB,EAAoB,CAAK,EAE7B,EAAG,CAA6B,CAClC,CAEA,YAAiC,CAK/B,GAAI,AAFiB,AADnB,GAAQ,QAAQ,QAAQ,CAAkB,GAAK,CAAC,GACf,KAEd,EAAoB,QAAS,CAEhD,GAAM,GAAQ,EAAkB,CAC9B,UAAW,EAAoB,QAC/B,eACA,cACF,CAAC,EACD,EAAoB,CAAK,EACzB,EAAoB,CAAK,CAC3B,CAEA,EAAY,QAAU,YAAY,IAAM,CACtC,GAAI,EAAY,SAAW,KACzB,OAGF,GAAM,GAAQ,EAAkB,CAC9B,UAAW,EAAoB,QAC/B,eACA,cACF,CAAC,EAED,EAAoB,CAAK,EACzB,EAAoB,CAAK,CAC3B,EAAG,CAA6B,CAClC,CAEA,WAA6B,EAAe,CAC1C,EAAoB,QAAU,EAC9B,EAAkB,CACpB,CAEA,YAA6B,CAC3B,GAAI,EAAY,SAAW,KACzB,OAGF,GAAM,GAAQ,EAAoB,QAElC,EAAY,QAAQ,MAAM,MAAQ,GAAG,KACrC,EAAY,QAAQ,aAAe,CACrC,CAEA,MAAO,GACL,gBAAC,OAAI,UAAW,EAAW,iBAAQ,SAAU,CAAS,GACpD,gBAAC,OACC,IAAK,EACL,KAAK,cACL,gBAAe,EACf,gBAAe,IACf,UAAW,iBAAQ,IACrB,EACC,CACH,EAEA,gCAAG,CAAS,CAEhB,EAEa,EAAW,EAAW,EAAmB,CACpD,UAAW,IAAM,OAAO,oCACxB,aAAc,IAAM,WAA2C,OACjE,CAAC",
  "names": []
}
