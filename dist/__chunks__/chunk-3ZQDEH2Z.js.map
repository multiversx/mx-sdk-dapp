{
  "version": 3,
  "sources": ["../../src/utils/validation/stringIsFloat.ts"],
  "sourcesContent": ["import BigNumber from 'bignumber.js';\nimport { ZERO } from 'constants/index';\n\nexport const stringIsFloat = (amount: string) => {\n  if (isNaN(amount as any)) {\n    return false;\n  }\n  if (amount == null) {\n    return false;\n  }\n  if (String(amount).includes('Infinity')) {\n    return false;\n  }\n\n  // eslint-disable-next-line\n  let [wholes, decimals] = amount.split('.');\n  const LocalBigNumber = BigNumber.clone();\n\n  if (decimals) {\n    const areAllNumbers = decimals\n      .split('')\n      .every((digit) => !isNaN(parseInt(digit)));\n\n    LocalBigNumber.set({\n      DECIMAL_PLACES: areAllNumbers\n        ? decimals.length\n        : BigNumber.config().DECIMAL_PLACES\n    });\n\n    while (decimals.charAt(decimals.length - 1) === ZERO) {\n      decimals = decimals.slice(0, -1);\n    }\n  }\n  const number = decimals ? [wholes, decimals].join('.') : wholes;\n  const bNparsed = LocalBigNumber(number);\n\n  const output =\n    bNparsed.toString(10) === number && bNparsed.comparedTo(0) >= 0;\n\n  return output;\n};\n"],
  "mappings": "8FAAA,+BAGa,GAHb,aACA,IAEO,AAAM,EAAgB,AAAC,GAAmB,CAO/C,GANI,MAAM,CAAa,GAGnB,GAAU,MAGV,OAAO,CAAM,EAAE,SAAS,UAAU,EACpC,MAAO,GAIT,GAAI,CAAC,EAAQ,GAAY,EAAO,MAAM,GAAG,EACnC,EAAiB,EAAU,MAAM,EAEvC,GAAI,EAAU,CACZ,GAAM,GAAgB,EACnB,MAAM,EAAE,EACR,MAAM,AAAC,GAAU,CAAC,MAAM,SAAS,CAAK,CAAC,CAAC,EAQ3C,IANA,EAAe,IAAI,CACjB,eAAgB,EACZ,EAAS,OACT,EAAU,OAAO,EAAE,cACzB,CAAC,EAEM,EAAS,OAAO,EAAS,OAAS,CAAC,IAAM,GAC9C,EAAW,EAAS,MAAM,EAAG,EAAE,CAEnC,CACA,GAAM,GAAS,EAAW,CAAC,EAAQ,CAAQ,EAAE,KAAK,GAAG,EAAI,EACnD,EAAW,EAAe,CAAM,EAKtC,MAFE,GAAS,SAAS,EAAE,IAAM,GAAU,EAAS,WAAW,CAAC,GAAK,CAGlE",
  "names": []
}
