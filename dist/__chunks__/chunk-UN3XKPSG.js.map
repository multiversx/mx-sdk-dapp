{
  "version": 3,
  "sources": ["../../src/components/LogoutListener/helpers/useNativeAuthLogoutWarning/useNativeAuthLogoutWarning.ts"],
  "sourcesContent": ["import { useEffect, useRef } from 'react';\nimport { faRefresh } from '@fortawesome/free-solid-svg-icons';\nimport BigNumber from 'bignumber.js';\nimport { useGetAccountInfo } from 'hooks';\nimport { useSelector } from 'reduxStore/DappProviderContext';\nimport { loginInfoSelector } from 'reduxStore/selectors';\nimport { getTokenExpiration } from 'services/nativeAuth/methods';\nimport { addNewCustomToast } from 'utils/toasts';\n\nimport { getHumanReadableTokenExpirationTime } from './helpers';\n\nexport const useNativeAuthLogoutWarning = () => {\n  const { address } = useGetAccountInfo();\n  const { tokenLogin } = useSelector(loginInfoSelector);\n\n  const { secondsUntilExpires, expiresAt } = getTokenExpiration(\n    tokenLogin?.nativeAuthToken\n  );\n\n  const warningLogoutTimeoutRef = useRef<NodeJS.Timeout>();\n\n  useEffect(() => {\n    // Handle the actual logout functionality.\n    const secondsUntilExpiresBN = new BigNumber(String(secondsUntilExpires));\n    const millisecondsUntilLogout = secondsUntilExpiresBN.times(1000);\n\n    if (!secondsUntilExpires || secondsUntilExpiresBN.isLessThanOrEqualTo(0)) {\n      return;\n    }\n\n    // Handle the logout warning popup.\n    if (tokenLogin?.nativeAuthConfig?.tokenExpirationToastWarningSeconds) {\n      clearTimeout(warningLogoutTimeoutRef.current);\n\n      const logoutWarningOffsetSeconds = new BigNumber(\n        tokenLogin.nativeAuthConfig.tokenExpirationToastWarningSeconds\n      );\n\n      const logoutWarningOffsetMilliseconds =\n        logoutWarningOffsetSeconds.times(1000);\n\n      const millisecondsUntilLogoutWarning = secondsUntilExpiresBN\n        .times(1000)\n        .minus(logoutWarningOffsetMilliseconds);\n\n      const readableMinutesUntilLogout = getHumanReadableTokenExpirationTime(\n        millisecondsUntilLogout.toNumber()\n      );\n\n      const timeoutUntilLogoutWarning =\n        millisecondsUntilLogoutWarning.isLessThanOrEqualTo(0)\n          ? 0\n          : millisecondsUntilLogoutWarning.toNumber();\n\n      warningLogoutTimeoutRef.current = setTimeout(() => {\n        addNewCustomToast({\n          toastId: 'nativeAuthTokenExpiration',\n          type: 'custom',\n          title: 'Session Expiration Warning',\n          icon: faRefresh,\n          message: `Your token will expire in ${readableMinutesUntilLogout}!`\n        });\n      }, timeoutUntilLogoutWarning);\n    }\n\n    return () => {\n      clearTimeout(warningLogoutTimeoutRef.current);\n    };\n  }, [expiresAt, address, tokenLogin?.nativeAuthConfig]);\n\n  return null;\n};\n"],
  "mappings": "gUAAA,kDACA,8DACA,4BAGA,IAMO,GAAM,GAA6B,IAAM,CAC9C,GAAM,CAAE,WAAY,EAAkB,EAChC,CAAE,cAAe,EAAY,CAAiB,EAE9C,CAAE,sBAAqB,aAAc,EACzC,iBAAY,eACd,EAEM,EAA0B,EAAuB,EAEvD,SAAU,IAAM,CArBlB,MAuBI,GAAM,GAAwB,GAAI,GAAU,OAAO,CAAmB,CAAC,EACjE,EAA0B,EAAsB,MAAM,GAAI,EAEhE,GAAI,GAAC,GAAuB,EAAsB,oBAAoB,CAAC,GAKvE,IAAI,oBAAY,mBAAZ,QAA8B,mCAAoC,CACpE,aAAa,EAAwB,OAAO,EAM5C,GAAM,GACJ,AALiC,GAAI,GACrC,EAAW,iBAAiB,kCAC9B,EAG6B,MAAM,GAAI,EAEjC,EAAiC,EACpC,MAAM,GAAI,EACV,MAAM,CAA+B,EAElC,EAA6B,EACjC,EAAwB,SAAS,CACnC,EAEM,EACJ,EAA+B,oBAAoB,CAAC,EAChD,EACA,EAA+B,SAAS,EAE9C,EAAwB,QAAU,WAAW,IAAM,CACjD,EAAkB,CAChB,QAAS,4BACT,KAAM,SACN,MAAO,6BACP,KAAM,EACN,QAAS,6BAA6B,IACxC,CAAC,CACH,EAAG,CAAyB,CAC9B,CAEA,MAAO,IAAM,CACX,aAAa,EAAwB,OAAO,CAC9C,EACF,EAAG,CAAC,EAAW,EAAS,iBAAY,gBAAgB,CAAC,EAE9C,IACT",
  "names": []
}
