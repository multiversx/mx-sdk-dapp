{
  "version": 3,
  "sources": ["../../src/utils/transactions/getTransactionLink.ts", "../../src/utils/transactions/getOperationsDetails.ts", "../../src/utils/transactions/index.ts", "../../src/reduxStore/selectors/transactionsSelectors.ts", "../../src/reduxStore/selectors/index.ts", "../../src/utils/transactions/getAllTransactionsLink.ts"],
  "sourcesContent": ["import { explorerAddressSelector } from 'reduxStore/selectors';\nimport { store } from 'reduxStore/store';\n\nexport function getTransactionLink(\n  transactionHash: string,\n  explorerAddress: string = explorerAddressSelector(store.getState())\n) {\n  return `${explorerAddress}/transactions/${transactionHash}`;\n}\n", "import { InterpretedTransactionType, OperationType } from 'types';\nimport { getVisibleOperations } from 'utils/transactions';\n\nexport type OperationDetailsPropsType = {\n  transaction: InterpretedTransactionType;\n  filterBy?: {\n    action?: OperationType['action'];\n    sender?: OperationType['sender'];\n    receiver?: OperationType['receiver'];\n  };\n};\n\nexport const getOperationsDetails = ({\n  transaction,\n  filterBy\n}: OperationDetailsPropsType): OperationType[] => {\n  if (!transaction.operations) {\n    return [];\n  }\n\n  const operations = getVisibleOperations(transaction);\n\n  if (operations.length === 0) {\n    return [];\n  }\n\n  if (!filterBy) {\n    return operations;\n  }\n\n  const { action, receiver, sender } = filterBy;\n\n  const filteredOperations = operations.filter((operation) => {\n    if (action && operation.action !== action) {\n      return false;\n    }\n\n    if (sender && operation.sender !== sender) {\n      return false;\n    }\n\n    if (receiver && operation.receiver !== receiver) {\n      return false;\n    }\n\n    return true;\n  });\n\n  return filteredOperations;\n};\n", "export * from './builtCallbackUrl';\nexport * from './getAllTransactionsLink';\nexport * from './getAreTransactionsOnSameShard';\nexport * from './getInterpretedTransaction';\nexport * from './getTokenFromData';\nexport * from './getTransactionLink';\nexport * from './getUnHighlightedDataFieldParts';\nexport * from './isGuardianTx';\nexport * from './isTokenTransfer';\nexport * from './parseMultiEsdtTransferData';\nexport * from './parseTransactionAfterSigning';\nexport * from './removeTransactionParamsFromUrl';\nexport * from './transactionInfoHelpers';\nexport * from './transactionStateByStatus';\nexport * from './getOperationsDetails';\n", "import { Transaction } from '@multiversx/sdk-core';\nimport { newTransaction } from 'models/newTransaction';\nimport {\n  getIsTransactionFailed,\n  getIsTransactionPending,\n  getIsTransactionSuccessful,\n  getIsTransactionTimedOut\n} from 'utils/transactions';\nimport {\n  CustomTransactionInformation,\n  RawTransactionType,\n  SignedTransactionsType\n} from '../../types';\nimport { RootState } from '../store';\nimport { createDeepEqualSelector } from './helpers';\n\nexport interface TransactionsToSignReturnType {\n  callbackRoute?: string;\n  sessionId: string;\n  transactions: Transaction[];\n  customTransactionInformation: CustomTransactionInformation;\n}\n\nexport const transactionsSelectors = (state: RootState) => state.transactions;\n\nexport const signedTransactionsSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state) => state.signedTransactions as SignedTransactionsType\n);\n\nexport const signTransactionsErrorSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state) => state.signTransactionsError\n);\n\nexport const signTransactionsCancelMessageSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state) => state.signTransactionsCancelMessage\n);\n\nconst selectTxByStatus =\n  (txStatusVerifier: typeof getIsTransactionPending) =>\n  (signedTransactions: SignedTransactionsType) =>\n    Object.entries(signedTransactions).reduce((acc, [sessionId, txBody]) => {\n      if (txStatusVerifier(txBody.status)) {\n        acc[sessionId] = txBody;\n      }\n      return acc;\n    }, {} as SignedTransactionsType);\n\nexport const pendingSignedTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  selectTxByStatus(getIsTransactionPending)\n);\n\nexport const successfulTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  selectTxByStatus(getIsTransactionSuccessful)\n);\n\nexport const failedTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  selectTxByStatus(getIsTransactionFailed)\n);\n\nexport const timedOutTransactionsSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  selectTxByStatus(getIsTransactionTimedOut)\n);\n\nexport const transactionsToSignSelector = createDeepEqualSelector(\n  transactionsSelectors,\n  (state): TransactionsToSignReturnType | null => {\n    if (state?.transactionsToSign == null) {\n      return null;\n    }\n    return {\n      ...state.transactionsToSign,\n      transactions:\n        state?.transactionsToSign?.transactions.map((tx: RawTransactionType) =>\n          newTransaction(tx)\n        ) || []\n    };\n  }\n);\n\nexport const transactionStatusSelector = createDeepEqualSelector(\n  signedTransactionsSelector,\n  (_: RootState, transactionSessionId: string | null) => transactionSessionId,\n  (\n    signedTransactions: SignedTransactionsType,\n    transactionSessionId: string | null\n  ) =>\n    transactionSessionId != null\n      ? signedTransactions?.[transactionSessionId] || {}\n      : {}\n);\n", "export * from './accountInfoSelectors';\nexport * from './dappConfigSelector';\nexport * from './loginInfoSelectors';\nexport * from './modalsSelectors';\nexport * from './networkConfigSelectors';\nexport * from './signedMessageInfoSelectors';\nexport * from './toastsSelectors';\nexport * from './transactionsInfoSelectors';\nexport * from './transactionsSelectors';\n", "import { explorerAddressSelector } from 'reduxStore/selectors';\nimport { store } from 'reduxStore/store';\n\nexport function getAllTransactionsLink(\n  address: string,\n  explorerAddress: string = explorerAddressSelector(store.getState())\n) {\n  return `${explorerAddress}/address/${address}`;\n}\n"],
  "mappings": "sjCAGO,YACL,EACA,EAA0B,EAAwB,EAAM,SAAS,CAAC,EAClE,CACA,MAAO,GAAG,kBAAgC,GAC5C,CARA,qBACA,MCDA,GAYa,IAZb,aACA,IAWO,AAAM,GAAuB,CAAC,CACnC,cACA,cACgD,CAChD,GAAI,CAAC,EAAY,WACf,MAAO,CAAC,EAGV,GAAM,GAAa,EAAqB,CAAW,EAEnD,GAAI,EAAW,SAAW,EACxB,MAAO,CAAC,EAGV,GAAI,CAAC,EACH,MAAO,GAGT,GAAM,CAAE,SAAQ,WAAU,UAAW,EAkBrC,MAhB2B,GAAW,OAAO,AAAC,GACxC,KAAU,EAAU,SAAW,GAI/B,GAAU,EAAU,SAAW,GAI/B,GAAY,EAAU,WAAa,EAKxC,CAGH,ICjDA,qBACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,MCdA,GAuBa,GAEA,EAKA,GAKA,GAKP,EAUO,GAKA,GAKA,GAKA,GAKA,GAgBA,GAtFb,aACA,IACA,IAYA,IASO,AAAM,EAAwB,AAAC,GAAqB,EAAM,aAEpD,EAA6B,EACxC,EACA,AAAC,GAAU,EAAM,kBACnB,EAEa,GAAgC,EAC3C,EACA,AAAC,GAAU,EAAM,qBACnB,EAEa,GAAwC,EACnD,EACA,AAAC,GAAU,EAAM,6BACnB,EAEM,EACJ,AAAC,GACD,AAAC,GACC,OAAO,QAAQ,CAAkB,EAAE,OAAO,CAAC,EAAK,CAAC,EAAW,KACtD,GAAiB,EAAO,MAAM,GAChC,GAAI,GAAa,GAEZ,GACN,CAAC,CAA2B,EAEtB,GAAoC,EAC/C,EACA,EAAiB,CAAuB,CAC1C,EAEa,GAAiC,EAC5C,EACA,EAAiB,CAA0B,CAC7C,EAEa,GAA6B,EACxC,EACA,EAAiB,CAAsB,CACzC,EAEa,GAA+B,EAC1C,EACA,EAAiB,CAAwB,CAC3C,EAEa,GAA6B,EACxC,EACA,AAAC,GAA+C,CAxElD,MAyEI,MAAI,kBAAO,qBAAsB,KACxB,KAEF,OACF,EAAM,oBADJ,CAEL,aACE,qBAAO,qBAAP,cAA2B,aAAa,IAAI,AAAC,GAC3C,EAAe,CAAE,KACd,CAAC,CACV,EACF,CACF,EAEa,GAA4B,EACvC,EACA,CAAC,EAAc,IAAwC,EACvD,CACE,EACA,IAEA,GAAwB,KACpB,kBAAqB,KAAyB,CAAC,EAC/C,CAAC,CACT,IChGA,qBACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MCLO,YACL,EACA,EAA0B,EAAwB,EAAM,SAAS,CAAC,EAClE,CACA,MAAO,GAAG,aAA2B,GACvC,CARA,qBACA",
  "names": []
}
