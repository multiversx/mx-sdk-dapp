{
  "version": 3,
  "sources": ["../../src/components/TransactionSender/utils/invokeSendTransactions.ts"],
  "sourcesContent": ["import { AxiosError } from 'axios';\nimport {\n  SendBatchTransactionsPropsType,\n  SendSignedBatchTransactionsReturnType,\n  sendSignedTransactions\n} from 'apiCalls/transactions';\nimport { sendSignedBatchTransactions } from 'apiCalls/transactions/sendSignedBatchTransactions';\nimport { newTransaction } from 'models/newTransaction';\nimport { setBatchTransactions } from 'reduxStore/slices';\nimport { store } from 'reduxStore/store';\nimport { SignedTransactionsBodyType, SignedTransactionType } from 'types';\nimport { sequentialToFlatArray } from 'utils/transactions/batch/sequentialToFlatArray';\nimport { TransactionSenderType } from '../types/transactionSender.types';\nimport { handleSendBatchTransactionsErrors } from './handleSendBatchTransactionsErrors';\nimport { handleSendTransactionsErrors } from './handleSendTransactionsErrors';\n\nconst handleBatchSending = async ({\n  session,\n  sessionId,\n  clearSignInfo,\n  sendSignedBatchTransactionsAsync\n}: {\n  session: SignedTransactionsBodyType;\n  sessionId: string;\n  clearSignInfo?: () => void;\n  sendSignedBatchTransactionsAsync: (\n    props: SendBatchTransactionsPropsType\n  ) => Promise<SendSignedBatchTransactionsReturnType>;\n}) => {\n  const { transactions } = session;\n  if (!transactions) {\n    return;\n  }\n\n  const grouping = session.customTransactionInformation?.grouping;\n  if (!grouping) {\n    return;\n  }\n\n  const groupedTransactions = transactions.reduce((acc, tx, index) => {\n    const groupIndex = grouping.findIndex((group) => group.includes(index));\n    if (!acc[groupIndex]) {\n      acc[groupIndex] = [];\n    }\n    acc[groupIndex].push(tx);\n    return acc;\n  }, [] as SignedTransactionType[][]);\n\n  if (groupedTransactions.length === 0) {\n    return;\n  }\n\n  const response = await sendSignedBatchTransactionsAsync({\n    transactions: groupedTransactions,\n    sessionId\n  });\n\n  const data = response?.data;\n\n  if (response?.error || !data) {\n    handleSendBatchTransactionsErrors({\n      errorMessage: response?.error ?? 'Send batch error',\n      sessionId,\n      transactions,\n      clearSignInfo\n    });\n    return;\n  }\n\n  if (data) {\n    store.dispatch(setBatchTransactions(data));\n  }\n\n  return sequentialToFlatArray({\n    transactions: data?.transactions\n  }).map((tx) => tx.hash);\n};\n\nexport const invokeSendTransactions = async ({\n  session,\n  sessionId,\n  clearSignInfo,\n  sendSignedBatchTransactionsAsync = sendSignedBatchTransactions,\n  sendSignedTransactionsAsync = sendSignedTransactions\n}: {\n  session: SignedTransactionsBodyType;\n  sessionId: string;\n  clearSignInfo?: () => void;\n} & TransactionSenderType) => {\n  const { transactions } = session;\n  if (!transactions) {\n    return;\n  }\n\n  const grouping = session.customTransactionInformation?.grouping;\n\n  if (grouping) {\n    try {\n      return await handleBatchSending({\n        session,\n        sessionId,\n        clearSignInfo,\n        sendSignedBatchTransactionsAsync\n      });\n    } catch (error) {\n      handleSendBatchTransactionsErrors({\n        errorMessage: (error as any).message,\n        sessionId,\n        transactions\n      });\n      return null;\n    }\n  }\n\n  try {\n    const transactionsToSend = transactions.map((tx) => newTransaction(tx));\n    return await sendSignedTransactionsAsync(transactionsToSend);\n  } catch (error) {\n    const responseData = <{ message: string }>(\n      (error as AxiosError).response?.data\n    );\n\n    handleSendTransactionsErrors({\n      errorMessage: responseData?.message ?? (error as any).message,\n      sessionId,\n      clearSignInfo\n    });\n    return null;\n  }\n};\n"],
  "mappings": "qaAAA,IAOA,IACA,IACA,IAOA,GAAM,GAAqB,AAAO,GAY5B,UAZ4B,GAY5B,UAZ4B,CAChC,UACA,YACA,gBACA,oCAQI,CA5BN,QA6BE,GAAM,CAAE,gBAAiB,EACzB,GAAI,CAAC,EACH,OAGF,GAAM,GAAW,KAAQ,+BAAR,cAAsC,SACvD,GAAI,CAAC,EACH,OAGF,GAAM,GAAsB,EAAa,OAAO,CAAC,EAAK,EAAI,IAAU,CAClE,GAAM,GAAa,EAAS,UAAU,AAAC,GAAU,EAAM,SAAS,CAAK,CAAC,EACtE,MAAK,GAAI,IACP,GAAI,GAAc,CAAC,GAErB,EAAI,GAAY,KAAK,CAAE,EAChB,CACT,EAAG,CAAC,CAA8B,EAElC,GAAI,EAAoB,SAAW,EACjC,OAGF,GAAM,GAAW,KAAM,GAAiC,CACtD,aAAc,EACd,WACF,CAAC,EAEK,EAAO,iBAAU,KAEvB,GAAI,kBAAU,QAAS,CAAC,EAAM,CAC5B,EAAkC,CAChC,aAAc,oBAAU,QAAV,OAAmB,mBACjC,YACA,eACA,eACF,CAAC,EACD,MACF,CAEA,MAAI,IACF,EAAM,SAAS,EAAqB,CAAI,CAAC,EAGpC,EAAsB,CAC3B,aAAc,iBAAM,YACtB,CAAC,EAAE,IAAI,AAAC,GAAO,EAAG,IAAI,CACxB,GAEa,EAAyB,AAAO,GAUf,UAVe,GAUf,UAVe,CAC3C,UACA,YACA,gBACA,mCAAmC,EACnC,8BAA8B,GAKF,CAxF9B,UAyFE,GAAM,CAAE,gBAAiB,EACzB,GAAI,CAAC,EACH,OAKF,GAFiB,KAAQ,+BAAR,cAAsC,SAGrD,GAAI,CACF,MAAO,MAAM,GAAmB,CAC9B,UACA,YACA,gBACA,kCACF,CAAC,CACH,OAAS,EAAP,CACA,SAAkC,CAChC,aAAe,EAAc,QAC7B,YACA,cACF,CAAC,EACM,IACT,CAGF,GAAI,CACF,GAAM,GAAqB,EAAa,IAAI,AAAC,GAAO,EAAe,CAAE,CAAC,EACtE,MAAO,MAAM,GAA4B,CAAkB,CAC7D,OAAS,EAAP,CACA,GAAM,GACH,KAAqB,WAArB,cAA+B,KAGlC,SAA6B,CAC3B,aAAc,oBAAc,UAAd,OAA0B,EAAc,QACtD,YACA,eACF,CAAC,EACM,IACT,CACF",
  "names": []
}
