{
  "version": 3,
  "sources": ["../../src/UI/TransactionInfo/components/transactionInfoFields/TransactionInfoTo/TransactionInfoTo.tsx"],
  "sourcesContent": ["import React from 'react';\nimport { faAngleDown } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport classNames from 'classnames';\nimport { DataTestIdsEnum } from 'constants/index';\nimport { withStyles, WithStylesImportType } from 'hocs/withStyles';\nimport { TransactionServerStatusesEnum } from 'types/enums.types';\nimport { CopyButton } from 'UI/CopyButton';\nimport { ExplorerLink } from 'UI/ExplorerLink';\nimport { AccountName, ShardSpan } from 'UI/TransactionsTable/components';\nimport { WithClassnameType, WithTransactionType } from 'UI/types';\nimport { isContract } from 'utils/smartContracts';\nimport { getTransactionMessages } from 'utils/transactions/transactionInfoHelpers/getTransactionMessages';\nimport { DetailItem } from '../../DetailItem';\n\nconst TransactionInfoToComponent = ({\n  className,\n  transaction,\n  styles\n}: WithTransactionType & WithClassnameType & WithStylesImportType) => {\n  const transactionMessages = getTransactionMessages(transaction);\n  const isReverted =\n    transaction.status === TransactionServerStatusesEnum.rewardReverted;\n\n  return (\n    <DetailItem title='To' className={classNames(styles?.to, className)}>\n      <div\n        className={styles?.wrapper}\n        data-testid={DataTestIdsEnum.transactionTo}\n      >\n        <div className={styles?.content}>\n          {isContract(transaction.receiver) && (\n            <span\n              className={styles?.contract}\n              data-testid={DataTestIdsEnum.transactionToContract}\n            >\n              Contract\n            </span>\n          )}\n\n          <ExplorerLink\n            page={String(transaction.links.receiverLink)}\n            data-testid={DataTestIdsEnum.transactionToExplorerLink}\n            className={styles?.explorer}\n          >\n            <AccountName\n              address={transaction.receiver}\n              assets={transaction.receiverAssets}\n              data-testid={DataTestIdsEnum.transactionToAccount}\n            />\n          </ExplorerLink>\n\n          <CopyButton className={styles?.copy} text={transaction.receiver} />\n\n          {!isNaN(transaction.receiverShard) && (\n            <ExplorerLink\n              page={String(transaction.links.receiverShardLink)}\n              className={styles?.shard}\n            >\n              (\n              <ShardSpan\n                shard={transaction.receiverShard}\n                data-testid={DataTestIdsEnum.transactionToShard}\n              />\n              )\n            </ExplorerLink>\n          )}\n        </div>\n\n        {transactionMessages.map((msg, messageIndex) => (\n          <div\n            data-testid={`message_${messageIndex}`}\n            key={`tx-message-${messageIndex}`}\n            className={styles?.message}\n          >\n            <FontAwesomeIcon\n              icon={faAngleDown}\n              className={styles?.icon}\n              style={{ marginTop: '2px' }}\n              transform={{ rotate: 45 }}\n            />\n\n            <small className={styles?.text}>{msg}</small>\n          </div>\n        ))}\n\n        {isReverted && (\n          <div className={styles?.message}>\n            <FontAwesomeIcon\n              icon={faAngleDown}\n              className={styles?.icon}\n              style={{ marginTop: '2px' }}\n              transform={{ rotate: 45 }}\n            />\n\n            <small className={styles?.text}>Block Reverted</small>\n          </div>\n        )}\n      </div>\n    </DetailItem>\n  );\n};\n\nexport const TransactionInfoTo = withStyles(TransactionInfoToComponent, {\n  ssrStyles: () =>\n    import(\n      'UI/TransactionInfo/components/transactionInfoFields/TransactionInfoTo/styles.scss'\n    ),\n  clientStyles: () =>\n    require('UI/TransactionInfo/components/transactionInfoFields/TransactionInfoTo/styles.scss')\n      .default\n});\n"],
  "mappings": "4fAAA,IAIA,IAJA,qBACA,gEACA,iEACA,0BAGA,IAKA,IACA,IAGA,GAAM,GAA6B,CAAC,CAClC,YACA,cACA,YACoE,CACpE,GAAM,GAAsB,EAAuB,CAAW,EACxD,EACJ,EAAY,SAAW,kBAEzB,MACE,iBAAC,GAAW,MAAM,KAAK,UAAW,EAAW,iBAAQ,GAAI,CAAS,GAChE,gBAAC,OACC,UAAW,iBAAQ,QACnB,cAAa,iBAEb,gBAAC,OAAI,UAAW,iBAAQ,SACrB,EAAW,EAAY,QAAQ,GAC9B,gBAAC,QACC,UAAW,iBAAQ,SACnB,cAAa,yBACd,UAED,EAGF,gBAAC,GACC,KAAM,OAAO,EAAY,MAAM,YAAY,EAC3C,cAAa,4BACb,UAAW,iBAAQ,UAEnB,gBAAC,GACC,QAAS,EAAY,SACrB,OAAQ,EAAY,eACpB,cAAa,uBACf,CACF,EAEA,gBAAC,GAAW,UAAW,iBAAQ,KAAM,KAAM,EAAY,SAAU,EAEhE,CAAC,MAAM,EAAY,aAAa,GAC/B,gBAAC,GACC,KAAM,OAAO,EAAY,MAAM,iBAAiB,EAChD,UAAW,iBAAQ,OACpB,IAEC,gBAAC,GACC,MAAO,EAAY,cACnB,cAAa,qBACf,EAAE,GAEJ,CAEJ,EAEC,EAAoB,IAAI,CAAC,EAAK,IAC7B,gBAAC,OACC,cAAa,WAAW,IACxB,IAAK,cAAc,IACnB,UAAW,iBAAQ,SAEnB,gBAAC,GACC,KAAM,EACN,UAAW,iBAAQ,KACnB,MAAO,CAAE,UAAW,KAAM,EAC1B,UAAW,CAAE,OAAQ,EAAG,EAC1B,EAEA,gBAAC,SAAM,UAAW,iBAAQ,MAAO,CAAI,CACvC,CACD,EAEA,GACC,gBAAC,OAAI,UAAW,iBAAQ,SACtB,gBAAC,GACC,KAAM,EACN,UAAW,iBAAQ,KACnB,MAAO,CAAE,UAAW,KAAM,EAC1B,UAAW,CAAE,OAAQ,EAAG,EAC1B,EAEA,gBAAC,SAAM,UAAW,iBAAQ,MAAM,gBAAc,CAChD,CAEJ,CACF,CAEJ,EAEa,EAAoB,EAAW,EAA4B,CACtE,UAAW,IACT,OACE,sFAEJ,aAAc,IACZ,WACG,OACP,CAAC",
  "names": []
}
