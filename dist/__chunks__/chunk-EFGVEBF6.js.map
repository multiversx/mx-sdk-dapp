{
  "version": 3,
  "sources": ["../../src/utils/account/getAddress.tsx"],
  "sourcesContent": ["import { getAccountProvider } from 'providers';\nimport {\n  addressSelector,\n  isLoggedInSelector,\n  walletLoginSelector\n} from 'reduxStore/selectors';\nimport { store } from 'reduxStore/store';\nimport { LoginMethodsEnum } from 'types/enums.types';\nimport { getIsProviderEqualTo } from 'utils/account/getIsProviderEqualTo';\nimport { getSearchParamAddress } from './getSearchParamAddress';\n\nexport function getAddress(): Promise<string> {\n  const appState = store.getState();\n  const provider = getAccountProvider();\n  const address = addressSelector(appState);\n  const loggedIn = isLoggedInSelector(appState);\n  const walletLogin = walletLoginSelector(appState);\n\n  if (!provider) {\n    throw 'provider not initialized';\n  }\n\n  if (getIsProviderEqualTo(LoginMethodsEnum.ledger) && loggedIn) {\n    return new Promise((resolve) => {\n      resolve(address);\n    });\n  }\n\n  return !getIsProviderEqualTo(LoginMethodsEnum.none) &&\n    !getIsProviderEqualTo(LoginMethodsEnum.wallet) &&\n    !getIsProviderEqualTo(LoginMethodsEnum.extra)\n    ? provider.getAddress()\n    : new Promise((resolve) => {\n        const searchParamAddress = getSearchParamAddress();\n        if (walletLogin != null && searchParamAddress) {\n          resolve(searchParamAddress);\n        }\n        if (loggedIn) {\n          resolve(address);\n        }\n        resolve('');\n      });\n}\n"],
  "mappings": "sXAAA,IACA,IAKA,IACA,IAIO,YAAuC,CAC5C,GAAM,GAAW,EAAM,SAAS,EAC1B,EAAW,EAAmB,EAC9B,EAAU,EAAgB,CAAQ,EAClC,EAAW,EAAmB,CAAQ,EACtC,EAAc,EAAoB,CAAQ,EAEhD,GAAI,CAAC,EACH,KAAM,2BAGR,MAAI,GAAqB,QAAuB,GAAK,EAC5C,GAAI,SAAQ,AAAC,GAAY,CAC9B,EAAQ,CAAO,CACjB,CAAC,EAGI,CAAC,EAAqB,EAAqB,GAChD,CAAC,EAAqB,QAAuB,GAC7C,CAAC,EAAqB,OAAsB,EAC1C,EAAS,WAAW,EACpB,GAAI,SAAQ,AAAC,GAAY,CACvB,GAAM,GAAqB,EAAsB,EACjD,AAAI,GAAe,MAAQ,GACzB,EAAQ,CAAkB,EAExB,GACF,EAAQ,CAAO,EAEjB,EAAQ,EAAE,CACZ,CAAC,CACP",
  "names": []
}
