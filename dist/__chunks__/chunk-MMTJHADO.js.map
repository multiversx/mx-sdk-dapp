{
  "version": 3,
  "sources": ["../../src/utils/transactions/getInterpretedTransaction/getInterpretedTransaction.ts"],
  "sourcesContent": ["import {\n  InterpretedTransactionType,\n  ServerTransactionType\n} from 'types/serverTransactions.types';\nimport { TokenArgumentType } from 'types/serverTransactions.types';\nimport { isContract } from 'utils/smartContracts';\nimport { getTokenFromData } from 'utils/transactions/getTokenFromData';\nimport {\n  getExplorerLink,\n  getTransactionMethod,\n  getTransactionReceiver,\n  getTransactionReceiverAssets,\n  getTransactionTokens,\n  getTransactionTransferType,\n  explorerUrlBuilder\n} from './helpers';\n\nexport interface GetInterpretedTransactionType {\n  address: string;\n  explorerAddress: string;\n  transaction: ServerTransactionType;\n}\n\nexport function getInterpretedTransaction({\n  transaction,\n  address,\n  explorerAddress\n}: GetInterpretedTransactionType): InterpretedTransactionType {\n  const tokenIdentifier =\n    transaction.tokenIdentifier ?? getTokenFromData(transaction.data).tokenId;\n\n  const receiver = getTransactionReceiver(transaction);\n  const receiverAssets = getTransactionReceiverAssets(transaction);\n\n  const direction = getTransactionTransferType(address, transaction, receiver);\n  const method = getTransactionMethod(transaction);\n  const transactionTokens: TokenArgumentType[] =\n    getTransactionTokens(transaction);\n\n  const senderLink = getExplorerLink({\n    explorerAddress,\n    to: explorerUrlBuilder.accountDetails(transaction.sender)\n  });\n  const receiverLink = getExplorerLink({\n    explorerAddress,\n    to: explorerUrlBuilder.accountDetails(receiver)\n  });\n  const senderShardLink = getExplorerLink({\n    explorerAddress,\n    to: explorerUrlBuilder.senderShard(transaction.senderShard)\n  });\n  const receiverShardLink = getExplorerLink({\n    explorerAddress,\n    to: explorerUrlBuilder.receiverShard(transaction.receiverShard)\n  });\n\n  const transactionHash = transaction.originalTxHash\n    ? `${transaction.originalTxHash}#${transaction.txHash}`\n    : transaction.txHash;\n\n  const transactionLink = getExplorerLink({\n    explorerAddress,\n    to: explorerUrlBuilder.transactionDetails(transactionHash)\n  });\n\n  return {\n    ...transaction,\n    tokenIdentifier,\n    receiver,\n    receiverAssets,\n    transactionDetails: {\n      direction,\n      method,\n      transactionTokens,\n      isContract: isContract(transaction.sender)\n    },\n    links: {\n      senderLink,\n      receiverLink,\n      senderShardLink,\n      receiverShardLink,\n      transactionLink\n    }\n  };\n}\n"],
  "mappings": "2dAuBO,WAAmC,CACxC,cACA,UACA,mBAC4D,CA3B9D,MA4BE,GAAM,GACJ,KAAY,kBAAZ,OAA+B,EAAiB,EAAY,IAAI,EAAE,QAE9D,EAAW,EAAuB,CAAW,EAC7C,EAAiB,EAA6B,CAAW,EAEzD,EAAY,EAA2B,EAAS,EAAa,CAAQ,EACrE,EAAS,EAAqB,CAAW,EACzC,EACJ,EAAqB,CAAW,EAE5B,EAAa,EAAgB,CACjC,kBACA,GAAI,EAAmB,eAAe,EAAY,MAAM,CAC1D,CAAC,EACK,EAAe,EAAgB,CACnC,kBACA,GAAI,EAAmB,eAAe,CAAQ,CAChD,CAAC,EACK,EAAkB,EAAgB,CACtC,kBACA,GAAI,EAAmB,YAAY,EAAY,WAAW,CAC5D,CAAC,EACK,EAAoB,EAAgB,CACxC,kBACA,GAAI,EAAmB,cAAc,EAAY,aAAa,CAChE,CAAC,EAEK,EAAkB,EAAY,eAChC,GAAG,EAAY,kBAAkB,EAAY,SAC7C,EAAY,OAEV,EAAkB,EAAgB,CACtC,kBACA,GAAI,EAAmB,mBAAmB,CAAe,CAC3D,CAAC,EAED,MAAO,QACF,GADE,CAEL,kBACA,WACA,iBACA,mBAAoB,CAClB,YACA,SACA,oBACA,WAAY,EAAW,EAAY,MAAM,CAC3C,EACA,MAAO,CACL,aACA,eACA,kBACA,oBACA,iBACF,CACF,EACF,CApFA,iBAKA,IACA,IACA",
  "names": []
}
