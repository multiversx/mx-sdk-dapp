{
  "version": 3,
  "sources": ["../../src/services/transactions/signTransactions.ts"],
  "sourcesContent": ["import { chainIDSelector } from 'reduxStore/selectors/networkConfigSelectors';\nimport {\n  setNotificationModal,\n  setSignTransactionsCancelMessage,\n  setTransactionsDisplayInfo,\n  setTransactionsToSign\n} from 'reduxStore/slices';\nimport { store } from 'reduxStore/store';\nimport {\n  NotificationTypesEnum,\n  SendTransactionReturnType,\n  SignTransactionsPropsType\n} from 'types';\nimport { isGuardianTx } from 'utils/transactions/isGuardianTx';\n\nexport async function signTransactions({\n  transactions,\n  callbackRoute,\n  customTransactionInformation,\n  transactionsDisplayInfo\n}: SignTransactionsPropsType): Promise<SendTransactionReturnType> {\n  const appState = store.getState();\n  const sessionId = Date.now().toString();\n  const storeChainId = chainIDSelector(appState);\n\n  const transactionsPayload = Array.isArray(transactions)\n    ? transactions\n    : [transactions];\n\n  const hasValidChainId = transactionsPayload?.every(\n    (tx) => tx.getChainID().valueOf() === storeChainId.valueOf()\n  );\n  if (!hasValidChainId) {\n    const notificationPayload = {\n      type: NotificationTypesEnum.warning,\n      iconClassName: 'text-warning',\n      title: 'Network change detected',\n      description: 'The application tried to change the transaction network'\n    };\n    store.dispatch(setNotificationModal(notificationPayload));\n    return { error: 'Invalid ChainID', sessionId: null };\n  }\n\n  const signTransactionsPayload = {\n    sessionId,\n    callbackRoute,\n    customTransactionInformation: {\n      ...(customTransactionInformation ?? {}),\n      signWithoutSending:\n        customTransactionInformation?.signWithoutSending ?? true\n    },\n    transactions: transactionsPayload.map((tx) => {\n      const transaction = tx.toPlainObject();\n\n      // TODO: Remove when the protocol supports usernames for guardian transactions\n      if (isGuardianTx({ data: transaction.data, onlySetGuardian: true })) {\n        return transaction;\n      }\n\n      return {\n        ...transaction,\n        senderUsername: tx.getSenderUsername().valueOf(),\n        receiverUsername: tx.getReceiverUsername().valueOf()\n      };\n    })\n  };\n  store.dispatch(setSignTransactionsCancelMessage(null));\n  store.dispatch(setTransactionsToSign(signTransactionsPayload));\n  store.dispatch(\n    setTransactionsDisplayInfo({ sessionId, transactionsDisplayInfo })\n  );\n  return { sessionId };\n}\n"],
  "mappings": "gaAeA,WAAuC,EAK2B,mCAL3B,CACrC,eACA,gBACA,+BACA,2BACgE,CApBlE,MAqBE,GAAM,GAAW,EAAM,SAAS,EAC1B,EAAY,KAAK,IAAI,EAAE,SAAS,EAChC,EAAe,EAAgB,CAAQ,EAEvC,EAAsB,MAAM,QAAQ,CAAY,EAClD,EACA,CAAC,CAAY,EAKjB,GAAI,CAHoB,kBAAqB,MAC3C,AAAC,GAAO,EAAG,WAAW,EAAE,QAAQ,IAAM,EAAa,QAAQ,IAEvC,CACpB,GAAM,GAAsB,CAC1B,KAAM,UACN,cAAe,eACf,MAAO,0BACP,YAAa,yDACf,EACA,SAAM,SAAS,EAAqB,CAAmB,CAAC,EACjD,CAAE,MAAO,kBAAmB,UAAW,IAAK,CACrD,CAEA,GAAM,GAA0B,CAC9B,YACA,gBACA,6BAA8B,OACxB,UAAgC,CAAC,GADT,CAE5B,mBACE,oBAA8B,qBAA9B,OAAoD,EACxD,GACA,aAAc,EAAoB,IAAI,AAAC,GAAO,CAC5C,GAAM,GAAc,EAAG,cAAc,EAGrC,MAAI,GAAa,CAAE,KAAM,EAAY,KAAM,gBAAiB,EAAK,CAAC,EACzD,EAGF,OACF,GADE,CAEL,eAAgB,EAAG,kBAAkB,EAAE,QAAQ,EAC/C,iBAAkB,EAAG,oBAAoB,EAAE,QAAQ,CACrD,EACF,CAAC,CACH,EACA,SAAM,SAAS,EAAiC,IAAI,CAAC,EACrD,EAAM,SAAS,EAAsB,CAAuB,CAAC,EAC7D,EAAM,SACJ,EAA2B,CAAE,YAAW,yBAAwB,CAAC,CACnE,EACO,CAAE,WAAU,CACrB,GAxEA,qBACA,IAMA,IACA,IAKA",
  "names": []
}
