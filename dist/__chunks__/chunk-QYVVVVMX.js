import{a as h}from"./chunk-EULMX547.js";import{a as b}from"./chunk-HKU3BVOJ.js";import{c as N}from"./chunk-K3GCLKZ7.js";import{a as q,b as O}from"./chunk-3HHAVSUJ.js";import{a as v}from"./chunk-OPT3JYNI.js";import{m as g,o as f}from"./chunk-EOZJRV5E.js";import{j as r,m as l}from"./chunk-HBP5N4FR.js";l();v();l();import{Transaction as P}from"@multiversx/sdk-core";v();O();var S=e=>()=>{throw new Error(`Unable to perform ${e}, Provider not initialized`)},u=h(),w=()=>{var e,s;return q()&&(s=(e=window==null?void 0:window.parent)==null?void 0:e.origin)!=null?s:"*"},p="message",R=e=>{let s=o=>{let n=o.data;if(!(o.target.origin!=w()&&u!="reactNative"))try{n=JSON.parse(n),e(n)}catch(i){console.error("error parsing response")}};document&&document.addEventListener(p,s),window&&window.addEventListener(p,s)},z={init:()=>r(void 0,null,function*(){return!0}),login:()=>r(void 0,null,function*(){return!0}),relogin:()=>r(void 0,null,function*(){try{return y.login[u](),yield new Promise((s,o)=>{function n(i){let{message:c,type:t}=i;if(t===f.loginResponse)try{let{accessToken:a,error:d}=c;d?o(d):(b(a),N(),s(a))}catch(a){o("Unable to login")}document&&document.removeEventListener(p,n)}R(n)})}catch(e){throw console.error("error logging in",e),e}}),logout:()=>(y.logout[u](),new Promise(e=>{e(!0)})),getAddress:S("getAddress"),isInitialized:()=>!0,isConnected:()=>r(void 0,null,function*(){return!0}),sendTransaction:S("sendTransaction"),sendCustomRequest:e=>r(void 0,null,function*(){y.sendCustomRequest[u](e)}),signMessage:e=>r(void 0,null,function*(){try{return y.signMessage[u](e),yield new Promise((o,n)=>{window.signMessageResponse=(c,t)=>{if(t){n(t),window.signMessageResponse=null;return}o(c),window.signMessageResponse=null};function i(c){let{message:t,type:a}=c;if(a===f.signMessageResponse&&t!=null){let{signedMessage:d,error:m}=t;m?n(m):o(d)}document==null||document.removeEventListener(p,i)}R(i)})}catch(s){throw console.error("error sending transaction",s),s}}),signTransactions:e=>r(void 0,null,function*(){try{let s=e.map(n=>n.toPlainObject());return y.signTransactions[u](s),yield new Promise((n,i)=>{window.transactionsSigned=(t,a)=>{if(t=JSON.parse(t),a){i(a),window.transactionsSigned=null;return}n(t.map(d=>P.fromPlainObject(d))),window.transactionsSigned=null};function c(t){let{message:a,type:d}=t;if(d===f.signTransactionsResponse){let{transactions:m,error:M}=a;try{M?i(M):n(m.map(T=>P.fromPlainObject(T)))}catch(T){i("Unable to sign")}}document&&document.removeEventListener(p,c)}R(c)})}catch(s){throw console.error("error sending transaction",s),s}}),signTransaction:function(e){return r(this,null,function*(){return(yield this.signTransactions([e]))[0]})}};var y={signTransactions:{["ios"]:e=>window.webkit.messageHandlers.signTransactions.postMessage(e,w()),["reactNative"]:e=>window==null?void 0:window.ReactNativeWebView.postMessage(JSON.stringify({type:g.signTransactionsRequest,message:e})),["web"]:e=>window==null?void 0:window.postMessage(JSON.stringify({type:g.signTransactionsRequest,message:e}),w())},sendCustomRequest:{["ios"]:e=>window.webkit.messageHandlers.signMessage.postMessage({type:e.request.method,payload:e.request.params}),["reactNative"]:e=>window==null?void 0:window.ReactNativeWebView.postMessage(JSON.stringify({type:e.request.method,payload:e.request.params})),["web"]:e=>window==null?void 0:window.postMessage(JSON.stringify({type:e.request.method,payload:e.request.params}),w())},signMessage:{["ios"]:e=>window.webkit.messageHandlers.signMessage.postMessage(e),["reactNative"]:e=>window==null?void 0:window.ReactNativeWebView.postMessage(JSON.stringify({type:g.signMessageRequest,message:e})),["web"]:e=>window==null?void 0:window.postMessage(JSON.stringify({type:g.signMessageRequest,message:e}),w())},logout:{["ios"]:()=>window.webkit.messageHandlers.logout.postMessage(),["reactNative"]:()=>window==null?void 0:window.ReactNativeWebView.postMessage(JSON.stringify({type:g.logoutRequest})),["web"]:()=>window==null?void 0:window.postMessage(JSON.stringify({type:g.logoutRequest}),w())},login:{["ios"]:()=>window.webkit.messageHandlers.login.postMessage(),["reactNative"]:()=>window==null?void 0:window.ReactNativeWebView.postMessage(JSON.stringify({type:g.loginRequest})),["web"]:()=>window==null?void 0:window.postMessage(JSON.stringify({type:g.loginRequest}),w())}};export{y as a,w as b,z as c};
//# sourceMappingURL=chunk-QYVVVVMX.js.map
