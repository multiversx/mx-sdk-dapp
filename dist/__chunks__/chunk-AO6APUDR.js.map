{
  "version": 3,
  "sources": ["../../src/UI/TransactionsToastList/components/TransactionToast/hooks/useTransactionToast.ts"],
  "sourcesContent": ["import { useEffect, useMemo, useRef } from 'react';\nimport { AVERAGE_TX_DURATION_MS, CROSS_SHARD_ROUNDS } from 'constants/index';\nimport { useStyles } from 'hocs/useStyles';\nimport { useGetAccount, useGetTransactionDisplayInfo } from 'hooks';\nimport { useSelector } from 'reduxStore/DappProviderContext';\nimport { shardSelector } from 'reduxStore/selectors';\nimport { getUnixTimestamp } from 'utils/dateTime/getUnixTimestamp';\nimport { getUnixTimestampWithAddedMilliseconds } from 'utils/dateTime/getUnixTimestampWithAddedMilliseconds';\nimport { getAreTransactionsOnSameShard } from 'utils/transactions/getAreTransactionsOnSameShard';\nimport {\n  getIsTransactionFailed,\n  getIsTransactionPending,\n  getIsTransactionSuccessful,\n  getIsTransactionTimedOut\n} from 'utils/transactions/transactionStateByStatus';\nimport { TransactionToastDefaultProps } from '../transactionToast.type';\nimport { getToastDataStateByStatus } from '../utils';\n\nexport const useTransactionToast = ({\n  toastId,\n  transactions,\n  status,\n  lifetimeAfterSuccess,\n  startTimestamp,\n  endTimeProgress,\n  onDelete\n}: TransactionToastDefaultProps) => {\n  const { styles } = useStyles({\n    ssrImportCallback: () =>\n      import(\n        'UI/TransactionsToastList/components/TransactionToast/transactionToast.styles.scss'\n      ),\n    clientImportCallback: () =>\n      require('UI/TransactionsToastList/components/TransactionToast/transactionToast.styles.scss')\n        .default\n  });\n\n  const transactionDisplayInfo = useGetTransactionDisplayInfo(toastId);\n  const accountShard = useSelector(shardSelector);\n  const { address } = useGetAccount();\n  const timeoutRef = useRef<NodeJS.Timeout>();\n  const areSameShardTransactions = useMemo(\n    () => getAreTransactionsOnSameShard(transactions, accountShard),\n    [transactions, accountShard]\n  );\n\n  const shardAdjustedDuration = areSameShardTransactions\n    ? AVERAGE_TX_DURATION_MS\n    : CROSS_SHARD_ROUNDS * AVERAGE_TX_DURATION_MS;\n\n  const transactionDuration =\n    transactionDisplayInfo?.transactionDuration || shardAdjustedDuration;\n\n  const [startTime, endTime] = useMemo(() => {\n    const startTime = startTimestamp || getUnixTimestamp();\n    const endTime =\n      endTimeProgress ||\n      getUnixTimestampWithAddedMilliseconds(transactionDuration);\n\n    return [startTime, endTime];\n  }, []);\n\n  const progress = {\n    startTime,\n    endTime\n  };\n\n  const isPending = getIsTransactionPending(status);\n  const isFailed = getIsTransactionFailed(status);\n  const isSuccess = getIsTransactionSuccessful(status);\n  const isTimedOut = getIsTransactionTimedOut(status);\n  const isCompleted = isFailed || isSuccess || isTimedOut;\n\n  const toastDataState = getToastDataStateByStatus({\n    address,\n    classes: styles ?? {},\n    sender: transactions?.[0].sender || address,\n    status,\n    toastId,\n    transactionDisplayInfo\n  });\n\n  const handleDeleteToast = () => {\n    onDelete?.(toastId);\n  };\n\n  useEffect(() => {\n    if (!isCompleted || !lifetimeAfterSuccess || timeoutRef.current) {\n      return;\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      handleDeleteToast();\n    }, lifetimeAfterSuccess);\n\n    return () => {\n      if (timeoutRef.current) {\n        // Clear timer on unmount and also delete the toast\n        // The toast may have been removed before the timer finished by the re-rendering\n        // of the toasts list during another toast removal from the store\n        handleDeleteToast();\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [lifetimeAfterSuccess, isCompleted]);\n\n  return {\n    isCrossShard: !areSameShardTransactions,\n    progress,\n    isPending,\n    isTimedOut,\n    toastDataState,\n    handleDeleteToast\n  };\n};\n"],
  "mappings": "8pBAAA,IACA,IADA,4DAKA,IACA,IACA,IACA,IACA,IASO,GAAM,IAAsB,CAAC,CAClC,UACA,eACA,SACA,uBACA,iBACA,kBACA,cACkC,CAClC,GAAM,CAAE,UAAW,EAAU,CAC3B,kBAAmB,IACjB,OACE,sFAEJ,qBAAsB,IACpB,WACG,OACP,CAAC,EAEK,EAAyB,EAA6B,CAAO,EAC7D,EAAe,EAAY,CAAa,EACxC,CAAE,WAAY,EAAc,EAC5B,EAAa,GAAuB,EACpC,EAA2B,EAC/B,IAAM,EAA8B,EAAc,CAAY,EAC9D,CAAC,EAAc,CAAY,CAC7B,EAEM,EAAwB,EAC1B,IACA,EAAqB,IAEnB,EACJ,kBAAwB,sBAAuB,EAE3C,CAAC,EAAW,GAAW,EAAQ,IAAM,CACzC,GAAM,GAAY,GAAkB,EAAiB,EAC/C,EACJ,GACA,EAAsC,CAAmB,EAE3D,MAAO,CAAC,EAAW,CAAO,CAC5B,EAAG,CAAC,CAAC,EAEC,EAAW,CACf,YACA,SACF,EAEM,EAAY,EAAwB,CAAM,EAC1C,EAAW,EAAuB,CAAM,EACxC,EAAY,EAA2B,CAAM,EAC7C,EAAa,EAAyB,CAAM,EAC5C,EAAc,GAAY,GAAa,EAEvC,EAAiB,EAA0B,CAC/C,UACA,QAAS,UAAU,CAAC,EACpB,OAAQ,kBAAe,GAAG,SAAU,EACpC,SACA,UACA,wBACF,CAAC,EAEK,EAAoB,IAAM,CAC9B,WAAW,EACb,EAEA,SAAU,IAAM,CACd,GAAI,GAAC,GAAe,CAAC,GAAwB,EAAW,SAIxD,SAAW,QAAU,WAAW,IAAM,CACpC,EAAkB,CACpB,EAAG,CAAoB,EAEhB,IAAM,CACX,AAAI,EAAW,SAIb,GAAkB,EAClB,aAAa,EAAW,OAAO,EAEnC,CACF,EAAG,CAAC,EAAsB,CAAW,CAAC,EAE/B,CACL,aAAc,CAAC,EACf,WACA,YACA,aACA,iBACA,mBACF,CACF",
  "names": []
}
