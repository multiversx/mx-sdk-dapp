{
  "version": 3,
  "sources": ["../../src/reduxStore/slices/transactionsInfoSlice.ts"],
  "sourcesContent": ["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { TransactionsDisplayInfoType } from 'types';\nimport { logoutAction } from '../commonActions';\n\nexport interface StateType {\n  [sessionId: string]: TransactionsDisplayInfoType;\n}\n\nexport interface SetTransactionsInfoPayloadType {\n  sessionId: string;\n  transactionsDisplayInfo: TransactionsDisplayInfoType;\n}\n\nexport const defaultTransactionErrorMessage = 'Transaction failed';\nexport const defaultTransactionSuccessMessage = 'Transaction successful';\nexport const defaultTransactionProcessingMessage = 'Processing transaction';\nexport const defaultTransactionSubmittedMessage = 'Transaction submitted';\n\nconst initialState: StateType = {};\n\nexport const signTransactionsSlice = createSlice({\n  name: 'transactionsInfo',\n  initialState,\n  reducers: {\n    setTransactionsDisplayInfo(\n      state: StateType,\n      action: PayloadAction<SetTransactionsInfoPayloadType>\n    ) {\n      const { sessionId, transactionsDisplayInfo } = action.payload;\n      if (sessionId != null) {\n        state[sessionId] = {\n          errorMessage:\n            transactionsDisplayInfo?.errorMessage ||\n            defaultTransactionErrorMessage,\n          successMessage:\n            transactionsDisplayInfo?.successMessage ||\n            defaultTransactionSuccessMessage,\n          processingMessage:\n            transactionsDisplayInfo?.processingMessage ||\n            defaultTransactionProcessingMessage,\n          submittedMessage:\n            transactionsDisplayInfo?.submittedMessage ||\n            defaultTransactionSubmittedMessage,\n          transactionDuration: transactionsDisplayInfo?.transactionDuration\n        };\n      }\n    },\n    clearTransactionsInfoForSessionId(\n      state: StateType,\n      action: PayloadAction<string | undefined>\n    ) {\n      if (action.payload != null) {\n        delete state[action.payload];\n      }\n    },\n    clearTransactionsInfo: () => initialState\n  },\n  extraReducers: (builder) => {\n    builder.addCase(logoutAction, () => {\n      return initialState;\n    });\n  }\n});\n\nexport const {\n  clearTransactionsInfo,\n  setTransactionsDisplayInfo,\n  clearTransactionsInfoForSessionId\n} = signTransactionsSlice.actions;\n\nexport default signTransactionsSlice.reducer;\n"],
  "mappings": "8FAAA,kDAaa,GACA,EACA,EACA,EAEP,EAEO,EA6CX,EACA,EACA,EAGK,EAtEP,aAEA,IAWO,AAAM,EAAiC,qBACjC,EAAmC,yBACnC,EAAsC,yBACtC,EAAqC,wBAE5C,EAA0B,CAAC,EAEpB,EAAwB,EAAY,CAC/C,KAAM,mBACN,eACA,SAAU,CACR,2BACE,EACA,EACA,CACA,GAAM,CAAE,YAAW,2BAA4B,EAAO,QACtD,AAAI,GAAa,MACf,GAAM,GAAa,CACjB,aACE,kBAAyB,eACzB,EACF,eACE,kBAAyB,iBACzB,EACF,kBACE,kBAAyB,oBACzB,EACF,iBACE,kBAAyB,mBACzB,EACF,oBAAqB,iBAAyB,mBAChD,EAEJ,EACA,kCACE,EACA,EACA,CACA,AAAI,EAAO,SAAW,MACpB,MAAO,GAAM,EAAO,QAExB,EACA,sBAAuB,IAAM,CAC/B,EACA,cAAe,AAAC,GAAY,CAC1B,EAAQ,QAAQ,EAAc,IACrB,CACR,CACH,CACF,CAAC,EAEY,CAhEb,AAiEE,wBAjEF,AAkEE,6BAlEF,AAmEE,qCACE,EAAsB,QAEnB,EAAQ,EAAsB",
  "names": []
}
